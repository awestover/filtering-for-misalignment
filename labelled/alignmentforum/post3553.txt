What follows is an argument against finding optimization daemons with too much probability mass in the speed prior. The argument is very fake, but perhaps it could inspire real math down the line. The intuition isn't so different from the one in are minimal circuits daemon free? -- mostly, the speed prior seems like a harder thing to argue is daemon-free. The speed prior is very similar to a K-complexity prior, except where a K-complexity prior assigns probability proportional to 2 − l e n g t h to a program, the speed prior adds an extra penalty for execution time: 2 − l e n g t h − l o g ( t i m e ) . Note that the penalty for time is logarithmic compared to the penalty for length; thinking twice as long is penalized the same as being one bit longer. Optimization daemons arise when we are searching a rich space to try and solve a problem which we don't otherwise know how to solve. This makes it seem like the worst-case scenario for daemons would be if intelligence is really fundamentally about search -- then "try to be intelligent and daemon-free" is a non-starter. (There are more nuanced possibilities, like "intelligence is about search, but not necessarily search of "rich spaces" which contain daemons. We'll set those aside for this argument.) So, let's assume that we're in this worst-case scenario. I'm going to make a contrarian argument that this is actually a good thing. To be more precise: the concern with optimization daemons is that by optimizing hard over a rich search space to achieve a difficult task, you might accidentally pick a intelligent agent out of the search space, who has goals which are somewhat different from yours. I'm going to assume that the only way an agent can be an intelligent is either by performing an expensive brute-force search over possibilities, or having some baked-in knowledge which allows a smarter search, saving it time exponential in how much baked-in knowledge it has. The assumption makes a little bit of sense, because linearly many bits can locate something in an exponentially large search space. If I knew more complexity theory, maybe I could say why the assumption is really bad. But, let's proceed with the assumption. The argument is: an optimization daemon which solves the problem via intelligent search can't be higher probability mass than the daemon-free solution. Brute-force search gets you a time penalty which is exactly the same as the description length of the thing you would find out by searching, so there's no reason to search rather than just have the answer. On the other hand, if the daemon is doing some kind of smart search, my (possibly crazy) complexity-theoretic assumption says that the description complexity of the smart search trades off exactly with what it saves you in search time. The idea is that we ourselves are doing intelligent search at the "top level" to solve the problem, but, a solution exists which doesn't itself use intelligent search -- namely, the thing an intelligent agent would be finding. An intelligent agent has probability mass at most equal to the non-intelligent solution. ("Optimization daemons are at most equally likely" may be a rather sad conclusion, but what are you going to do?) Now, obviously, many interesting poly-time algorithms exist which can optimize in interesting cases and which may look somewhat agentic. The (very fake!) assumption I'm using here is that none of these can be intelligent in a concerning sense. In this view, humans can behave very intelligently in large part because we don't think via brute-force search -- we use "smart search" which has been given a large number of bits of compressed advice in the genetic code. Essentially, we get the advantage of the processing power of evolutionary history. Another reason to doubt my assumptions is that, intuitively, it seems like there are a lot of problems which actually require intelligence to solve. If you are trying to train a massive neural network in a very complex setting, it seems plausible that the setting can be complex enough to make you learn a general consequentialist reasoner (rather than a big compressed policy which does well). Perhaps you doubt the premises of my argument but buy the connection between premises and conclusion. If something similar to my argument does make any sense, this means that "intelligence only comes from search" isn't the worst scenario for daemons. The worst-case scenario is the case where there are types of intelligence which don't just look like search, but we don't know what all of them are ; this means that the optimization daemons can be smarter than the search algorithm in a significant sense, creating pressure for our search to find those intelligent agents in order to solve problems more efficiently.