This post is an appendix to " Infra-Bayesian physicalism: a formal theory of naturalized induction ". Proposition 2.16: Consider some Γ 0 , Γ 1 , Φ and Θ ∈ □ c ( Γ 0 × Γ 1 × Φ ) .
Define π : el Γ 0 × Γ 1 → el Γ 0 by π ( y , z , α ) : = ( y , { y ′ ∈ Γ 0 ∣ ( y ′ , z ) ∈ α } ) .
Then, ( π × id Φ ) ∗ Br Γ 0 × Γ 1 ( Θ ) ⊆ pr el Γ 0 × Φ Br Γ 0 ( Θ ) ⊆ Br Γ 0 ( pr Γ 0 × Φ Θ ) We can prove the second subset inclusion directly as a corollary of Proposition 2.10, just let the t of Proposition 2.10 be the projection function Γ 1 × Φ → Φ , so that just leaves the first subset inclusion direction. If you've seen the proofs so far, you know we do a thing where we try to show subset inclusion with expectations of functions and inequalities instead. And that the proofs all proceed by transforming the expectations until we get a maximum over contribution expectation values, and that's always where the hard part of proving the inequalities shows up. So, let's just get that part over with, an interested reader can work it out with previous proofs as a guide. Unusually, we'll be keeping track of identity functions here. Plugging in some f , and doing our usual activities to get every term into the appropriate form, we can get this result if we manage to show that max θ ′ ∈ Br Γ 0 × Γ 1 ( Θ ) ( π × id Φ ) ∗ θ ′ ( λ y 0 α 0 x . f ( y 0 , x , α 0 ) ) ≤ max θ ∈ Br Γ 0 ( Θ ) pr el Γ 0 × Φ θ ( λ y 0 α 0 x . f ( y 0 , x , α 0 ) ) So, to establish this, we'll show that, given some θ ′ ∈ Br Γ 0 × Γ 1 ( Θ ) , we have ( π × id Γ 1 × Φ ) ∗ ( θ ′ ) ∈ Br Γ 0 ( Θ ) , and that pr el Γ 0 × Φ ( ( π × id Γ 1 × Φ ) ∗ θ ′ ) = ( π × id Φ ) ∗ θ ′ because, if we show that, then it means that Br Γ 0 ( Θ ) is a rich enough set for the right-hand side of the equation to match anything the left-hand-side can put out. First off, pr el Γ 0 × Φ ( ( π × id Γ 1 × Φ ) ∗ θ ′ ) = ( π × id Φ ) ∗ θ ′ is pretty trivial to show. The only difference between the two processes is that the Γ 1 coordinate of θ ′ is discarded immediately on the right-hand-side, and it's preserved for one step and then discarded on the second step for the left-hand-side. Now for our inequality of interest. Let θ ′ ∈ Br Γ 0 × Γ 1 ( Θ ) , and we're trying to show that ( π × id Γ 1 × Φ ) ∗ ( θ ′ ) ∈ Br Γ 0 ( Θ ) First off, showing the support condition for ( π × id Γ 1 × Φ ) ∗ ( θ ′ ) which is somewhat  nontrivial this time around. We start off with a guarantee that ( y 0 , y 1 ) ∈ α . This happens iff y 0 ∈ { y ′ 0 | ( y ′ 0 , y 1 ) ∈ α } = π ( y 0 , y 1 , α ) 2 Γ 0 And so, we get that y 0 ∈ α 0 is guaranteed for that pushforward, support condition established. endofunction condition time. It's important to remember that we want to treat el Γ 0 as the computation side of things, and Γ 1 × Φ as the environment side of things, for our bridge transform we're working with. s : Γ 0 → Γ 0 and g : Γ 0 × Γ 1 × Φ → [ 0 , 1 ] . Begin. ( π × id Γ 1 × Φ ) ∗ θ ′ ( λ y 0 y 1 α 0 x . χ s ( y 0 ) ∈ α 0 g ( s ( y 0 ) , y 1 , x ) ) = θ ′ ( λ y 0 y 1 α x . χ s ( y 0 ) ∈ π ( y 0 , α , y 1 ) 2 Γ 0 g ( s ( y 0 ) , y 1 , x ) ) Let's unpack precisely what that set is. = θ ′ ( λ y 0 y 1 α x . χ s ( y 0 ) ∈ { y ′ 0 | ( y ′ 0 , y 1 ) ∈ α } g ( s ( y 0 ) , y 1 , x ) ) = θ ′ ( λ y 0 y 1 α x . χ ( s ( y 0 ) , y 1 ) ∈ α g ( s ( y 0 ) , y 1 , x ) ) And we can rewrite the endofunction a little bit = θ ′ ( λ y 0 y 1 α x . χ ( s × id Γ 1 ) ( y 0 , y 1 ) ∈ α g ( ( s × id Γ 1 ) ( y 0 , y 1 ) , x ) ) And finally apply our endofunction condition, since we've now got the function in a form that's treating y 0 , y 1 as part of the computational universe... ≤ Θ ( λ y 0 y 1 x . g ( y 0 , y 1 , x ) ) And we're done, this establishes our desired result. ■ Proposition 2.17: Br ( Θ ) is a continuous function
of Θ . The way this proof will work is by describing a composition of functions that makes Br ( Θ ) from Θ , and then showing that each of these functions is continuous, if el Γ × Φ is a finite set. Claim: The bridge transform of some Θ is equal to (using χ el Γ to denote restricting an ultradistribution to the event y ∈ α and χ − 1 el Γ to denote the inverse of said function, mapping an ultradistribution on el Γ to the largest ultradistribution that could have produced it via restriction) χ el Γ ( ⋂ s : Γ → Γ s ∗ ( χ − 1 el Γ ( ι ∗ ( p r ∗ ( Θ ) ) ) ) ) Breaking down the unfamilar notation, the type of p r is el Γ × Φ → Γ × Φ , just the usual projection. That asterisk up top is pullback along that function. The type of ι is el Γ × Φ → Γ × 2 Γ × Φ . And s ∗ is pullback along the function Γ × 2 Γ × Φ → Γ × 2 Γ × Φ given by ( s , id 2 Γ , id Φ ) . Let's unpack the exact conditions that cause a θ to lie in the set χ el Γ ( ⋂ s : Γ → Γ s ∗ ( χ − 1 el Γ ( ι ∗ ( p r ∗ ( Θ ) ) ) ) ) First off, a θ is in this set iff it is supported over the event y ∈ α , and it lies in the set ⋂ s : Γ → Γ s ∗ ( χ − 1 el Γ ( ι ∗ ( p r ∗ ( Θ ) ) ) ) Which occurs iff θ is supported over the event y ∈ α , and for all s : Γ → Γ , θ lies in the set s ∗ ( χ − 1 el Γ ( ι ∗ ( p r ∗ ( Θ ) ) ) ) Which occurs iff θ is suported over the event y ∈ α , and for all s : Γ → Γ , s ∗ ( θ ) lies in the set χ − 1 el Γ ( ι ∗ ( p r ∗ ( Θ ) ) ) Which occurs iff θ is supported over the event y ∈ α , and for all s : Γ → Γ , χ el Γ ( s ∗ ( θ ) ) lies in the set ι ∗ ( p r ∗ ( Θ ) ) Now, ι is just doing a little bit of type conversion, so we're justified in ignoring it. Anways, the previous thing occurs iff θ is supported over the event y ∈ α , and for all s : Γ → Γ , p r ∗ ( χ el Γ ( s ∗ ( θ ) ) ) ∈ Θ . Which happens iff θ is supported over the event y ∈ α and for all s : Γ → Γ and g : Γ × Φ → [ 0 , 1 ] , p r ∗ ( χ el Γ ( s ∗ ( θ ) ) ) ( λ y x . g ( y , x ) ) ≤ Θ ( λ y x . g ( y , x ) ) However, unpacking the left-hand side, we get p r ∗ ( χ el Γ ( s ∗ ( θ ) ) ) ( λ y x . g ( y , x ) ) = χ el Γ ( s ∗ ( θ ) ) ( λ y α x . g ( y , x ) ) = s ∗ ( θ ) ( λ y α x . χ y ∈ α g ( y , x ) ) = θ ( λ y α x . χ s ( y ) ∈ α g ( s ( y ) , x ) ) Which is the exact condition for θ to lie in the bridge transform. So, we have an equivalence. Now, since we've phrased the bridge transform as χ el Γ ( ⋂ s : Γ → Γ s ∗ ( χ − 1 el Γ ( ι ∗ ( p r ∗ ( Θ ) ) ) ) ) We just need to establish that when all the sets are finite, then pullbacks are continuous, pushforwards are continuous, un-restrictions are continuous, intersections are continuous, and restrictions are continuous. Then, this would just be a particularly fancy continuous function, and accordingly, if Θ n limited to Θ , then Br ( Θ n ) would limit to Br ( Θ ) . Let's establish that when the sets are finite, pullbacks are continuous. Let g : X → Y , and Y and X be finite sets, and ψ ∈ □ Y . Then, we have g ∗ ( ψ ) ( λ x . f ( x ) ) : = ψ ( λ y . max x ∈ g − 1 ( y ) f ( x ) ) With the convention that maximizing over the empty set produces a value of 0. That is an alternate phrasing of pullback. We can then go lim n → ∞ d ( g ∗ ( ψ n ) , g ∗ ( ψ ) ) = lim n → ∞ sup f : X → [ 0 , 1 ] | g ∗ ( ψ n ) ( f ) − g ∗ ( ψ ) ( f ) | = lim n → ∞ sup f : X → [ 0 , 1 ] | ψ n ( λ y . max x ∈ g − 1 ( y ) f ( x ) ) − ψ ( λ y . max x ∈ g − 1 ( y ) f ( x ) ) | ≤ lim n → ∞ sup h : Y → [ 0 , 1 ] | ψ n ( h ) − ψ ( h ) | = lim n → ∞ d ( ψ n , ψ ) = 0 Admittedly, this isn't quite what our usual modified KR metric usually looks like. The reason we can do this is because we're just dealing with functions in [ 0 , 1 ] , so the norm part of the modified KR metric doesn't matter, and since our sets are finite, we can say that all points are distance 1 from each other, so all functions are 1-Lipschitz, and then the two metrics coincide. So, pullback along any function is continuous. For pushforward, it's easy because, if ψ ∈ □ X , then we've got lim n → ∞ d ( g ∗ ( ψ n ) , g ∗ ( ψ ) ) = lim n → ∞ sup h : Y → [ 0 , 1 ] | g ∗ ( ψ n ) ( h ) − g ∗ ( ψ ) ( h ) | = lim n → ∞ sup h : Y → [ 0 , 1 ] | ψ n ( λ x . h ( g ( x ) ) ) − ψ ( λ x . h ( g ( x ) ) ) | ≤ lim n → ∞ sup f : X → [ 0 , 1 ] | ψ n ( f ) − ψ ( f ) | = lim n → ∞ d ( ψ n , ψ ) = 0 For showing restrictions continuous, for the set E ⊆ X that we're updating on, lim n → ∞ d ( χ E ( ψ n ) , χ E ( ψ ) ) = lim n → ∞ sup f : X → [ 0 , 1 ] | χ E ( ψ n ) ( f ) − χ E ( ψ ) ( f ) | = lim n → ∞ sup f : X → [ 0 , 1 ] | ψ n ( χ x ∈ E f ( x ) ) − ψ n ( χ x ∈ E f ( x ) ) | ≤ lim n → ∞ sup f : X → [ 0 , 1 ] | ψ n ( f ) − ψ ( f ) | = lim n → ∞ d ( ψ n , ψ ) = 0 For intersections... that will take a bit more work. We'll have to use the equivalent formulation of closeness, that ψ n limits to ψ iff the Hausdorff distance between the corresponding sets (according to the generalized KR measure) limits to 0. So, our task is to assume that ψ n limits to ψ , and ϕ n limits to ϕ , and show that ψ n ∩ ϕ n limits to ψ ∩ ϕ . The bound we'll manage to prove is that d ( ψ n ∩ ϕ n , ψ ∩ ϕ ) ≤ | X | max ( d ( ψ n , ψ ) , d ( ϕ n , ϕ ) ) Where | X | is the number of elements in the finite set X . Here's the basic argument. For any particular point in the set ψ n , there's a nearby point in ψ (since the Hausdorff distance is low) with only ϵ measure moved around or deleted. So, in particular, if all the measure moved or deleted was just deleted from ψ n instead, then that resulting contribution would be below the nearby contribution in ψ that we picked, and so it would lie in ψ as well due to downwards closure. So, in particular, if ψ n and ψ only have a Hausdorff distance of ϵ , then, taking any contribution in ψ n and subtracting ϵ measure from \emph{all points} (if possible, if not, just remove measure till you're at 0) is \emph{guaranteed} to make a point in ψ , and vice-versa. And a corollary of that is that, given any contribution in ψ n ∩ ϕ n , the "subtract max ( d ( ψ n , ψ ) , d ( ϕ n , ϕ ) ) measure from each point" contribution is in ψ , also in ϕ , and at a maximum distance of | X | max ( d ( ψ n , ψ ) , d ( ϕ n , ϕ ) ) from the original contribution. And this argument can be reversed to show that the limit of the intersections is the intersection of the limits (because hausdorff distance between the two goes to 0), so we do in fact have intersection being continuous. And that just leaves un-restricting. Again, this will take a Hausdorff-distance argument. Fixing some contribution in χ − 1 E ( ψ n ) , it can be broken down into an on-E part θ n , E , and an off-E part θ n , ¬ E . When you restrict to E, then θ n , E ∈ ψ n . Since ψ n is within ϵ of ψ , there's some θ E ∈ ψ that's within ϵ of θ n , E . Then, let your point in χ − 1 E ( ψ ) be θ E + θ n , ¬ E (if there's slightly more than 1 measure there, delete ϵ measure from θ n , ¬ E , or all the measure if there's less than ϵ present). It's close to θ n , E + θ n , ¬ E because θ n , E is close to θ E , the other component of it is unchanged, and maybe we deleted a little bit of excess measure which didn't do much. This line of argument shows that ψ n being close to the limit ψ is sufficient to establish that the un-restriction of the two of them are comparably close together. So we have continuity for that, which is the last thing we needed. Since we wrote the bridge transform as a sequence of continuous functions, we know it's continuous (as long as all the involved sets are finite) ■ Proposition 3.1: Let X be a finite poset, f : X → R and Θ ∈ □ c X downward closed. Define f max : X → R by f max ( x ) : = max y ≤ x f ( y ) . Observe that f max is
always non-decreasing. Then, Θ ( f ) = Θ ( f max ) . Proof: Pick a θ ′ ∈ Θ s.t. θ ′ ( f max ) = Θ ( f max ) . Ie, a maximizing contribution. Let k : X → X be defined as k : = λ x . argmax y ≤ x f ( y ) . Ie, it moves a point down to somewhere below it where it can attain the highest value according to f . Now, consider k ∗ ( θ ′ ) . It's present in Θ because Θ was, by assumption, downwards closed, and we just moved all the measure down. Now, we have Θ ( f ) = max θ ∈ Θ θ ( f ) ≥ k ∗ ( θ ′ ) ( f ) = θ ′ ( λ x . f ( k ( x ) ) ) = θ ′ ( λ x . f ( argmax y ≤ x f ( y ) ) ) = θ ′ ( λ x . max y ≤ x f ( y ) ) = θ ′ ( f max ) = Θ ( f max ) ≥ Θ ( f ) And so, all inequalities must be equalities, proving that Θ ( f max ) ≥ Θ ( f ) . In order, the connectives were: unpacking definitions, using downward closure to conclude that k ∗ ( θ ′ ) ∈ Θ , unpacking pushforwards, unpacking the definition of k , using that applying a function to the argmax of inputs to that function just makes the max of the function, folding the definition of f max back up, using that θ ′ was selected to maximize f max , and applying monotonicity. Done! ■ Proposition 4.1: Consider some Γ , Φ ,
a relation Q ⊆ Γ × Φ and a PUCK Ξ over Q .
Let Θ : = ⊤ Γ ⋉ Ξ . Then, Br ( Θ ) = [ ⊤ Γ ⋉ ( sus Θ ⋊ Ξ ) ] ↓ = [ ⊤ Γ ⋉ ( Q − 1 ⋊ Ξ ) ] ↓ First off, I'm not terribly picky about variable ordering, so I'll just write our desired proof target as Br ( Θ ) = [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ↓ = [ ⊤ Γ ⋉ Ξ ⋉ Q − 1 ] ↓ The way we'll do this is by establishing the following result. For all monotone f ′ : el Γ × Φ → [ 0 , 1 ] , we have Br ( Θ ) ( f ′ ) ≤ [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ( f ′ ) ≤ [ ⊤ Γ ⋉ Ξ ⋉ Q − 1 ] ( f ′ ) ≤ Br ( Θ ) ( f ′ ) Why does that suffice? Well, assume hypothetically that the result held. Since the inequalities go in a circle, we have equality for all monotone functions. And then, for some non-monotone function f , we can go Br ( Θ ) ( f ) = Br ( Θ ) ( f max ) = [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ( f max ) = [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ↓ ( f max ) = [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ↓ ( f ) and swap out sus Θ for Q − 1 to show the other equality, and then we'd have equality of the three ultradistributions on all functions, so they're equal. For the equalities in the above equation, the first one arose because of Proposition 2.4 (bridge transforms are always downwards closed) and Proposition 3.1 (downwards-closed things let you swap out f for f max and it doesn't affect the value). The second equality arose because f max is a monotone function and by assumption, we have equality for monotone functions. The third equality would arise because taking the downwards closure doesn't affect the expectation value of monotone functions. If you add a bunch of contributions made by measure flowing down, that's just strictly worse from the perspective of a monotone function and doesn't change expectation value. And the fourth equality arises from Proposition 3.1 again. So, we just need to prove the following three inequalities, for monotone functions f . Br ( Θ ) ( f ) ≤ [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ) ( f ) ≤ [ ⊤ Γ ⋉ Ξ ⋉ Q − 1 ] ( f ) ≤ Br ( Θ ) ( f ) The first one is easily addressable by Proposition 2.7. By proposition 2.7 and the definition of Θ , we have Br ( Θ ) ⊆ ( Θ ⋉ sus Θ ) ↓ = [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ↓ And so, for monotone functions f , we have Br ( Θ ) ( f ) ≤ [ ⊤ Γ ⋉ Ξ ⋉ sus Θ ] ) ( f ) Done. Now to show our second inequality. ( ⊤ Γ ⋉ Ξ ⋉ sus Θ ) ( λ y α x . f ( y , x , α ) ) = ( ⊤ Γ ⋉ Ξ ) ( λ y x . δ sus Θ ( x ) ( λ α . f ( y , x , α ) ) ) = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , sus Θ ( x ) ) ) Unpack the definition of the set = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , { y ′ | ( y ′ , x ) ∈ supp Θ } ) ) Unpack the definition of Θ = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , { y ′ | ( y ′ , x ) ∈ supp ⊤ Γ ⋉ Ξ } ) ) The condition ( y ′ , x ) ∈ supp ⊤ Γ ⋉ Ξ is equivalent to x ∈ supp Ξ ( y ′ ) . After all, if x ∈ supp Ξ ( y ′ ) , the distribution δ y ′ lies in ⊤ Γ , so δ y ′ ⋉ Ξ would certify that ( y ′ , x ) ∈ supp ⊤ Γ ⋉ Ξ . And if x ∉ supp Ξ ( y ′ ) , then no matter the distribution in ⊤ Γ or kernel selected from Ξ , if y ′ gets picked, then the kernel selected from Ξ isn't going to be making x along with it. Since we have that iff characterization, we have = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , { y ′ | x ∈ supp Ξ ( y ′ ) } ) ) Ξ ( y ′ ) is the union of a bunch of k ( y ′ ) for k ∈ Π (and convex hull), so its support is equal to the union of the supports for the k ( y ′ ) . = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , { y ′ | x ∈ ⋃ k ∈ Π supp k ( y ′ ) } ) ) Then, since each k is a PoCK over Q , k ( y ′ ) is the restriction of some measure ϖ k to the set Q ( y ) , which will be written as χ Q ( y ′ ) ϖ k . = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , { y ′ | x ∈ ⋃ k ∈ Π supp ( χ Q ( y ′ ) ϖ k ) } ) ) And now we're about to get an inequality. f is monotone, so making the associated set bigger (easier to fulfill the defining condition) should always increase the value of f , and by monotonicity, increase the expectation value, so we get ≤ ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , { y ′ | x ∈ Q ( y ′ ) } ) ) Then restate = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , { y ′ | ( x , y ′ ) ∈ Q } ) ) = ( ⊤ Γ ⋉ Ξ ) ( λ y x . f ( y , x , Q − 1 ( x ) ) ) And pack back up as a semidirect product. = ( ⊤ Γ ⋉ Ξ ) ( λ y x . δ Q − 1 ( x ) ( λ α . f ( y , x , α ) ) ) = ( ⊤ Γ ⋉ Ξ ⋉ Q − 1 ) ( λ y α x . f ( y , x , α ) ) And we have our second ≤ inequality established! Now, onto the third inequality. ( ⊤ Γ ⋉ Ξ ⋉ Q − 1 ) ( λ y α x . f ( y , x , α ) ) Unpack the semidirect products = ⊤ Γ ( λ y . Ξ ( y ) ( λ x . δ Q − 1 ( x ) ( λ α . f ( y , x , α ) ) ) ) And what top means = max y ∈ Γ Ξ ( y ) ( λ x . δ Q − 1 ( x ) ( λ α . f ( y , x , α ) ) ) And as for Ξ ... well, each Ξ ( y ) is the convex hull of the various k ( y ) , for k ∈ Π . So, the expectation for Ξ ( y ) is the maximum expectation for the various k ( y ) , so we can rewrite as = max y ∈ Γ max k ∈ Π k ( y ) ( λ x . δ Q − 1 ( x ) ( λ α . f ( y , x , α ) ) ) Pick a particular y ∗ and k ∗ that attain the maximal value = k ∗ ( y ∗ ) ( λ x . δ Q − 1 ( x ) ( λ α . f ( y ∗ , x , α ) ) ) Reexpress a little bit = δ y ∗ ( λ y . k ∗ ( y ) ( λ x . δ Q − 1 ( x ) ( λ α . f ( y , x , α ) ) ) And pack this back up as a semidirect product = ( δ y ∗ ⋉ k ∗ ⋉ Q − 1 ) ( λ y α x . f ( y , x , α ) ) And then we'll be showing that this contribution lies in Br ( Θ ) . Once we've done that, we can go ≤ max θ ′ ∈ Br ( Θ ) θ ′ ( λ y α x . f ( y , x , α ) ) = Br ( Θ ) ( λ y α x . f ( y , x , α ) ) And we'd be done, having proven the third inequality and the last one to finish up the proof. So, now our proof target switches to showing that ( δ y ∗ ⋉ k ∗ ⋉ Q − 1 ) ∈ Br ( Θ ) . We can show this if we show the support condition and the endofunction condition. For the support condition, we have ( δ y ∗ ⋉ k ∗ ⋉ Q − 1 ) ( λ y α x . χ y ∉ α ) = δ y ∗ ( λ y . k ∗ ( y ) ( λ x . δ Q − 1 ( x ) ( λ α . χ y ∉ α ) ) ) = δ y ∗ ( λ y . k ∗ ( y ) ( λ x . χ y ∉ Q − 1 ( x ) ) ) = k ∗ ( y ∗ ) ( λ x . χ y ∗ ∉ Q − 1 ( x ) ) And then we use that the k ∗ ( y ∗ ) are all of the form "take this measure, restrict it to Q ( y ∗ ) ", to get = ( χ Q ( y ∗ ) ϖ k ∗ ) ( λ x . χ y ∗ ∉ Q − 1 ( x ) ) = ϖ k ∗ ( λ x . χ x ∈ Q ( y ∗ ) χ y ∗ ∉ Q − 1 ( x ) ) Unpacking the definitions, we get = ϖ k ∗ ( λ x . χ ( x , y ∗ ) ∈ Q χ ( x , y ∗ ) ∉ Q ) = 0 And so, this contribution is indeed supported on ( y , α ) pairs s.t. y ∈ α . Now for the endofunction condition. As usual, fix an s and a g . ( δ y ∗ ⋉ k ∗ ⋉ Q − 1 ) ( λ y α x . χ s ( y ) ∈ α g ( s ( y ) , x ) ) Unpack the semidirect product = δ y ∗ ( λ y . k ∗ ( y ) ( λ x . δ Q − 1 ( x ) ( λ α . χ s ( y ) ∈ α g ( s ( y ) , x ) ) ) ) Plug in the dirac-deltas = k ∗ ( y ∗ ) ( λ x . χ s ( y ∗ ) ∈ Q − 1 ( x ) g ( s ( y ∗ ) , x ) ) Reexpress the set membership criterion a bit = k ∗ ( y ∗ ) ( λ x . χ x ∈ Q ( s ( y ∗ ) ) g ( s ( y ∗ ) , x ) ) And the contribution at the start = ( χ Q ( y ∗ ) ϖ k ∗ ) ( λ x . χ x ∈ Q ( s ( y ∗ ) ) g ( s ( y ∗ ) , x ) ) Distribute it in as an indicator function. = ϖ k ∗ ( λ x . χ x ∈ Q ( y ∗ ) χ x ∈ Q ( s ( y ∗ ) ) g ( s ( y ∗ ) , x ) ) Pull the other indicator function out. = ( χ Q ( s ( y ∗ ) ) ϖ k ∗ ) ( λ x . χ x ∈ Q ( y ∗ ) g ( s ( y ∗ ) , x ) ) Rewrite with k ∗ = k ∗ ( s ( y ∗ ) ) ( λ x . χ x ∈ Q ( y ∗ ) g ( s ( y ∗ ) , x ) ) Use an inequality to get rid of the indicator function ≤ k ∗ ( s ( y ∗ ) ) ( λ x . g ( s ( y ∗ ) , x ) ) Rewrite it a bit = δ s ( y ∗ ) ( λ y . k ∗ ( y ) ( λ x . g ( y , x ) ) ) Swap out k ∗ ( y ) for Ξ ( y ) , the latter is larger ≤ δ s ( y ∗ ) ( λ y . Ξ ( y ) ( λ x . g ( y , x ) ) ) Swap out δ s ( y ∗ ) for ⊤ Γ , the latter is larger ≤ ⊤ Γ ( λ y . Ξ ( y ) ( λ x . g ( y , x ) ) ) = ( ⊤ Γ ⋉ Ξ ) ( λ y x . g ( y , x ) ) Abbreviate = Θ ( λ y x . g ( y , x ) ) And bam, endofunction condition is shown, the entire proof goes through now. ■ Corollary 4.3: Suppose that for any d ∈ D and π : H → A s.t. d ∈ supp W ( π ) , it holds that d C π . That is, the observations W predicts to receive from the computer are consistent with the
chosen policy. Let L : D → R be a Cartesian loss function
and π : H → A a policy. Then, ( pr el Γ Br ( Θ W ) ∩ C π fair ) ( L phys ) = W ( π ; L ) I'm going to be proceeding very cautiously here. First off, make our π value visually distinct by swapping it out for π ∗ ( pr el Γ Br ( Θ W ) ∩ C π ∗ fair ) ( L phys ) Now, by the identifications we made earlier, we can identify Γ with A H , the space of policies. Using that to unpack the function a little bit, we have = ( pr el Γ Br ( Θ W ) ∩ C π ∗ fair ) ( λ π α . L phys ( π , α ) ) Now, we note that intersecting with top of a particular set is equivalent to updating on the indicator function for that set. Using definition 1.5 to unpack C π ∗ fair , we get = ( pr el Γ Br ( Θ W ) ) ( λ π α . χ ∀ h ∈ H π , α : G π ( h ) = π ∗ ( h ) L phys ( π , α ) ) Apply that G π ( h ) is "what would the agent do on h if the agent is copying the behavior of π ", so we can rephrase as: = ( pr el Γ Br ( Θ W ) ) ( λ π α . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) L phys ( π , α ) ) Pull off the projection, and use d for a destiny in D . = Br ( Θ W ) ( λ π α d . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) L phys ( π , α ) ) At this point, we use that Θ W : = ⊤ Γ ⋉ W , and that W is a PUCK over Q 0 and Proposition 4.1 to go = [ ⊤ Γ ⋉ W ⋉ Q − 1 0 ] ↓ ( λ π α d . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) L phys ( π , α ) ) Before we can remove the downwards closure, we'll want to verify the function is monotone. So, we'll want to start unpacking the physicalist loss next. Applying definition 3.1, and using d ′ instead of g to remember it's a destiny, we have = [ ⊤ Γ ⋉ W ⋉ Q − 1 0 ] ↓ ( λ π α d . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ X π , α max d ′ : h a ⊑ d ′ L ( d ′ ) ) Next up is unpacking X π , α . Using definition 3.1, it's = [ ⊤ Γ ⋉ W ⋉ Q − 1 0 ] ↓ ( λ π α d . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , α × A ∧ ( ∀ π ′ ∈ α : G π ′ ( h ) = a ) max d ′′ : h a ⊑ d ′ L ( d ′ ) ) At this point, we can, again, treat G π ′ ( h ) the same as π ′ ( h ) . = [ ⊤ Γ ⋉ W ⋉ Q − 1 0 ] ↓ ( λ π α d . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , α × A ∧ ( ∀ π ′ ∈ α : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′′ L ( d ′ ) ) And now we need to take a moment to show that H π , α gets smaller when α gets larger. Applying definition 1.5, the event h ∈ H π , α unpacks as ( ∀ h ′ a ⊏ h , π ′ ∈ α : G π ′ ( h ′ ) = a ) ∧ ( ∃ d ′ : h ⊏ d ′ ∧ d ′ C π ) Now, if α becomes a larger set, then it gets harder for the first condition to be fulfilled, so the set H π , α shrinks. Now, since this happens, it means that if α gets bigger, it gets more difficult for the prerequisite of the implication in the indicator function to be fulfilled, so the implication is more likely to hold. Further, the minimization is taking place over a smaller set, so the loss goes up. So our function is monotone in α , and we can remove the downwards closure. = ( ⊤ Γ ⋉ W ⋉ Q − 1 0 ) ( λ π α d . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , α × A ∧ ( ∀ π ′ ∈ α : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′′ L ( d ′ ) ) Unpacking the semidirect product, it is = ⊤ Γ ( λ π . W ( π ) ( λ d . δ Q − 1 0 ( d ) ( λ α . χ ∀ h ∈ H π , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , α × A ∧ ( ∀ π ′ ∈ α : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) ) ) Substituting in the dirac-delta everywhere that α is, we get = ⊤ Γ ( λ π . W ( π ) ( λ d . χ ∀ h ∈ H π , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , Q − 1 0 ( d ) × A ∧ ( ∀ π ′ ∈ Q − 1 0 ( d ) : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) ) Now, Q − 1 0 ( d ) is the set of policies π ′ s.t. π ′ Q 0 d . The "this policy is consistent with this destiny" relation. Also let's swap out ⊤ Γ for maximization = max π W ( π ) ( λ d . χ ∀ h ∈ H π , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , Q − 1 0 ( d ) × A ∧ ( ∀ π ′ Q 0 d : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) Now, we're going to try to address that minimum, and show that the only h a that fulfill the conditions are exactly those h a ⊑ d . This requires showing that h a ⊑ d is a sufficient condition to fulfill the relevant properties, and then to show that h a ⋢ d implies a failure of one of the properties. So, first up. Assume h a ⊑ d . Then, for any π ′ , d Q 0 π ′ and h a ⊑ d \emph{must} imply that π ′ ( h ) = a , that's what policy consistency means. Also, h ∈ H π , Q − 1 0 ( d ) unpacks as the two conditions ∀ h ′ a ′ , π ′ : h ′ a ′ ⊏ h ∧ d Q 0 π ′ → π ′ ( h ′ ) = a ′ ∃ d ′ : h ⊏ d ′ ∧ d ′ C π As for the first condition,clearly, if π ′ is consistent with d , it's consistent with h a because h a ⊑ d , and so it must be consistent with any prefix of h a , so the first condition holds. For the second condition, d is a valid choice, because we assumed h a ⊑ d , and d C π occurs always, because W ( π ) always being supported on d s.t. d C π was one of our problem assumptions. So, we have one implication direction down. Now for the reverse implication direction. Assume h a ⋢ d . Then there are two possibilities. the first possibility is that h a first diverges from d on an observation. The second possibility is that h a first diverges from d on an action. For the first possibility, it's possible to make two policies which are consistent with d but also differ in their actions on history h , because h isn't a prefix of d if h a first differs from d on an observation. For the second possibility, it's ruled out by either the condition for h ∈ H π , Q − 1 0 ( d ) that goes ∀ h ′ a ′ , π ′ : h ′ a ′ ⊏ h ∧ π ′ Q 0 d → π ′ ( h ′ ) = a ′ or the extra condition that ∀ π ′ : π ′ Q 0 d → π ′ ( h ) = a applied to the first a-history prefix that deviates from d , because π ′ Q 0 d implies that π ′ ( h ′ ) must be the action which d dictates, not the action a ′ that deviates from d . And that establishes the other direction of the iff statement. Thus, we can swap out our fancy minimization with just minimizing over the h a ⊑ d . = max π W ( π ) ( λ d . χ ∀ h ∈ H π , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) min h a : h a ⊑ d max d ′ : h a ⊑ d ′ L ( d ′ ) ) This minimization is attained by selecting d itself. So then it turns into = max π W ( π ) ( λ d . χ ∀ h ∈ H π , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) At this point, what we'll do is show that an upper bound and lower bound on the value of this term is the same. Going from upper bound to lower bound, it's starting out with W ( π ∗ ) ( λ d . L ( d ) ) At this point, we'll use that W is a PUCK, so there's a set E of environments e (PoCK's) that W is generated from, so we can go: = max e ∈ E e ( π ∗ ) ( λ d . L ( d ) ) = max π max e ∈ E e ( π ∗ ) ( λ d . χ d Q 0 π L ( d ) ) = max π max e ∈ E ( χ Q 0 ( π ∗ ) ϖ e ) ( λ d . χ d Q 0 π L ( d ) ) = max π max e ∈ E ϖ e ( λ d . χ d Q 0 π ∗ χ d Q 0 π L ( d ) ) Now pull the indicator function back out. = max π max e ∈ E ( χ Q 0 ( π ) ϖ e ) ( λ d . χ d Q 0 π ∗ L ( d ) ) = max π max e ∈ E e ( π ) ( λ d . χ d Q 0 π ∗ L ( d ) ) = max π W ( π ) ( λ d . χ d Q 0 π ∗ L ( d ) ) Now we must show that this is a looser constraint than what was previously in our indicator function to proceed further. So our next order of business is showing that, certainly, ∀ h ∈ H π , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) → d Q 0 π ∗ Let h be one of the history prefixes of some d in the support of W ( π ) . The two conditions for h ∈ H π , Q − 1 0 ( d ) are fulfilled, because they are ∀ h ′ , a ′ , π ′ : h ′ a ′ ⊏ h ∧ d Q 0 π ′ → π ′ ( h ′ ) = a ′ ∃ d ′ : h ⊏ d ′ ∧ d ′ C π For the first condition, if h ′ a ′ ⊏ h , then h ′ a ′ ⊏ d , and so if π ′ is consistent with d , it must take the same action in response to h ′ , the action that d commands, a ′ . So that's fulfilled. For the second condition, let d ′ be d . h ⊏ d holds, and so d C π holds certainly, because W ( π ) is supported on d s.t. d C π . So, for all d in the support of W ( π ) , h ⊏ d → h ∈ H π , Q − 1 0 ( d ) . Since we assumed our forall statement as prerequisite, this means that for all h ⊏ d , π ( h ) = π ∗ ( h ) . And d Q 0 π means ∀ h a ⊑ d : π ( h ) = a . Since π ∗ ( h ) mimics π ( h ) for all history prefixes of d , this means ∀ h a ⊑ d : π ∗ ( h ) = a , ie d Q 0 π ∗ . So, since this is a looser constraint, when we were previously at = max π W ( π ) ( λ d . χ d Q 0 π ∗ L ( d ) ) we can proceed further to ≥ max π W ( π ) ( λ d . χ ∀ h ∈ H π , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) Which is our value we're trying to sandwich. Now, at this point, plug in π ∗ and get ≥ W ( π ∗ ) ( λ d . χ ∀ h ∈ H π ∗ , Q − 1 0 ( d ) : π ∗ ( h ) = π ∗ ( h ) L ( d ) ) = W ( π ∗ ) ( λ d . L ( d ) ) And bam, we've sandwiched our term between W ( π ∗ ) ( L ) on both sides, and so the result follows. ■ Proposition 4.2: Let X , Y and Z be finite
sets, Q ⊆ Y × X a relation, κ : Y → Δ c ( X × Z ) a Z -PoCK over Q and Θ ∈ □ c Y . Then, there exist μ ∈ Δ c Z and ϕ : Z × Y → Δ c X s.t. for all z , λ y . ϕ ( z , y ) is a PoCK over Q , and for all y ∈ Y , κ ( y ) = ( λ z . ϕ ( z , y ) ) ⋊ μ . Moreover, suppose that ( μ 1 , ϕ 1 ) and ( μ 2 , ϕ 2 ) are both as above.
Then, μ 1 ⋉ Θ ⋉ ϕ 1 = μ 2 ⋉ Θ ⋉ ϕ 2 Our first order of business is establishing that there's even a μ and ϕ that has those effects at all. Here's a way to define them. μ ( z ) : = max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) Where ϖ κ is the measure on Z × X that κ is associated with, ie, κ ( y ) = χ Q ( y ) ϖ κ must be true for some ϖ κ because κ is a Z-PoCK over Q. And, ϕ will be defined as: ϕ ( y , z ) ( x ) : = χ x ∈ Q ( y ) ϖ κ ( z , x ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) With those definitions in place, it's easy to establish that μ ⋉ ( λ z . ϕ ( y , z ) ) = κ ( y ) . We can just fix an arbitrary x , z pair and go κ ( y ) ( x , z ) = χ x ∈ Q ( y ) ϖ κ ( z , x ) = max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) ⋅ χ x ∈ Q ( y ) ϖ κ ( z , x ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) = μ ( z ) ⋅ ϕ ( y , z ) ( x ) = ( μ ⋉ ( λ z ′ . ϕ ( y , z ′ ) ) ) ( x , z ) And we're done with showing that such functions exist in the first place. Well, as long as we check that μ and ϕ behave accordingly. First off, μ being a contribution follows from ϖ κ being a Z-polycontribution, and the definition of Z-polycontributions. Also, to show that ( λ y . ϕ ( y , z ) ) is a PoCK over Q, we need to show that there's a ϖ ϕ , z s.t. ϕ ( y , z ) = χ Q ( y ) ϖ ϕ , z , and that always has 1 or less measure. In order to do this, define ϖ ϕ , z : = 1 max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) p r X ( χ { z } × X ϖ κ ) Clearly, you get ϕ ( y , z ) from restricting this to Q ( y ) , because we have ( χ Q ( y ) ϖ ϕ , z ) ( x ) = 1 max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) χ Q ( y ) ( p r X ( χ { z } × X ϖ κ ) ) ( x ) = χ Q ( y ) ( p r X ( χ { z } × X ϖ κ ) ) ( x ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) = χ x ∈ Q ( y ) p r X ( χ { z } × X ϖ κ ) ( x ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) = χ x ∈ Q ( y ) ∑ z ′ ( χ { z } × X ϖ κ ) ( x , z ′ ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) = χ x ∈ Q ( y ) ∑ z ′ χ z ′ = z ϖ κ ( x , z ′ ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) = χ x ∈ Q ( y ) ϖ κ ( x , z ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) = ϕ ( y , z ) ( x ) And we're done. And also, the measure is ≤ 1 , because ∑ x ∈ Q ( y ) ϖ ϕ , z ( x ) = ∑ x ∈ Q ( y ) p r X ( χ { z } × X ϖ κ ) ( x ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) and, skipping over a few routine steps, = ∑ x ∈ Q ( y ) ϖ κ ( x , z ) max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( x ′ , z ) ≤ ∑ x ∈ Q ( y ) ϖ κ ( x , z ) ∑ x ′ ∈ Q ( y ) ϖ κ ( x ′ , z ) = 1 And we're done, we figured out how to decompose κ into μ and ϕ . Now for the second half of the proof. The first thing to establish is that, for all y , z , we have μ 1 ( z ) ⋅ ϕ 1 ( y , z ) = μ 2 ( z ) ⋅ ϕ 2 ( y , z ) . This occurs because, for all x , μ 1 ( z ) ⋅ ϕ 1 ( y , z ) ( x ) = ( μ 1 ⋉ ( λ z . ϕ 1 ( y , z ) ) ) ( x , z ) = κ ( y ) ( x , z ) And then by symmetry, the exact same holds for μ 2 and ϕ 2 , both were declared to be equal to κ . Now that this result is in place, we can begin. ( μ 1 ⋉ Θ ⋉ ϕ 1 ) ( λ x y z . f ( x , y , z ) ) = μ 1 ( λ z . Θ ( λ y . ϕ 1 ( y , z ) ( λ x . f ( x , y , z ) ) ) ) Now, we do something odd. We can reexpress this as = C ( λ z . μ 1 ( z ) ⋅ Θ ( λ y . ϕ 1 ( y ) ( λ x . f ( x , y , z ) ) ) ) Basically, what's going on here is that we can swap out the contribution μ 1 for the counting measure C (1 measure on each distinct point) and just scale down the expectation values accordingly. It's pretty much the same way that you can think of ∑ x μ ( x ) f ( x ) (expectation of f w.r.t μ ) as ∑ x 1 ⋅ μ ( x ) f ( x ) (expectation of μ ⋅ f w.r.t the counting measure). Now, since Θ is homogenous, we can move constants in or out of it, to get = C ( λ z . Θ ( λ y . μ 1 ( z ) ⋅ ϕ 1 ( y , z ) ( λ x . f ( x , y , z ) ) ) ) Now, at this point, we can use that μ 1 ( z ) ⋅ ϕ 1 ( y , z ) = μ 2 ( z ) ⋅ ϕ 2 ( y , z ) , to get = C ( λ z . Θ ( λ y . μ 2 ( z ) ⋅ ϕ 2 ( y , z ) ( λ x . f ( x , y , z ) ) ) ) And just back up and reverse everything. = C ( λ z . μ 2 ( z ) Θ ( λ y . ϕ 2 ( y , z ) ( λ x . f ( x , y , z ) ) ) ) = μ 2 ( λ z . Θ ( λ y . ϕ 2 ( y ) ( λ x . f ( x , y , z ) ) ) ) = ( μ 2 ⋉ Θ ⋉ ϕ 2 ) ( λ x y z . f ( x , y , z ) ) And we're done! ■ Lemma 4: Let X , Y and Z be finite
sets, Q ⊆ Y × X a relation, Ξ 1 , Ξ 2 : Y → □ c ( X × Z ) Z -PUCKs over Q , Θ ∈ □ c Y and p ∈ [ 0 , 1 ] . Then, p Ξ 1 + ( 1 − p ) Ξ 2 is also a Z -PUCK over Q , and Θ ∗ ( p Ξ 1 + ( 1 − p ) Ξ 2 ) ⊆ p ( Θ ∗ Ξ 1 ) + ( 1 − p ) ( Θ ∗ Ξ 2 ) Our first order of business is establishing that the mix of Z-PUCK's over Q is a Z-PUCK over Q. Here's what we'll do. We'll define a family of kernels, show that they're all Z-PoCK's, and that said family makes a Z-PUCK that's equal to the mix of Ξ 1 and Ξ 2 . So, let Π 1 be the set of Z-PoCK's associated with Ξ 1 , and Π 2 be the set of Z-PoCK's associated with Ξ 2 . Elements of these sets are κ 1 and κ 2 . Define Π as { p κ 1 + ( 1 − p ) κ 2 | κ 1 ∈ Π 1 , κ 2 ∈ Π 2 } . By Definition 4.5, in order to establish that these are Z-PoCK's over Q, we need to make an appropriate choice of ϖ . In particular, the ϖ associated with κ = p κ 1 + ( 1 − p ) κ 2 is ϖ κ : = p ϖ κ 1 + ( 1 − p ) ϖ κ 2 . It fufills definition 4.5 because κ ( y ) ( x , z ) = ( p κ 1 + ( 1 − p ) κ 2 ) ( y ) ( x , z ) = p κ 1 ( y ) ( x , z ) + ( 1 − p ) κ 2 ( y ) ( x , z ) = p ( χ Q ( y ) ϖ κ 1 ) ( x , z ) + ( 1 − p ) ( χ Q ( y ) ϖ κ 2 ) ( x , z ) = ( p χ Q ( y ) ϖ κ 1 + ( 1 − p ) χ Q ( y ) ϖ κ 2 ) ( x , z ) = χ Q ( y ) ( p ϖ κ 1 + ( 1 − p ) ϖ κ 2 ) ( x , z ) = χ Q ( y ) ϖ κ ( x , z ) By unpacking our definition, using how mixes of kernels work, applying definition 4.5 for κ 1 and κ 2 , and then just doing some simple regrouping and packing the definition back up, we get our result. But wait, we still need to show that ϖ κ is a Z-Polycontribution on Q. Again, this isn't too hard to show, with Definition 4.4. ∑ z ∈ Z max y ∈ Y ∑ x ∈ Q ( y ) ϖ κ ( x , z ) = ∑ z ∈ Z max y ∈ Y ∑ x ∈ Q ( y ) ( p ϖ κ 1 + ( 1 − p ) ϖ κ 2 ) ( x , z ) = ∑ z ∈ Z max y ∈ Y ∑ x ∈ Q ( y ) ( p ϖ κ 1 ( x , z ) + ( 1 − p ) ϖ κ 2 ( x , z ) ) = ∑ z ∈ Z max y ∈ Y ⎛ ⎝ p ∑ x ∈ Q ( y ) ϖ κ 1 ( x , z ) + ( 1 − p ) ∑ x ∈ Q ( y ) ϖ κ 2 ( x , z ) ⎞ ⎠ ≤ ∑ z ∈ Z ⎛ ⎝ p max y ∈ Y ∑ x ∈ Q ( y ) ϖ κ 1 ( x , z ) + ( 1 − p ) max y ∈ Y ∑ x ∈ Q ( y ) ϖ κ 2 ( x , z ) ⎞ ⎠ = p ∑ z ∈ Z max y ∈ Y ∑ x ∈ Q ( y ) ϖ κ 1 ( x , z ) + ( 1 − p ) ∑ z ∈ Z max y ∈ Y ∑ x ∈ Q ( y ) ϖ κ 2 ( x , z ) ≤ p ⋅ 1 + ( 1 − p ) ⋅ 1 = 1 And bam, we have our inequality demonstrated, everything works out. Now we just need to show that this family of Z-PoCK's makes the Z-PUCK that's the mixture of the two. We'll establish equality by showing equality for all functions and all y . Ξ ( y ) ( f ) = max κ ∈ Π κ ( y ) ( f ) = max κ ∈ { p κ 1 + ( 1 − p ) κ 2 | κ 1 ∈ Π 1 , κ 2 ∈ Π 2 } κ ( y ) ( f ) = max κ 1 ∈ Π 1 , κ 2 ∈ Π 2 ( p κ 1 + ( 1 − p ) κ 2 ) ( y ) ( f ) = max κ 1 ∈ Π 1 , κ 2 ∈ Π 2 p κ 1 ( y ) ( f ) + ( 1 − p ) κ 2 ( y ) ( f ) = p max κ 1 ∈ Π 1 κ 1 ( y ) ( f ) + ( 1 − p ) max κ 2 ∈ Π 2 κ 2 ( y ) ( f ) = p Ξ 1 ( y ) ( f ) + ( 1 − p ) Ξ 2 ( y ) ( f ) = ( p Ξ 1 + ( 1 − p ) Ξ 2 ) ( y ) ( f ) Done, we've shown equality of the Z-PUCK with the mixture of other Z-PUCKs, establishing that the mixture of Z-PUCKs is a Z-PUCK. That leaves establishing our relevant inequality. But before we do that, we'll be wanting a nice handy form for that asterisk operator to manipulate things with. Given some κ that's a Z-PUCK over Q, remember from the previous proof that a valid choice for μ and ϕ to break κ down is μ ( z ) : = max y ′ ∈ Y ∑ x ′ ∈ Q ( y ′ ) ϖ κ ( z , x ′ ) and, abbreviating things a little bit, we have ϕ ( y , z ) ( x ) : = χ x ∈ Q ( y ) ϖ κ ( z , x ) μ ( z ) So, we can get a pleasant-to-manipulate form for Θ ∗ κ as follows. ( Θ ∗ κ ) ( λ x y z . f ( x , y , z ) ) = ( μ ⋉ Θ ⋉ ϕ ) ( λ x y z . f ( x , y , z ) ) = μ ( λ z . Θ ( λ y . ϕ ( y , z ) ( λ x . f ( x , y , z ) ) ) ) And proceed further = ∑ z ∈ Z μ ( z ) ⋅ Θ ( λ y . ϕ ( y , z ) ( λ x . f ( x , y , z ) ) ) = ∑ z ∈ Z μ ( z ) ⋅ Θ ( λ y . ∑ x ∈ X ϕ ( y , z ) ( x ) ⋅ f ( x , y , z ) ) = ∑ z ∈ Z μ ( z ) ⋅ Θ ( λ y . ∑ x ∈ X χ x ∈ Q ( y ) ϖ κ ( z , x ) μ ( z ) ⋅ f ( x , y , z ) ) And then we move the constant into Θ since it's homogenous, and then into the sum, and it cancels out with the fraction. = ∑ z ∈ Z Θ ( λ y . ∑ x ∈ X χ x ∈ Q ( y ) ⋅ ϖ κ ( z , x ) ⋅ f ( x , y , z ) ) = ∑ z ∈ Z Θ ( λ y . ∑ x ∈ Q ( y ) ϖ κ ( z , x ) ⋅ f ( x , y , z ) ) = ∑ z ∈ Z Θ ( λ y . χ Q ( y ) × { z } ϖ κ ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) This general form will be used whenever we need to unpack Θ ∗ κ . Now, let's get started on the proof of our subset inclusion thingy. As usual, Π will be the set { p κ 1 + ( 1 − p ) κ 2 | κ 1 ∈ Π 1 , κ 2 ∈ Π 2 } , and as we've shown, that's the set of Z-PoCK's associated with p Ξ 1 + ( 1 − p ) Ξ 2 . Also, as we've already shown, the associated Z-polycontribution ϖ κ for κ = p κ 1 + ( 1 − p ) κ 2 is p ϖ κ 1 + ( 1 − p ) ϖ κ 2 . This will be implicitly used in the following. ( Θ ∗ ( p Ξ 1 + ( 1 − p ) Ξ 2 ) ) ( λ x y z . f ( x , y , z ) ) = max κ ∈ Π ( Θ ∗ κ ) ( λ x y z . f ( x , y , z ) ) Now we use our preferred unpacking of how that asterisk operator works. = max κ ∈ Π ∑ z ∈ Z Θ ( λ y . χ Q ( y ) × { z } ϖ κ ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) And unpack κ and ϖ κ appropriately. = max κ 1 ∈ Π 1 , κ 2 ∈ Π 2 ∑ z ∈ Z Θ ( λ y . χ Q ( y ) × { z } ( p ϖ κ 1 + ( 1 − p ) ϖ κ 2 ) ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) = max κ 1 ∈ Π 1 , κ 2 ∈ Π 2 ∑ z ∈ Z Θ ( λ y . p χ Q ( y ) × { z } ϖ κ 1 ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) + ( 1 − p ) χ Q ( y ) × { z } ϖ κ 2 ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) At this point, we use convexity of Θ , since it's an ultradistribution. ≤ max κ 1 ∈ Π 1 , κ 2 ∈ Π 2 ∑ z ∈ Z ( p Θ ( λ y . ( χ Q ( y ) × { z } ϖ κ 1 ) ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) + ( 1 − p ) Θ ( λ y . ( χ Q ( y ) × { z } ϖ κ 2 ) ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) ) = max κ 1 ∈ Π 1 , κ 2 ∈ Π 2 ( p ∑ z ∈ Z Θ ( λ y . ( χ Q ( y ) × { z } ϖ κ 1 ) ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) + ( 1 − p ) ∑ z ∈ Z Θ ( λ y . ( χ Q ( y ) × { z } ϖ κ 2 ) ( λ x ′ z ′ . f ( x ′ , y , z ′ ) ) ) ) At this point, you can pack up things. = max κ 1 ∈ Π 1 , κ 2 ∈ Π 2 p ( Θ ∗ κ 1 ) ( λ x y z . f ( x , y , z ) ) + ( 1 − p ) ( Θ ∗ κ 2 ) ( λ x y z . f ( x , y , z ) ) = p max κ 1 ∈ Π 1 ( Θ ∗ κ 1 ) ( λ x y z . f ( x , y , z ) ) + ( 1 − p ) max κ 2 ∈ Π 2 ( Θ ∗ κ 2 ) ( λ x y z . f ( x , y , z ) ) = p ( Θ ∗ Ξ 1 ) ( λ x y z . f ( x , y , z ) ) + ( 1 − p ) ( Θ ∗ Ξ 2 ) ( λ x y z . f ( x , y , z ) ) = ( p ( Θ ∗ Ξ 1 ) + ( 1 − p ) ( Θ ∗ Ξ 2 ) ) ( λ x y z . f ( x , y , z ) ) Done! ■ Proposition 4.3: Let X , Y and Z be finite
sets, Q ⊆ Y × X a relation, κ 1 , κ 2 : Y → Δ c ( X × Z ) Z -PoCKs over Q , Θ ∈ □ c Y and p ∈ [ 0 , 1 ] . Then, p κ 1 + ( 1 − p ) κ 2 is also a Z -PoCK over Q , and Θ ∗ ( p κ 1 + ( 1 − p ) κ 2 ) ⊆ p ( Θ ∗ κ 1 ) + ( 1 − p ) ( Θ ∗ κ 2 ) Use Lemma 4, along with Z -PoCKs being a special case of Z -PUCKs. Proposition 4.4: Let X , Y and Z be finite
sets, Q ⊆ Y × X a relation and Ξ : Y → □ c ( X × Z ) a Z -PUCK over Q . Denote Θ : = ⊤ Y ∗ Ξ . Define β 0 , β 1 : Z × Y × X → 2 Z × Y by β 0 ( z , y , x ) : = { z } × Q − 1 ( x ) , \textbf{ β 1 ( z , y , x ) : = Z × Q − 1 ( x ) }.
Then ( Θ ⋉ β 0 ) ↓ ⊆ Br ( Θ ) ⊆ ( Θ ⋉ β 1 ) ↓ Proof: As usual, when establishing inequalities with downwards closures, we only have to verify the result for monotone functions. So, we may assume that f is monotone, and attempt to show that ( Θ ⋉ β 0 ) ( λ x y z α . f ( x , y , z , α ) ) ≤ Br Z × Y ( Θ ) ( λ x y z α . f ( x , y , z , α ) ) ≤ ( Θ ⋉ β 1 ) ( λ x y z α . f ( x , y , z , α ) ) Remember, bridge transforms cash out as a maximum over contributions, so to show the first inequality, we'll need to build a contribution that matches or exceeds that first term, and that lands in the bridge transform of Θ . For the second inequality, it's considerably easier, we just use our Lemma 2 to figure out what sort of sets the bridge transform is supported on, swap out the sets it's supported on for a bigger set upper bound, and bam, monotonicity of f takes over from there. From there, it's easy to show the second inequality. Let's unpack that first thing ( Θ ⋉ β 0 ) ( λ x y z α . f ( x , y , z , α ) ) = Θ ( λ x y z . δ β 0 ( x , z ) ( λ α . f ( x , y , z , α ) ) ) = Θ ( λ x y z . f ( x , y , z , β 0 ( x , z ) ) ) And at this point we unpack what Θ is. = ( ⊤ Y ∗ Ξ ) ( λ x y z . f ( x , y , z , β 0 ( x , z ) ) ) And the Ξ . = max κ ∈ Π ( ⊤ Y ∗ κ ) ( λ x y z . f ( x , y , z , β 0 ( x , z ) ) ) And then, κ can be broken down into some μ κ and ϕ κ , and that goes on both sides of ⊤ Y as our previous proposition shows. = max κ ∈ Π ( μ κ ⋉ ⊤ Y ⋉ ϕ κ ) ( λ x y z . f ( x , y , z , β 0 ( x , z ) ) ) = max κ ∈ Π μ κ ( λ z . ⊤ Y ( λ y . ϕ κ ( y , z ) ( λ x . f ( x , y , z , β 0 ( x , z ) ) ) ) ) = max κ ∈ Π μ κ ( λ z . max y ϕ κ ( y , z ) ( λ x . f ( x , y , z , β 0 ( x , z ) ) ) ) Now we can start filling in some data. There's a maximizing κ ∗ , so we can substitute that in. That gives us a canonical choice for what μ κ ∗ and ϕ κ ∗ are. Making that substitution, = μ κ ∗ ( λ z . max y ϕ κ ∗ ( y , z ) ( λ x . f ( x , y , z , β 0 ( x , z ) ) ) ) And then, let d : Z → Y be the function mapping each particular z to the y which maximizes ϕ κ ∗ ( y , z ) ( λ x . f ( x , y , z , β 0 ( x , z ) ) ) . This lets us reexpress things as = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . f ( x , d ( z ) , z , β 0 ( x , z ) ) ) ) And now, we can start unpacking things a bit. = μ κ ∗ ( λ z . δ d ( z ) ( λ y . ϕ κ ∗ ( y , z ) ( λ x . f ( x , y , z , β 0 ( x , z ) ) ) ) ) = μ κ ∗ ( λ z . δ d ( z ) ( λ y . ϕ κ ∗ ( y , z ) ( λ x . δ β 0 ( x , z ) ( λ α . f ( x , y , z , α ) ) ) ) ) And now we can write things as just a giant semidirect product. = ( μ κ ∗ ⋉ d ⋉ ϕ κ ∗ ⋉ β 0 ) ( λ x y z α . f ( x , y , z , α ) ) Now we'll show that this particular contribution lies in Br ( Θ ) . Checking the support condition, we want to check for sure that y , z ∈ α , ie, the event y , z ∉ α has measure 0. Let's begin. ( μ κ ∗ ⋉ d ⋉ ϕ κ ∗ ⋉ β 0 ) ( λ x y z α . χ y , z ∉ α ) = μ κ ∗ ( λ z . δ d ( z ) ( λ y . ϕ κ ∗ ( y , z ) ( λ x . δ β 0 ( x , z ) ( λ α . χ y , z ∉ α ) ) ) ) Substitute in the dirac-deltas. = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ d ( z ) , z ∉ β 0 ( x , z ) ) ) Unpack what β 0 ( x , z ) is. = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ d ( z ) , z ∉ Q − 1 ( x ) × { z } ) ) Now, z ∈ { z } always occurs, so that indicator function is the same as just testing whether d ( z ) ∈ Q − 1 ( x ) . = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ d ( z ) ∉ Q − 1 ( x ) ) ) Rephrasing things a little bit, = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ x ∉ Q ( d ( z ) ) ) ) Then, from proposition 4.2, we remember that λ y . ϕ κ ∗ ( y , z ) is a PoCK over Q . Ie, for any particular y , ϕ κ ∗ ( y , z ) looks like a particular measure ( ϖ κ ∗ , z ) restricted to Q ( y ) . So, in particular, ϕ κ ∗ ( d ( z ) , z ) must be supported over Q ( d ( z ) ) . Put another way, with full measure, x ∈ Q ( d ( z ) ) . So, this event failing has 0 measure. = μ κ ∗ ( λ z .0 ) = 0 And we're done with that support condition. Now to show the endofunction condition. As usual, we'll let s : Y × Z → Y × Z , and let g : X × Y × Z → [ 0 , 1 ] . Actually, for conceptual clarity, since s : Y × Z → Y × Z can be viewed as a pair of functions s Y : Y × Z → Y and s Z : Y × Z → Z , we'll be using that formulation in our equation. ( μ κ ∗ ⋉ d ⋉ ϕ κ ∗ ⋉ β 0 ) ( λ x y z α . χ s Y ( y , z ) , s Z ( y , z ) ∈ α g ( s Y ( y , z ) , s Z ( y , z ) , x ) ) = μ κ ∗ ( λ z . δ d ( z ) ( λ y . ϕ κ ∗ ( y , z ) ( λ x . δ β 0 ( x , z ) ( λ α . χ s Y ( y , z ) , s Z ( y , z ) ∈ α g ( s Y ( y , z ) , s Z ( y , z ) , x ) ) ) ) ) As usual, we'll substitute in our dirac-deltas to simplify things. = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ s Y ( d ( z ) , z ) , s Z ( d ( z ) , z ) ∈ β 0 ( x , z ) g ( s Y ( d ( z ) , z ) , s Z ( d ( z ) , z ) , x ) ) ) Substitute in what β 0 ( x , z ) is. = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ s Y ( d ( z ) , z ) , s Z ( d ( z ) , z ) ∈ Q − 1 ( x ) × { z } g ( s Y ( d ( z ) , z ) , s Z ( d ( z ) , z ) , x ) ) ) Now, if that "this pair of points lies in this set" indicator function goes off, then s Z ( d ( z ) , z ) = z . So, we can substitute that into the g term afterwards. And then get a ≤ inequality by making the indicator function less strict. = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ s Y ( d ( z ) , z ) , s Z ( d ( z ) , z ) ∈ Q − 1 ( x ) × { z } g ( s Y ( d ( z ) , z ) , z , x ) ) ) ≤ μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ s Y ( d ( z ) , z ) ∈ Q − 1 ( x ) g ( s Y ( d ( z ) , z ) , z , x ) ) ) And reexpress the indicator function a little bit = μ κ ∗ ( λ z . ϕ κ ∗ ( d ( z ) , z ) ( λ x . χ x ∈ Q ( s Y ( d ( z ) , z ) ) g ( s Y ( d ( z ) , z ) , z , x ) ) ) At this point, we can use that ϕ κ ∗ ( y , z ) is χ Q ( y ) ϖ ϕ κ ∗ , z (ie, fixing z and varying y it just looks like you're taking one measure and conditioning on various Q ( y ) ), so reexpress things as = μ κ ∗ ( λ z . ( χ Q ( d ( z ) ) ϖ ϕ κ ∗ , z ) ( λ x . χ x ∈ Q ( s Y ( d ( z ) , z ) ) g ( s Y ( d ( z ) , z ) , z , x ) ) ) And then, view the indicator function as just more conditioning. = μ κ ∗ ( λ z . ( χ Q ( d ( z ) ) ∩ Q ( s Y ( d ( z ) , z ) ) ϖ ϕ κ ∗ , z ) ( λ x . g ( s Y ( d ( z ) , z ) , z , x ) ) ) And then, relax about what you're conditioning on. ≤ μ κ ∗ ( λ z . χ Q ( s Y ( d ( z ) , z ) ) ϖ ϕ κ ∗ , z ( λ x . g ( s Y ( d ( z ) , z ) , z , x ) ) ) Rewrite it as a kernel again = μ κ ∗ ( λ z . ϕ κ ∗ ( s Y ( d ( z ) , z ) , z ) ( λ x . g ( s Y ( d ( z ) , z ) , z , x ) ) ) Pull out the dirac-delta = μ κ ∗ ( λ z . δ s Y ( d ( z ) , z ) ( λ y . ϕ κ ∗ ( y , z ) ( λ x . g ( y , z , x ) ) ) ) Throw one more inequality at it ≤ μ κ ∗ ( λ z . max y ϕ κ ∗ ( y , z ) ( λ x . g ( y , z , x ) ) ) ) Write it as top = μ κ ∗ ( λ z . ⊤ Y ( λ y . ϕ κ ∗ ( y , z ) ( λ x . g ( y , z , x ) ) ) ) Write as a semidirect product = ( μ κ ∗ ⋉ ⊤ Y ⋉ ϕ κ ∗ ) ( λ y z x . g ( y , z , x ) ) Reexpress = ( ⊤ Y ∗ κ ∗ ) ( λ y z x . g ( y , z , x ) ) ≤ max κ ∈ Π ( ⊤ Y ∗ κ ) ( λ y z x . g ( y , z , x ) ) = ( ⊤ Y ∗ Ξ ) ( λ y z x . g ( y , z , x ) ) = Θ ( λ y z x . g ( y , z , x ) ) And we're done! endofunction condition shown. Our relevant contribution is in Br ( Θ ) . Let's see, where were we... ah right, we had shown that for all monotone f , ( Θ ⋉ β 0 ) ( λ x y z α . f ( x , y , z , α ) ) = ( μ κ ∗ ⋉ d ⋉ ϕ κ ∗ ⋉ β 0 ) ( λ x y z α . f ( x , y , z , α ) ) For some choice of d and κ ∗ . We know this is in Br ( Θ ) , so we get ≤ max θ ∈ Br ( Θ ) θ ( λ y z α x . f ( x , y , z , α ) ) = Br ( Θ ) ( λ y z α x . f ( x , y , z , α ) ) And we're done! One inequality done. That just leaves showing the second inequality, where β 1 ( x ) = Z × Q − 1 ( x ) . It's actually not too bad to show. Start with Br ( Θ ) ( λ x y α z . f ( x , y , z , α ) ) = max θ ∈ Br ( Θ ) θ ( λ y z α x . f ( x , y , z , α ) ) And then, we recall our Lemma 2, that if Θ had its support entirely on x , y , z tuples where y , z in h ( x ) (for some h : X → 2 Y × Z ), then all the θ ∈ Br ( Θ ) would be supported on ( x , α ) pairs where α ⊆ h ( x ) . And then, swapping out α for h ( x ) , by monotonicity of f , produces a larger value. To invoke this argument, our choice of h will be β 1 , where β 1 ( x ) = Q − 1 ( x ) × Z . We do need to show that Θ is supported on such tuples. Θ ( λ x y z . χ y , z ∉ Q − 1 ( x ) × Z ) = Θ ( λ x y z . χ y ∉ Q − 1 ( x ) ) = Θ ( λ x y z . χ x ∉ Q ( y ) ) = ( ⊤ Y ∗ Ξ ) ( λ x y z . χ x ∉ Q ( y ) ) = max κ ∈ Π ( ⊤ Y ∗ κ ) ( λ x y z . χ x ∉ Q ( y ) ) = max κ ∈ Π ( μ κ ⋉ ⊤ Y ⋉ ϕ κ ) ( λ x y z . χ x ∉ Q ( y ) ) = max κ ∈ Π μ κ ( λ z . ⊤ Y ( λ y . ϕ κ ( y , z ) ( λ x . χ x ∉ Q ( y ) ) ) ) And then use that ϕ κ ( y , z ) = χ Q ( y ) ϖ ϕ κ , z since it's a PoCK in Q, to get = max κ ∈ Π μ κ ( λ z . ⊤ Y ( λ y . ( χ Q ( y ) ϖ ϕ κ , z ) ( λ x . χ x ∉ Q ( y ) ) ) ) Hm, we updated on a set, and are evaluating the indicator function for not being in the set. = max κ ∈ Π μ κ ( λ z . ⊤ Y ( λ y .0 ) ) = 0 Ok, so this means we can invoke Lemma 2. We were previously at = max θ ∈ Br ( Θ ) θ ( λ y z α x . f ( x , y , z , α ) ) So now we can invoke monotonicity and go ≤ max θ ∈ Br ( Θ ) θ ( λ y z α x . f ( x , y , z , β 1 ( x ) ) ) And then invoke our endofunction property for the stuff in Br ( Θ ) , letting s be the identity function (and also y , z ∈ α occurs always) to establish a uniform upper bound of ≤ Θ ( λ x y z α . f ( x , y , z , β 1 ( x ) ) ) = Θ ( λ x y z . δ β 1 ( x ) ( λ α . f ( x , y , z , α ) ) ) = ( Θ ⋉ β 1 ) ( λ x y z α . f ( x , y , z , α ) ) And we're done! Second inequality demonstrated. ■ Corollary 4.5: Suppose that for any d ∈ D , z ∈ Γ 1 and π : H → A s.t. ( d , z ) ∈ supp W ( π ) , it holds that d C z π . That is, the observations W predicts to receive from
the computer are consistent with the chosen policy and W 's beliefs
about computations. Let L : D → R be a Cartesian loss function
and π : H → A a policy. Define ~ L : D × Γ 1 → R by ~ L ( h , z ) : = L ( h ) . Then, ( pr el Γ Br ( Θ W ) ∩ C π f a i r ) ( L phys ) = W ( π ; ~ L ) To a large extent, this will follow the proof of the previous corollary. We'll use β for 2 Γ and α for just the policy component. I'm going to be proceeding very cautiously here. First off, make our π value special by swapping it out for π ∗ ( pr el Γ Br ( Θ W ) ∩ C π ∗ fair ) ( L phys ) Now, by the identifications we made earlier, we can identify Γ with A H × Γ 1 , the space of policies and computations. Using that to unpack the function a little bit, we have = ( pr el Γ Br ( Θ W ) ∩ C π ∗ fair ) ( λ π z β . L phys ( π , z , β ) ) Now, we note that intersecting with top of a particular set is equivalent to updating on the indicator function for that set. Using definition 1.5 to unpack C π ∗ fair , we get = ( pr el Γ Br ( Θ W ) ) ( λ π z β . χ ∀ h ∈ H π , z , β : G π , z ( h ) = π ∗ ( h ) L phys ( π , z , β ) ) Throughout we'll be applying that G π , z ( h ) is "what would the agent do on h if the agent is copying the behavior of π " (remember, part of the math is "what does the agent do in response to this history" and π is our term for that chunk of the math), so we'll just always rephrase things like that and won't bother to say G π , z ( h ) = π ( h ) every time we do it. = ( pr el Γ Br ( Θ W ) ) ( λ π z β . χ ∀ h ∈ H π , z , β : π ( h ) = π ∗ ( h ) L phys ( π , z , β ) ) Pull off the projection, and use d for a destiny in D . = Br ( Θ W ) ( λ π z β d . χ ∀ h ∈ H π , z , β : π ( h ) = π ∗ ( h ) L phys ( π , z , β ) ) Applying definition 3.1, and using d ′ instead of g to remember it's a destiny, we have = Br ( Θ W ) ( λ π z β d . χ ∀ h ∈ H π , z , β : π ( h ) = π ∗ ( h ) min h a : h a ∈ X π , z , β max d ′ : h a ⊑ d ′ L ( d ′ ) ) Next up is unpacking X π , z , β . Using definition 3.1, it's = Br ( Θ W ) ( λ π z β d . χ ∀ h ∈ H π , z , β : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , z , β × A ∧ ( ∀ ( π ′ , z ′ ) ∈ β : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) Now we'll show that H π , z , β only depends on p r ( β ) , ie, the projection of β from 2 A H × Γ 1 to 2 A H , and that it  gets smaller as β gets larger, so the function above is monotone.
Let's use definition 1.5 to unpack the event h ∈ H π , z , β . ( ∀ h ′ a ′ ⊏ h , ( π ′ , z ′ ) ∈ β : π ′ ( h ′ ) = a ′ ) ∧ ( ∃ d ′ : h ⊏ d ′ ∧ d ′ C z π ) It shouldn't be too hard to tell that β getting larger makes this set smaller, and that, since the z ′ doesn't matter, this condition is really the same as ( ∀ h ′ a ′ ⊏ h , π ′ ∈ p r ( β ) : π ′ ( h ′ ) = a ′ ) ∧ ( ∃ d ′ : h ⊏ d ′ ∧ d ′ C z π ) So, we'll use p r ( β ) to remind us that our function only depends on the projection of β . = Br ( Θ W ) ( λ π z β d . χ ∀ h ∈ H π , z , p r ( β ) : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , z , p r ( β ) × A ∧ ( ∀ π ′ ∈ p r ( β ) : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) And now we can pull that out as a projection! We're now using α for our set of policies, instead of β for our set of policy/computation pairs. = p r ( Br ( Θ W ) ) ( λ π z α d . χ ∀ h ∈ H π , z , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , z , α × A ∧ ( ∀ π ′ ∈ α : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) To proceed further, we're going to need to adapt our previous result which gets an upper and lower bound on the bridge transform of suitable Θ . Our first order of business is checking that α getting larger makes the function larger, which is easy to check since α getting larger cuts down on the options to minimize over (increasing value), and makes the antecedent of the implication harder to fulfill, which makes the implication as a whole easier to fulfill, so the indicator function is 1 more often. Now we can proceed further. Abstracting away a bit from our specific function, which will be swapped out for some f : A H × Γ 1 × D × 2 A H → [ 0 , 1 ] which is monotone in that last argument, we have ( Θ W ⋉ β 0 ) ↓ ( λ z π d β . f ( z , π , d , p r ( β ) ) ) = ( Θ W ⋉ β 0 ) ( λ z π d β . f ( z , π , d , p r ( β ) ) ) = Θ W ( λ z π d . f ( z , π , d , p r ( β 0 ( z , d ) ) ) ) = Θ W ( λ z π d . f ( z , π , d , p r ( { z } × Q − 1 0 ( d ) ) ) ) = Θ W ( λ z π d . f ( z , π , d , Q − 1 0 ( d ) ) ) = Θ W ( λ z π d . f ( z , π , d , p r ( Z × Q − 1 0 ( d ) ) ) ) = Θ W ( λ z π d . f ( z , π , d , p r ( β 1 ( d ) ) ) ) = ( Θ W ⋉ β 1 ) ( λ z π d β . f ( z , π , d , p r ( β ) ) ) = ( Θ W ⋉ β 1 ) ↓ ( λ z π d β . f ( z , π , d , p r ( β ) ) ) Monotonicity was used to go back and forth between the downwards closure and the raw form. β 0 and β 1 are as they were in Proposition 4.4, and Q would be the relation on A H × D telling you whether a policy is consistent with a destiny. Now, by Proposition 4.4, since the bridge transform of Θ W is sandwiched between those two values, and they're both equal, we have p r ( Br ( Θ W ) ) ( λ z π d α . f ( z , π , d , α ) ) = Br ( Θ W ) ( λ z π d β . f ( z , π , d , p r ( β ) ) ) = Θ W ( λ z π d . f ( z , π , d , Q − 1 0 ( d ) ) ) = ( Θ W ⋉ Q − 1 0 ) ( λ z π d α . f ( z , π , d , α ) ) The first equality was just relocating the projection. the second equality was from the bridge transform being sandwiched between two equal quantities, so it equals all the stuff on our previous big list of equalities (we went with the middle one). Then just express as a semidirect product, and you're done. Applying this to our previous point of = p r ( Br ( Θ W ) ) ( λ π z α d . χ ∀ h ∈ H π , z , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , z , α × A ∧ ( ∀ π ′ ∈ α : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) We can reexpress it as = ( Θ W ⋉ Q − 1 0 ) ( λ π z α d . χ ∀ h ∈ H π , z , α : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , z , α × A ∧ ( ∀ π ′ ∈ α : π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) And start unpacking the semidirect product = Θ W ( λ π z d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) min h a : h a ∈ H π , z , Q − 1 0 ( d ) × A ∧ ( ∀ π ′ : d Q 0 π ′ → π ′ ( h ) = a ) max d ′ : h a ⊑ d ′ L ( d ′ ) ) Now, we're going to try to address that minimum, and show that the only h a that fulfill the conditions are exactly those h a ⊑ d . This requires showing that h a ⊑ d is a sufficient condition to fulfill the relevant properties, and then to show that h a ⋢ d implies a failure of one of the properties. The proof for this is almost entirely identical to the corresponding proof in the non-turing-law case, there are no substantive differences besides one issue to clear up. We need to show that W ( π ) always being supported on the relation C , for all π (as one of our starting assumptions) implies that Θ W is supported on C as well. Here's how we do it. We have Θ W = ⊤ A H ∗ W . And then this ultracontribution (by the definition of Γ 1 -PUCK's) can be written as the convex hull of the union of a bunch of ultracontributions of the form ⊤ A H ∗ w , where w is a Γ 1 -PoCK. So, if we can show all of these are supported on the relation C , then the same holds for the convex hull of their union, ie, Θ W . By Proposition 4.2, we can reexpress this ultracontribution as μ w ⋉ ⊤ A H ⋉ ϕ w , where w ( π ) = μ w ⋉ ( λ z . ϕ w ( z , π ) ) , for any policy π . Now, let's check the expectation value of the indicator function for C being violated. ( μ w ⋉ ⊤ A H ⋉ ϕ w ) ( λ z π d . χ ¬ d C z π ) = μ w ( λ z . ⊤ A H ( λ π . ϕ w ( z , π ) ( λ d . χ ¬ d C z π ) ) ) = μ w ( λ z . max π ϕ w ( z , π ) ( λ d . χ ¬ d C z π ) ) Let's assume that the expectation of that indicator function is \emph{not} zero. Then there must be some particular z in the support of μ w where it is nonzero, and some particular π ∗ that attains that nonzero expectation value. So, there's a z in the support of μ w and π ∗ s.t. ϕ w ( z , π ∗ ) ( λ d . χ ¬ d C z π ∗ ) > 0 and so this means that we have μ w ( λ z . ϕ w ( z , π ∗ ) ( λ d . χ ¬ d C z π ∗ ) ) > 0 Because that z is assigned nonzero measure, and then this reshuffles to ( μ w ⋉ ( λ z . ϕ w ( z , π ∗ ) ) ) ( λ d . χ ¬ d C z π ∗ ) > 0 Which, via Proposition 4.2, is w ( π ∗ ) ( λ z d . χ ¬ d C z π ∗ ) > 0 But this contradicts that W ( π ∗ ) (and so all the w ( π ∗ ) ) were supported on the event d C z π ∗ , so we have a contradiction, and our result follows. Now that that issue is taken care of, we can swap out our fancy minimization with just minimizing over the h a ⊑ d . = Θ W ( λ π z d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) min h a : h a ⊑ d max d ′ : h a ⊑ d ′ L ( d ′ ) ) This minimization is attained by selecting d itself. So then it turns into = Θ W ( λ π z d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) At this point, we'll upper-and-lower-bound this quantity by W ( π ∗ ) ( λ z d . L ( d ) ) . Let's begin. W ( π ∗ ) ( λ z d . L ( d ) ) = max w ∈ Π w ( π ∗ ) ( λ z d . L ( d ) ) = max w ∈ Π μ w ( λ z . ϕ w ( π ∗ , z ) ( λ d . L ( d ) ) ) Here we're using Proposition 4.2 on being able to split up Z-PoCK's (which W is) a certain way. = max w ∈ Π μ w ( λ z . max π ϕ w ( π ∗ , z ) ( λ d . χ d Q 0 π L ( d ) ) ) This equality happens because you can always just pick π ∗ as your choice of π , and since ϕ w ( π ∗ , z ) can only produce destinies consistent with π ∗ . Now, we can swap out ϕ w for the measure we're conditioning on an event = max w ∈ Π μ w ( λ z . max π ( χ Q ( π ∗ ) ϖ ϕ w , z ) ( λ d . χ d Q 0 π L ( d ) ) ) = max w ∈ Π μ w ( λ z . max π ϖ ϕ w , z ( λ d . χ d Q 0 π ∗ χ d Q 0 π L ( d ) ) ) Reshuffle the indicator function back in = max w ∈ Π μ w ( λ z . max π ( χ Q ( π ) ϖ ϕ w , z ) ( λ d . χ d Q 0 π ∗ L ( d ) ) ) = max w ∈ Π μ w ( λ z . max π ϕ w ( π , z ) ( λ d . χ d Q 0 π ∗ L ( d ) ) ) = max w ∈ Π μ w ( λ z . ⊤ A H ( λ π . ϕ w ( π , z ) ( λ d . χ d Q 0 π ∗ L ( d ) ) ) ) = max w ∈ Π ( μ w ⋉ ⊤ A H ⋉ ϕ w ) ( λ π z d . χ d Q 0 π ∗ L ( d ) ) ) ) = max w ∈ Π ( ⊤ A H ∗ w ) ( λ π z d . χ d Q 0 π ∗ L ( d ) ) ) ) = ( ⊤ A H ∗ W ) ( λ π z d . χ d Q 0 π ∗ L ( d ) ) ) ) = Θ W ( λ π z d . χ d Q 0 π ∗ L ( d ) ) ) ) Now we must show that this is a looser constraint than what was previously in our indicator function to proceed further. So our next order of business is showing that, certainly, ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) → d Q 0 π ∗ Let d be an arbitrary destiny in the support of Θ W , and h be one of the history prefixes of d . The two conditions for h ∈ H π , z , Q − 1 0 ( d ) are fulfilled, because they are ∀ h ′ , a ′ , π ′ : h ′ a ′ ⊏ h ∧ d Q 0 π ′ → π ′ ( h ′ ) = a ′ ∃ d ′ : h ⊏ d ′ ∧ d ′ C π z For the first condition, if h ′ a ⊏ h , then h ′ a ′ ⊏ d , and so if π ′ is consistent with d , it must take the same action in response to h ′ , the action that d commands. So it is fulfilled. For the second condition, let d ′ be d . h ⊏ d holds, and d C π z holds certainly, because Θ W is supported on C , as we've previously shown. So, certainly, h ⊏ d → h ∈ H π , z , Q − 1 0 ( d ) . Since we assumed our forall statement as prerequisite, this means that for all h ⊏ d , π ( h ) = π ∗ ( h ) . And d Q 0 π means ∀ h a ⊑ d : π ( h ) = a . Since π ∗ ( h ) mimics π ( h ) for all history prefixes of d , this means ∀ h a ⊑ d : π ∗ ( h ) = a , ie d Q 0 π ∗ . So, since this is a looser constraint, when we were previously at = Θ W ( λ π z d . χ d Q 0 π ∗ L ( d ) ) ) ) we can proceed further to ≥ Θ W ( λ π z d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) which is the value we wanted to sandwich. Proceed further with = ( ⊤ A H ∗ W ) ( λ π z d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) = max w ∈ Π ( ⊤ A H ∗ w ) ( λ π z d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) = max w ∈ Π ( μ w ⋉ ⊤ A H ⋉ ϕ w ) ( λ π z d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) = max w ∈ Π μ w ( λ z . ⊤ A H ( λ π . ϕ w ( π , z ) ( λ d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) ) ) = max w ∈ Π μ w ( λ z . max π ϕ w ( π , z ) ( λ d . χ ∀ h ∈ H π , z , Q − 1 0 ( d ) : π ( h ) = π ∗ ( h ) L ( d ) ) ) ≥ max w ∈ Π μ w ( λ z . ϕ w ( π ∗ , z ) ( λ d . χ ∀ h ∈ H π ∗ , z , Q − 1 0 ( d ) : π ∗ ( h ) = π ∗ ( h ) L ( d ) ) ) = max w ∈ Π μ w ( λ z . ϕ w ( π ∗ , z ) ( λ d . L ( d ) ) ) = max w ∈ Π ( μ w ⋉ ( λ z . ϕ w ( π ∗ , z ) ) ) ( λ z d . L ( d ) ) ) = max w ∈ Π w ( π ∗ ) ( λ z d . L ( d ) ) ) = W ( π ∗ ) ( λ z d . L ( d ) ) ) And we've got the same upper and lower bound, so our overall quantity is W ( π ∗ ) ( ~ L ) And we're done. ■