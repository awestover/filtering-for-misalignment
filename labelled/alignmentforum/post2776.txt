This is the twelfth and final post in the Cartesian Frames sequence. Read the first post here . Up until now, we have (in the examples) mostly considered agents making a single choice, rather than acting repeatedly over time. The actions, environments, and worlds we've considered might be extended over time. For example, imagine a prisoner's dilemma where "cooperating" requires pushing a button every day for five years. However, our way of discussing Cartesian frames so far would treat "push the button every day for five years" as an atomic action, a single element a ∈ A . Now, will begin discussing how to use Cartesian frames to explicitly represent agents passing through time. Let us start with a basic example. 1. Partial Observability Consider a process where two players, Yosef and Zoe, collaboratively choose a three-digit binary number. Yosef first chooses the first digit, then Zoe chooses the second digit, then Yosef chooses the third digit. The world will be represented by the three-digit number. The Cartesian frame from the perspective of Yosef looks like this: C 0 = ⎛ ⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜ ⎝ 000 010 000 010 001 011 001 011 000 011 000 011 001 010 001 010 100 110 110 100 101 111 111 101 100 111 111 100 101 110 110 101 ⎞ ⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟ ⎠ . Here, C 0 = ( A 0 , E 0 , ⋅ 0 ) is a Cartesian frame over W 0 = { 000 , 001 , 010 , 011 , 100 , 101 , 110 , 111 } . The four possible environments from left to right represent Zoe choosing 0, Zoe choosing 1, Zoe copying the first digit, and Zoe negating the first digit. The eight possible agents can be broken up into two groups of four. In the top four possible agents, Yosef chooses 0 for the first digit, while in the bottom four, he chooses 1. Within each group, the four possible agents represent Yosef choosing 0 for the third digit, choosing 1 for the third digit, copying the second digit, and negating the second digit. Consider the three partitions W 1 , W 2 , and W 3 of W 0 representing the first, second and third digits respectively. W i = { w 0 i , w 1 i } , where w 0 1 = { 000 , 001 , 010 , 011 } , w 1 1 = { 100 , 101 , 110 , 111 } , w 0 2 = { 000 , 001 , 100 , 101 } , w 1 2 = { 010 , 011 , 110 , 111 } , w 0 3 = { 000 , 010 , 100 , 110 } , and w 1 3 = { 001 , 011 , 101 , 111 } . Clearly, by the definition of observables , W 2 is not observable in C 0 . But there is still a sense in which this does not tell the whole story. Yosef can observe W 2 for the purpose of deciding the third digit, but can't observe W 2 for the purpose of deciding the first digit. There are actually many ways to express this fact, but I want to draw attention to one specific way to express this partial observability: External W 1 ( C 0 ) can observe W 2 . Indeed, we have External W 1 ( C 0 ) ≃ C 1 = ⎛ ⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜ ⎝ 000 010 100 110 000 010 100 111 000 010 101 110 000 010 101 111 000 011 100 110 000 011 100 111 000 011 101 110 000 011 101 111 001 010 100 110 001 010 100 111 001 010 101 110 001 010 101 111 001 011 100 110 001 011 100 111 001 011 101 110 001 011 101 111 ⎞ ⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟ ⎠ . It may seem counter-intuitive that when you externalize W 1 , and thus take some control out of the hands of the agent, you actually end up with more possible agents. This is because the agent now has to specify what the third digit is, not only as a function of the second digit, but also as a function of the first digit. The agent could have specified the third digit as a function of the first digit before, but some of the policies would have been identical to each other. The four possible environments of C 1 specify the first two digits, while the 16 possible agents represent all of the ways to have the third digit be a function of those first two digits. It is clear that W 2 is observable in C 1 . This gives us a generic way to define a type of partial observability: Definition: Given a Cartesian frame C over W , and partitions V and T of W , we say V is observable in C after time T if V is observable in External T ( C ) . 2. Partitions as Time Built into the above definition is the fact that we are thinking of (at least some) partitions of W as representing time. This makes a lot of sense when we think of W as a set of possible complete world histories. For any given time, this gives a partition where world histories are in the same subset if they agree on the world history up to that point in time. For example, the above partition W 1 was the partition that we got by considering a time after Yosef chooses the first digit, but before Zoe chooses the second digit. Further, this gives us a sequence of nested partitions, since the partition associated with one time is always a refinement of the partition associated with an earlier time. Note that this is a multiplicative/updateless view of time. There is also an additive/updateful view of time, in which time is a nested sequence of subsets. In the additive view, possible worlds are eliminated as you pass through time. In the multiplicative view, possible worlds are distinguished from each other as you pass through time. We will focus on the multiplicative view, which I consider better-motivated. 3. Nested Subagents Let C = ( A , E , ⋅ ) be a fixed Cartesian frame over a world W . Let T 0 , ⋯ , T n be a sequence of nested partitions of W , with T 0 = { W } , T n = { { w } | w ∈ W } , and T i + 1 a refinement of T i . This gives a nested sequence of multiplicative superagents C T n ◃ × ⋯ ◃ × C T 0 , where C T i = External T i ( C ) , which follows from the lemma below. Lemma: Given a Cartesian frame C over W , if U and V are partitions of W and U is a refinement of V , then External U ( C ) ◃ × External V ( C ) . Proof: Let C = ( A , E , ⋅ ) , and let u : W → U and v : W → V send each element of W to their part in U and V respectively. Let External U ( C ) = ( A / B U , B U × E , ⋅ U ) , where B U = { { a ′ ∈ A | ∀ e ∈ E , u ( a ′ ⋅ e ) = u ( a ⋅ e ) } | a ∈ A } . Similarly, let External V ( C ) = ( A / B V , B V × E , ⋅ V ) , where B V = { { a ′ ∈ A | ∀ e ∈ E , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A } . Let b U : A → B U and b V : A → B V send each element of A to its part in B U and B V respectively. Since U is a refinement of V , there exists a v ′ : U → V , such that v ′ ∘ u = v . Further, we have that B U is a refinement of B V , so there exists a b ′ V : B U → B V such that b ′ V ∘ b U = b V . It suffices to show there exist three sets X , Y , and Z , and a function f : X × Y × Z → W such that External U ( C ) ≃ ( X , Y × Z , ⋄ ) and External V ( C ) ≃ ( X × Y , Z , ∙ ) , where ⋄ and ∙ are given by x ⋄ ( y , z ) = f ( x , y , z ) and ( x , y ) ∙ z = f ( x , y , z ) . We will take X to be A / B U and Z to be B V × E . We define Y to be the set of all right inverses to b ′ V , Y = { y : B V → B U | ∀ b ∈ B U , b ′ V ( y ( b ) ) = b } . We will let f ( x , y , ( b , e ) ) = x ( y ( b ) ) ⋅ e . First, we show External U ( C ) = ( A / B U , B U × E , ⋅ U ) ≃ ( X , Y × Z , ⋄ ) . We define ( g 0 , h 0 ) : ( A / B U , B U × E , ⋅ U ) → ( X , Y × Z , ⋄ ) and ( g 1 , h 1 ) : ( X , Y × Z , ⋄ ) → ( A / B U , B U × E , ⋅ U ) as follows. Let g 0 and g 1 be the identity on X = A / B U , and let h 0 : Y × Z → B U × E be given by h 0 ( y , ( b , e ) ) = ( y ( b ) , e ) . Finally, let h 1 : B U × E → Y × Z be chosen to satisfy h 1 ( b , e ) = ( y , ( b ′ V ( b ) , e ) ) , where y is such that y ( b ′ V ( b ) ) = b , and for b ′ ≠ b ′ V ( b ) , y ( b ′ ) is chosen arbitrarily to be any preimage of b ′ under b ′ V . We have that ( g 0 , h 0 ) is a morphism, because for all x ∈ A / B U and ( y , ( b , e ) ) ∈ Y × Z , g 0 ( x ) ⋄ ( y , ( b , e ) ) = f ( x , y , ( b , e ) ) = x ( y ( b ) ) ⋅ e = x ⋅ U ( y ( b ) , e ) = x ⋅ U h 0 ( y , ( b , e ) ) . Similarly, ( g 1 , h 1 ) is a morphism, because for all x ∈ X and ( b , e ) ∈ B U × E , we have g 1 ( x ) ⋅ U ( b , e ) = x ⋅ U ( b , e ) = x ( b ) ⋅ e = x ( y ( b ′ V ( b ) ) ) ⋅ e = f ( x , y , ( b ′ V ( b ) , e ) ) = x ⋄ ( y , ( b ′ V ( b ) , e ) ) = x ⋄ h 1 ( b , e ) , where y is as given in the definition of h 1 . Since g 0 ∘ g 1 and g 1 ∘ g 0 are both the identity, we have that ( g 0 , h 0 ) ∘ ( g 1 , h 1 ) and ( g 1 , h 1 ) ∘ ( g 0 , h 0 ) are both homotopic to the identity, so External U ( C ) ≃ ( X , Y × Z , ⋄ ) . Next, we show External V ( C ) = ( A / B V , B V × E , ⋅ V ) ≃ ( X × Y , Z , ∙ ) . We define ( g 2 , h 2 ) : ( A / B V , B V × E , ⋅ V ) → ( X × Y , Z , ∙ ) and ( g 3 , h 3 ) : ( X × Y , Z , ∙ ) → ( A / B V , B V × E , ⋅ V ) as follows. Let h 2 and h 3 be the identity on Z = B V × E , and let g 3 : X × Y → A / B V be given by g 3 ( x , y ) = x ∘ y . To see that x ∘ y is in A / B V , we need to verify that b V ∘ x ∘ y is the identity on B V . Indeed, b V ∘ x ∘ y = b ′ V ∘ b U ∘ x ∘ y = b ′ V ∘ y , which is the identity on B V . Let g 2 : A / B V → X × Y be given by g 2 ( q ) = ( q ′ , b U ∘ q ) , where q ′ ∈ A / B U is chosen such that for all b ∈ B V , q ′ ( b U ( q ( b ) ) ) = q ( b ) , and for b ′ not in the image of b U ∘ q , q ′ ( b ′ ) ∈ b ′ . We can do this simultaneously for all inputs of the form b U ( q ( b ) ) , since b U ∘ q is injective, since it has a left inverse, b ′ V . We have that ( g 2 , h 2 ) is a morphism, because for all q ∈ A / B V and ( b , e ) ∈ Z , we have g 2 ( q ) ∙ ( b , e ) = ( q ′ , b U ∘ q ) ∙ ( b , e ) = f ( q ′ , b U ∘ q , ( b , e ) ) = q ′ ( b U ( q ( b ) ) ) ⋅ e = q ( b ) ⋅ e = q ⋅ V ( b , e ) = h 2 ( q ) ⋅ V ( b , e ) , where q ′ is as in the definition of g 2 . Similarly, ( g 3 , h 3 ) is a morphism, because for all ( x , y ) ∈ X × Y and ( b , e ) ∈ B V × E , we have g 3 ( x , y ) ⋅ V ( b , e ) = x ∘ y ⋅ V ( b , e ) = x ( y ( b ) ) ⋅ e = f ( x , y , ( b , e ) ) = ( x , y ) ∙ ( b , e ) = ( x , y ) ∙ h 3 ( b , e ) . Since h 3 ∘ h 2 and h 2 ∘ h 3 are both the identity, we have that ( g 2 , h 2 ) ∘ ( g 3 , h 3 ) and ( g 3 , h 3 ) ∘ ( g 2 , h 2 ) are both homotopic to the identity, so External V ( C ) ≃ ( X × Y , Z , ∙ ) , completing the proof. □ The sequence C T 0 , … , C T n represents the agent persisting across time, but each subagent C T i does not really represent a single time-slice of the agent. Instead, C T i represents an agent persisting across time starting at the time T i . I think that this is actually the more natural notion. However, if we want to think about an agent persisting across times as a sequence of single times-slices of the agent, we could also do that. Since C T i + 1 is a multiplicative subagent of C T i , C T i + 1 must have a sister D T i + 1 in C T i , so we could consider the sequence D T 1 , … , D T n . 4. Controllables Decrease and Observables Increase Over Time An interesting fact about these sequences C T 0 , … , C T n is that controllables decrease and observables increase over time, so for i ≤ j we have Obs ( C T i ) ⊆ Obs ( C T j ) and Ctrl ( C T i ) ⊇ Ctrl ( C T j ) (and Ensure ( C T i ) ⊇ Ensure ( C T j ) and Prevent ( C T i ) ⊇ Prevent ( C T j ) ), which follows directly from the following two lemmas. Lemma: Given a Cartesian frame C over W , if U and V are partitions of W and U is a refinement of V , then Ctrl ( External V ( C ) ) ⊇ Ctrl ( External U ( C ) ) . Proof: Let C V = External V ( C ) , and let C U = External V ( C ) . We will actually only need to use the fact that C U ◃ × C V , and that both C U and C V have nonempty agents. C U and C V do in fact have nonempty agent, because, as we have shown, externalizing a partition of W always produces nonempty agents. It suffices to establish that Ensure ( C T i ) ⊇ Ensure ( C T j ) , and the result for Ctrl follows trivially. Since C U ◃ × C V , there exist X , Y , Z , and f : X × Y × Z → W such that C U ≃ ( X , Y × Z , ⋄ ) and C V ≃ ( X × Y , Z , ∙ ) , where ⋄ and ∙ are given by x ⋄ ( y , z ) = f ( x , y , z ) and ( x , y ) ∙ z = f ( x , y , z ) . Let C ′ U = ( X , Y × Z , ⋄ ) , and let C ′ V ≃ ( X × Y , Z , ∙ ) . Observe that X and Y are nonempty. Since Ensure is preserved by biextensional equivalence, it suffices to show that Ensure ( C ′ V ) ⊇ Ensure ( C ′ U ) . Let S ∈ Ensure ( C ′ U ) . Thus, there exists some x 0 ∈ X , such that for all ( y , z ) ∈ Y × Z , x 0 ⋄ ( y , z ) = f ( x 0 , y , z ) ∈ S . Since Y is nonempty, we can take an arbitrary y 0 ∈ Y , and observe that for all z ∈ S , ( x 0 , y 0 ) ∙ z = f ( x 0 , y 0 , z ) ∈ S . Thus, S ∈ Ensure ( C ′ V ) . □ Lemma: Given a Cartesian frame C over W , if U and V are partitions of W and U is a refinement of V , then Obs ( External V ( C ) ) ⊆ Obs ( External U ( C ) ) . Proof: Let C = ( A , E , ⋅ ) , and let u : W → U and v : W → V send each element of W to their part in U and V respectively. Let External U ( C ) = ( A / B U , B U × E , ⋅ U ) , where B U = { { a ′ ∈ A | ∀ e ∈ E , u ( a ′ ⋅ e ) = u ( a ⋅ e ) } | a ∈ A } . Similarly, let External U ( C ) = ( A / B V , B V × E , ⋅ V ) , where B V = { { a ′ ∈ A | ∀ e ∈ E , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A } . Let b U : A → B U and b V : A → B V send each element of A to its part in B U and B V respectively. Since U is a refinement of V , there exists a v ′ : U → V , such that v ′ ∘ u = v . Further, we have that B U is a refinement of B V , so there exists a b ′ V : B U → B V such that b ′ V ∘ b U = b V . Let S ∈ Obs ( External V ( C ) ) . Thus, for every pair q 0 , q 1 ∈ A / B V , there exists a q 2 ∈ A / B V such that q 2 ∈ if ( S , q 0 , q 1 ) . Thus, we can define an f : A / B V × A / B V → A / B V such that for all q 0 , q 1 ∈ A / B V , f ( q 0 , q 1 ) ∈ if ( S , q 0 , q 1 ) . Our goal is to show that S ∈ Obs ( External U ( C ) ) . For this, it suffices to show that for any q 0 , q 1 ∈ A / B U , there exists a q 2 ∈ A / B U such that q 2 ∈ if ( S , q 0 , q 1 ) . Let q 0 , q 1 ∈ A / B U be arbitrary. Given an arbitrary b ∈ B U , let q b i ∈ A / B V be any element that satisfies q b i ( b ′ V ( b ) ) = q i ( b ) . This is possible because q i ( b ) ∈ b ⊆ b ′ V ( b ) . It does not matter what q b i does on other inputs. Let q 2 : B U → A be such that for all b ∈ B U , q 2 ( b ) = f ( q b 0 , q b 1 ) ( b ′ V ( b ) ) . To complete the proof, we need to show that q 2 ∈ A / B U and q 2 ∈ if ( S , q 0 , q 1 ) . To show that q 2 ∈ A / B U , we need that for all b ∈ B U , q 2 ( b ) ∈ b . Let b ∈ B U be arbitrary. Since q 0 ( b ) ∈ b , by the definition of B U , it suffices to show that for all e ∈ E , u ( q 2 ( b ) ⋅ e ) = u ( q 0 ( b ) ⋅ e ) . Further, since q 1 ( b ) ∈ b , we already have that for all e ∈ E , u ( q 1 ( b ) ⋅ e ) = u ( q 0 ( b ) ⋅ e ) . Thus, it suffices to show that for all e ∈ E , either q 2 ( b ) ⋅ e = q 0 ( b ) ⋅ e or q 2 ( b ) ⋅ e = q 1 ( b ) ⋅ e . Indeed, if q 2 ( b ) ⋅ e ∈ S , then q 2 ( b ) ⋅ e = f ( q b 0 , q b 1 ) ( b ′ V ( b ) ) ⋅ e = q b 0 ( b ′ V ( b ) ) ⋅ e = q 0 ( b ) ⋅ e , and similarly, if q 2 ( b ) ⋅ e ∉ S , then q 2 ( b ) ⋅ e = q 1 ( b ) ⋅ e . Thus, we have that for all e ∈ E , u ( q 2 ( b ) ⋅ e ) = u ( q 0 ( b ) ⋅ e ) , so for our arbitrary b ∈ B U , q 0 ( b ) ∈ b , so q 2 ∈ A / B U . Let ( b , e ) ∈ B U × E be such that q 2 ⋅ U ( b , e ) ∈ S . We want to show that q 2 ⋅ U ( b , e ) = q 0 ⋅ U ( b , e ) . Indeed, q 2 ⋅ U ( b , e ) = q 2 ( b ) ⋅ e = f ( q b 0 , q b 1 ) ( b ′ V ( b ) ) ⋅ e = f ( q b 0 , q b 1 ) ⋅ V ( b ′ V ( b ) , e ) = q b 0 ⋅ V ( b ′ V ( b ) , e ) = q b 0 ( b ′ V ( b ) ) ⋅ e = q 0 ( b ) ⋅ e = q 0 ⋅ U ( b , e ) . Symmetrically, if ( b , e ) ∈ B U × E is such that q 2 ⋅ U ( b , e ) ∉ S , we have q 2 ⋅ U ( b , e ) = q 1 ⋅ U ( b , e ) . Thus q 2 ∈ if ( S , q 0 , q 1 ) . Thus, since q 0 and q 1 were arbitrary, we have that S ∈ Obs ( External U ( C ) ) , completing the proof. □ This result allows us to think of time as a sort of ritual in which control of the world is sacrificed in exchange for ability to condition on the world. 5. Directions for Future Work As I noted at the start of this sequence , Cartesian frames take their motivation from Hutter, attempting to improve on the cybernetic agent model; they take their angle of attack from Pearl, using combinatorics to infer functional structure from relational structure; and they take their structure from game theory, working with base objects that look similar to normal-form games. Building up from very simple foundations, we have found that Cartesian frames yield elegant notions of agents making choices and observations, of agents acting over time, and of subagent relations. At the same time, Cartesian frames allow us to switch between different levels of description of the world and consider many different ways of factorizing the world into variables. I suspect that this is the last post I will write on Cartesian frames for a while, but I am excited about the framework, and would really like to get more people working on it. To help with that, I've commented below with various directions for future work: ways that I think the framework could be extended, made better, or applied. frames that are partitions into rectangles generalizing observability preferences and goals subagents logical time logical uncertainty formalizing time computational complexity time and coarse world models category-theory-first approaches I've erred on the side of inclusion in these comments: some may point to dead ends, or may be based on false assumptions. If you have questions or want to discuss Cartesian frames, I'll be hosting a fourth and final office hours / discussion section this Sunday at 2pm PT on GatherTown .