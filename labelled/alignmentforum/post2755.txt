Here are the previous two posts. Now, what about updates? We'll use u g h (and suppress the π ¬ h that should be there) as shorthand for the function that maps ( m , b ) over Θ ( π ¬ h ∙ π p a ) to ( c ( m | h ) , b + m ( 0 ★ h g ) ) in M a ( F ( π p a ) ) (or the nirvana-free or sur variant of this), and also use u g h as a function from belief functions to belief functions (just map all the sets through) Lemma 27: When updating, the closure adds no nirvana-free points that weren't present originally if Nonemptiness, Nirvana-free upper-completion and closure holds originally (works in the sur-case too) Proof sketch: We take a sequence M n limiting to M , and then take a preimage point of M n , go to a minimal below it, find a limit point in our original set by Compactness, and map it back through the update, getting a point below M . Then, we find what we need to add to that to get M , and find something above our limit point that maps to M , so we didn't actually need closure anyways because we made M as an image of a nirvana-free point present in the original set. Proof: Fix a sequence M n in u g h ( Θ ) ( π p a ) (but without the defining closure part in the end) that limit to M which is nirvana-free. Every M n has a preimage point M ′ n ∈ Θ ( π ¬ h ∙ π p a ) with no nirvana off-h. For each M ′ n , find a minimal point M ′ l o n below it, which have a λ ⊙ + b ⊙ bound by bounded-minimals, so we can find a convergent subsequence limiting to M ′ l o (actually, might not be minimal, still a limit of minimal points, though). Shoving the M ′ l o n (and the limit point) back through the update (which is a continuous function), we get a sequence M l o n limiting to M l o (the thing you get from pushing M ′ l o through the update). Since M ′ n lies above M ′ l o n (upper-completion ordering), then updating preserves that property, because the update function is linear. Thus, all the M l o n lie below their corresponding M n . Now, we can invoke Lemma 16 to conclude that M l o lies below M . It lies below a nirvana-free point, so M ′ l o is nirvana-free as well. Now, we just need to show nirvana-free upper-completion because M = M l o + M ∗ . We can take M ′ l o and add on ( m ∗ , b ∗ ) (extend the measure back to the original domain by sticking an h prefix on everything, and saying that the measure is 0 everywhere else), making an a-measure that's in Θ ( π ¬ h ∙ π p a ) , by nirvana-free uppper-completion there. By linearity, and the update not affecting ( m ∗ , b ∗ ) (it's 0 outside of h so the g outside of h doesn't get to contribute anything to the b term when we update), updating M ′ l o + ( m ∗ , b ∗ ) makes M l o + M ∗ = M . So, if a nirvana-free point appears post-update (with closure), then it'll appear post-update (without closure). Lemma 28: raw-update-then-project equals project-then-raw-update. Take some ( m , b ) . We want to show that: p r π h i p a , π l o p a ∗ ( c ( m | h ) , b + m ( 0 ★ h g ) ) = ( c ( p r ( π ¬ h ∙ π h i p a ) , ( π ¬ h ∙ π l o p a ) ∗ ( m ) | h ) , b + ( p r ( π ¬ h ∙ π h i p a ) , ( π ¬ h ∙ π l o p a ) ∗ ( m ) ) ( 0 ★ h g ) ) First, ( p r ( π ¬ h ∙ π h i p a ) , ( π ¬ h ∙ π l o p a ) ∗ ( m ) ) ( 0 ★ h g ) = m ( 0 ★ h g ) This is because the projection down doesn't change the measure at all outside of h, and we're evaluating a function that's 0 inside h. So, that takes care of the b term. Also, projection preserves the b term, so our desired equality is: ( p r π h i p a , π l o p a ∗ ( c ( m | h ) ) , b + m ( 0 ★ h g ) ) = ( c ( p r ( π ¬ h ∙ π h i p a ) , ( π ¬ h ∙ π l o p a ) ∗ ( m ) | h ) , b + m ( 0 ★ h g ) ) For the measure term, the first is "restrict to on-h histories, clip off the h prefixes, and project down", and the second is "project down the on-h histories accordingly, then restrict to on-h histories and clip off the h prefix", which are obviously equal. Proposition 9: For causal, surcausal, pseudocausal and acausal hypotheses, updating them produces a causal, surcausal, pseudocausal or acausal hypothesis as long as renormalization doesn't fail. Proof sketch: What we can do is consider the "raw update", show that it preserves all nice properties except for renormalization, and then show that the renormalization terms in the update are the proper renormalization terms to use. Thus, we'll define our raw update u g h ( Θ ) via: u g h ( Θ ) ( π p a ) is: Θ ( π ¬ h ∙ π p a ) ∩ N F off h , mapped through the following function: ( m , b ) ↦ ( c ( m | h ) , b + m ( 0 ★ h g ) ) And then you take the closure of the resulting set at the end. So, we take our partial policy π p a and glue it to the off-h-partial policy π ¬ h , go to that part of the original belief function, strip off everything that has nirvana off-h (for Murphy shall not select those, and properly, that should make the b term infinite post-update), slice off the part of the measure off-h, strip off the h prefix from those histories, and go "ok, our utility function is g , let's take the expected utility off-h and fold it into the b term" If we can get all nice properties but renormalization, we're good, just appeal to Lemma 24. As for showing the conditions: We're in for something almost as bad as one of the directions of the Isomorphism theorem. Nonemptiness, closure, and convexity are trivial, upper completion, pseudocausality, and bounded-minimals are easy and the extreme point condition and causality are moderately tricky. For the extreme point condition, Step 1 is establishing that u f h ( Θ ) ( π p a ) ∩ N F equals the closed convex hull of nirvana-free projections from above by an argument that makes sense when you sketch it out but may be difficult if you don't have it sketched out, step 2 is using Hausdorff-continuity and Lemma 20 to turn it into an ordinary convex hull, and finally, arguing that a nirvana-free exteme point must have come from a nirvana-free point from above via step 2. For causality, we can (for the most part) just go back to Θ , get an outcome function there, and map it back through the update to get an outcome function, the hard part is netting the limit points, which requires a limit of outcome functions. But because we want a countable product of sets to get sequential compactness from Tychonoff, we have to work with stubs, which adds some extra complexity. Hausdorff-continuity is just hellishly hard, we need to show that the preimages of the sets post-update are the updates of the preimages of sets pre-update, and then combine that with some fancy work with minimal points and upper completions and using two different characterizations of uniform continuity at once via Lemma 15, and a touch of functional analysis. There's way too many interacting points and sets in this one. But easily the biggest grind is Consistency. We have 4 subset directions to show, each of which requires their own separate fancy argument, and two of them require splitting into a nirvana-containing/causal case and a nirvana-free case, so it's a 6-part proof. A good chunk of complexity arises because we have to take closure in the nirvana-containing case, an issue which goes away if we just let Nirvana be 1 reward forever. Let's begin. Condition 1: Nirvana-free Nonemptiness: This is trivial. Just pick a nirvana-free point in Θ ( π ¬ h ∙ π p a ) by nirvana-free nonemptiness, and update, to get one in u g h ( Θ ) ( π p a ) . Conditions 2,3: Closure, Convexity: Closure is a tautology since we took the closure. For convexity, the closure of a convex set is convex, and u g h is a linear function, so it maps convex sets to convex sets. Condition 4: Nirvana-free Upper-Completeness: First, invoke Lemma 27 to see that all nirvana-free points must have been present in the raw u g h ( Θ ( π ¬ h ∙ π p a ) ) set to begin with, without the closure. What we want is that, if M ′ = M + M ∗ , and M lies in the raw updated set and is nirvana-free, and M ′ is a nirvana-free a-measure, then M ∗ lies in the updated set as well. Find a M ′′ that maps to M after updating. It must be nirvana-free, because the nirvana either occurs without h as a prefix (which is forbidden because all that stuff gets clipped off and doesn't get pushed through the update), or the nirvana occurs with h as a prefix, but then it'd show up in the measure component of M post-update, contradicting its nirvana-freeness. Now, we can consider M ′′ + ( m ∗ , b ∗ ) (basically, M ∗ , but we take the measure back by sticking an h prefix on everything, and saying that it's 0 off-h). This is present in Θ ( π ¬ h ∙ π p a ) , by nirvana-free upper completion. By linearity of updating, and m ∗ having no measure in any off-h area where it'd get picked up by g , this updates to M + M ∗ , witnessing that M ′ lies in the image of the update, so we get nirvana-free upper completion. Condition 5: Bounded-Minimals: For bounded-minimals, we can pull the Lemma 16 trick of taking our M of interest that M n limit to, taking a preimage M ′ n for each M n , finding a minimal M ′ l o n below each M ′ n (which obeys a λ ⊙ + b ⊙ bound and also has no nirvana off-h), getting a limit point M ′ l o (still no nirvana off-h) by compactness, and pushing the sequence through the update, to get a sequence M l o n below M n limiting to M l o which is below M (Lemma 16) Now, we just have to check up on the λ + b values of our M l o n sequence, and show that they respect the λ ⊙ + b ⊙ bound, to transfer this to M l o . The raw update deletes measure from off-h, and assigns it the value that g does, which is 1 or less, so any increase in b correspond to an equal-or-greater decrease in λ , so the M l o n all obey the λ ⊙ + b ⊙ bound as well. Thus, the limit point M l o obeys the bound, and it's below our original M , so any minimal must obey the λ ⊙ + b ⊙ bound. Condition 7: Consistency: This is going to be extremely tedious and difficult to show, it's a 6-part proof. The first 3 parts are devoted to showing that u g h ( Θ ) ( π p a ) = ¯ ¯¯¯¯¯¯ ¯ c . h ( ⋃ π ≥ π p a p r π , π p a ∗ ( u g h ( Θ ) ( π ) ) ) Part 1 is showing u g h ( Θ ) ( π p a ) ⊆ ¯ ¯¯¯¯¯¯ ¯ c . h ( ⋃ π ≥ π p a p r π , π p a ∗ ( u g h ( Θ ) ( π ) ) ) In the nirvana-free pseudocausal/acausal case. Let M be in u g h ( Θ ) ( π p a ) . By Lemma 27, since we're working in the nirvana-free case, we didn't need to take the closure, it won't add any points that aren't there anyways. So, M has a preimage point M ′ ∈ Θ ( π ¬ h ∙ π p a ) that maps to it. By consistency for Θ , M ′ lies in the closed convex hull of projections of policies down from above, so there are points in the convex hull of projections of policies that are arbitrarily close to M ′ , fix some sequence M ′ n of points in the convex hull of projections down from policies above that limit to M ′ . Mapping these through the raw update (which is continuous) we get a sequence M n of points in u g h ( Θ ) ( π p a ) that limit to M . All these policies above ( π ¬ h ∙ π p a ) have the form ( π ¬ h ∙ π ) . So, M ′ n can be written as a mix of finitely many M ′ i , n , which are the projections of M ′ ∞ i , n from above, in policies. Update those , getting points M ∞ i , n in u g h ( Θ ) ( π ) . These project down to M i , n , which mix back together to make... M n . This is because of Lemma 28, that update-then-project equals project-then-update. Also, mix-then-project equals project-then-mix. Remember, M n is made by: "Project M ′ ∞ i , n down to make M ′ i , n , then mix to make M ′ n , then update." So, we can go project-mix-update equals mix-project-update equals mix-update-project equals update-mix-project equals update-project-mix, which is the process "update the M ′ ∞ i , n to M ∞ i , n , project down to M i , n , mix to M n " The first equality is linearity of projection, the second equality is Lemma 28, the third equality is linearity of updating, the final equality is linearity of projection again. Anyways, taking stock of what we've done, we have a sequence M n limiting to our M of interest, and every M n is crafted by taking points from finitely many u g h ( Θ ) ( π ) , projecting them down, and mixing them. Therefore, our M ∈ u g h ( Θ ) ( π p a ) lies in the closed convex hull of projections down from above. Part 2: we'll show this again, but in the nirvana-containing case, where we'll leverage causality. Fix a M ∈ u g h ( Θ ) ( π p a ) (with closure). There's a sequence M n that limits to it, that lies in the same set, but without closure, so we can take preimage points M ′ n ∈ Θ ( π ¬ h ∙ π p a ) that update to make M n . By causality, fix some arbitrary policy above ( π ¬ h ∙ π p a ) , which can be expressed as ( π ¬ h ∙ π ) , where π ≥ π p a . Anyways, we can take M ′ n , and use causality to get an outcome function o f , to get a M ′ ∞ n ∈ Θ ( π ¬ h ∙ π ) that projects down to M ′ n . We don't have to worry about nirvana off-h, because M ′ n already specifies everything that happens off-h and it says no nirvana occurs in that case. So, M ′ ∞ n can be updated to make a M ∞ n in u g h ( Θ ) ( π ) . By Lemma 28, this must project down to M n . So, all our M n lie in the projection of u g h ( Θ ) ( π ) , and since M is a limit point of that sequence, it must lie in the closed convex hull of projections. And we've shown that u g h ( Θ ) ( π p a ) ⊆ ¯ ¯¯¯¯¯¯ ¯ c . h ( ⋃ π ≥ π p a p r π , π p a ∗ ( u g h ( Θ ) ( π ) ) ) And have taken care of 2 of our 6 parts. Now for the reverse direction, that u g h ( Θ ) ( π p a ) ⊇ ¯ ¯¯¯¯¯¯ ¯ c . h ( ⋃ π ≥ π p a p r π , π p a ∗ ( u g h ( Θ ) ( π ) ) ) Thankfully, this can be done with a general argument that isn't sensitive to the presence of Nirvana. Part 3: Fix a M in the closed convex hull, which has a sequence M n limiting to it that's in the convex hull of projections down from above. the M n shatter into finitely many M i , n , which are projections of M ∞ i , n ∈ u g h ( Θ ) ( π i ) . Now, these aren't necessarily preimage points, they may have been added in the closure. Thus, we can perturb by 2 − n or less if needed to make a M ′ ∞ i , n which does have a preimage point. Projecting these down to M ′ i , n and mixing, crafts a M ′ n point that is within 2 − n of M n (remember, projection doesn't expand distance), so the sequence M ′ n still has M as a limit point (it gets arbitrarily close to a sequence that gets arbitrarily close to M ). If we can show that all the M ′ n lie in u g h ( Θ ) ( π p a ) , then by closure, we'll get that M lies in the same set so we're done. Ok, so we have M ′ ∞ i , n ∈ u g h ( Θ ) ( π i ) , that project down and mix to make M ′ n , and importantly , we crafted them so they're produceable without closure. Thus, they have preimage points M ′′ ∞ i , n ∈ Θ ( π ¬ h ∙ π i ) (that lack nirvana off-h) Project them down to make M ′′ i , n ∈ Θ ( π ¬ h ∙ π p a ) , and mix them to make a M ′′ n in the same set (which still lacks nirvana off-h), and this updates to make M ′ n via Lemma 28, as we'll show shortly. Starting with the M ′′ ∞ i , n , we know that update, project, mix equals M ′ n via going M ′ ∞ i , n , M ′ i , n , M ′ n . Then, update-project-mix equals project-update-mix equals project-mix-update, which is the path we took. Therefore, all the M ′ n lie in u g h ( Θ ) ( π p a ) , which is closed, so M (arbitrary in the closed convex hull of projections) lies in the same set, establishing the reverse subset direction and thus equality, u g h ( Θ ) ( π p a ) = ¯ ¯¯¯¯¯¯ ¯ c . h ( ⋃ π ≥ π p a p r π , π p a ∗ ( u g h ( Θ ) ( π ) ) ) Part 4: Now that we're halfway done,let's look at the "intersection of preimages of stubs from below" direction of consistency, u g h ( Θ ) ( π p a ) ⊆ ⋂ n ( p r π p a , π n p a ∗ ) − 1 ( u g h ( Θ ) ( π n p a ) ) . If we ignore the closure part and work with the raw update set sans closure, we can fix a M in u g h ( Θ ) ( π h i p a ) , take a preimage point in Θ ( π ¬ h ∙ π h i p a ) , project it down to Θ ( π ¬ h ∙ π l o p a ) by consistency, then update it to get exactly the projection of M (again, Lemma 28) Then, when we take the closure, we can just take our M in the closure, fix a sequence in the raw update set sans closure M n that limits to M , project down, getting M ′ n in the raw update set u g h ( Θ ) ( π l o p a ) sans closure, and then the limit point M ′ lies in u g h ( Θ ) ( π l o p a ) by closure, and by continuity of projection, M ′ is the projection of M . Since the sets get bigger as you go down, we can invoke Lemma 6 to swap out the intersection of preimages of all stubs below you, for the intersection of preimages of stubs of the form π n p a , this will be important later. Now, it's trivial to show that u g h ( Θ ) ( π p a ) ⊆ ⋂ n ( p r π p a , π n p a ∗ ) − 1 ( u g h ( Θ ) ( π n p a ) ) because we've established that projecting down makes a subset, and projection commutes, so any M ∈ u g h ( Θ ) ( π p a ) projects down into u g h ( Θ ) ( π n p a ) for all n. All that's left now is the reverse subset direction, u g h ( Θ ) ( π p a ) ⊇ ⋂ n ( p r π p a , π n p a ∗ ) − 1 ( u g h ( Θ ) ( π n p a ) ) Sadly, this one will require us splitting into the nirvana-containing (and thus causal) cases and the nirvana-free cases, and it's a really difficult one to show. Part 5: Let's address the nirvana-free case, we'll use a nifty trick to control the size of the preimage points we select. Ok, let's say you have a M with some λ 1 and b 1 value. And you take M ′ that's a preimage point, but its λ and b values are just... waaay too high. We want to have a preimage point with reasonable values, in order to apply bounding arguments. What you do, is find a minimal-point M min below M ′ , so M ′ = M min + M ∗ . Now, what you do, is swap out M ∗ ie ( m ∗ , b ∗ ) , for ( m ∗ | h , b ∗ + m ∗ ( 0 ★ h g ) ) . This is an sa-measure, because b ∗ + m ∗ ( 0 ★ h g ) + ( m ∗ | h ) − ( 1 ) = b ∗ + m ∗ ( 0 ★ h g ) + m ∗ − ( 1 ★ h 0 ) ≥ m ∗ − ( 0 ★ h g ) + m ∗ − ( 1 ★ h 0 ) = b ∗ + m ∗ − ( 1 ★ h g ) ≥ b ∗ + m ∗ − ( 1 ) ≥ 0 Now, consider updating M min + ( m ∗ | h , b ∗ + m ∗ ( 0 ★ h g ) ) instead (it's an a-measure, it has less negative parts than M ∗ , and is present by nirvana-free upper-completion). This gets you the update of M min , plus... ( c ( m ∗ | h ) , b ∗ + m ∗ ( 0 ★ h g ) ) (remember, 0 measure off-h). Which is the exact same thing you'd get by updating M ∗ , so when we updated our new sum, we hit M exactly. However, this sum is special, because we can stick some decent bounds on its λ and b value! For starters, its b value is less than b 1 (updating only adds on b-mass, and it updates to M ). And as for the λ value... well, M min has its λ bounded above by λ ⊙ (of the original Θ ) due to being a minimal point. And in the worst-case, all of the measure in M came from the thing we added, so m ∗ | h has a measure of λ 1 or less. So our bound on the λ value is λ ⊙ + λ 1 . Armed with this knowledge, we can begin to prove the last bit of consistency in the nirvana-free case. Take a M in the intersection of preimages. It projects down to make M n in u g h ( Θ ) ( π n p a ) . Projection preserves λ and b , so they all have the same λ 1 , b 1 bounds. Because we don't need to close in the nirvana-free case, we get a preimage point of M ′ n in Θ ( π ¬ h ∙ π n p a ) From our earlier considerations, we can always pick M ′ n such that its λ is ≤ λ ⊙ + λ 1 , and its b is ≤ b 1 , although we'll be using a bound of max ( b 1 , b ⊙ ) . Now, we're going to have to be extremely careful here. Let the point M ′ n , j be defined as: If j < n , then M ′ n , j is some arbitrary point in Θ ( π ¬ h ∙ π n p a ) , with λ equal to or below λ ⊙ + λ 1 , and b equal to or below max ( b 1 , b ⊙ ) , which always exists by all minimal points obeying the λ ⊙ + b ⊙ bound. If j = n , then M ′ n , j = M ′ n . If j > n , then M ′ n , j = p r ( π ¬ h , π j p a ) , ( π ¬ h , π n p a ) ∗ ( M ′ j ) Then, the tuple of M ′ n , j for all n is a point in: ∏ n ( Θ ( π ¬ h ∙ π n p a ) ∩ { ( λ μ , b ) | λ ≤ λ ⊙ + λ 1 , b ≤ max ( b 1 , b ⊙ ) } ) Equipped with the product topology. In particular, this is a product of compact sets, so by Tychonoff's theorem, it's compact. Thus, we can get a convergent subsequence of the tuples. On this subsequence, all the M ′ n , j converge to a limit point M ′ n , ∞ , regardless of n. Also, M ′ n , ∞ projects down to M ′ m , ∞ if n ≥ m , because for large enough j, the projection of M ′ n , j will always be M ′ m , j , and by continuity of projection, the projection of M ′ n , ∞ must be M ′ m , ∞ Ok, so we've got an infinite sequence of M ′ n , ∞ for all n that all project down onto each other. Another nice feature is that updating M ′ n , ∞ produces M n . This is because, when j climbs high enough, M ′ j , j projects down to M ′ n , j , and M ′ j , j is just M ′ j which updates to M j , which projects down to M n . By Lemma 28, update-then-project equals project-then-update, so M ′ n , j must update to M n , for all sufficiently high j. The preimage of a single point is closed, so past a certain point, the M ′ n , j are wandering around in the preimage of M n , so M ′ n , ∞ also updates to M n . Now, our next step is, does the M ′ n , ∞ sequence in Θ ( π ¬ h ∙ π n p a ) pick out a single point M ′ in Θ ( π ¬ h ∙ π p a ) that projects down accordingly? Yes it does. Just intersect all the preimages of single points, they're nested in each other and compact so the finite intersection property holds, and if the intersection wasn't composed of a single point, you'd have two distinct points with a difference at some finite time, but projecting down to any finite time the two distinct points are identical, so there can only be a single point in the intersection. Further, it must lie in Θ ( π ¬ h ∙ π p a ) , because you can project it down to M ′ n , ∞ in Θ ( π ¬ h ∙ π n p a ) for any n, which, by consistency for Θ , you can also project down to Θ ( ( π ¬ h ∙ π p a ) n ) (projecting down further), so it's present in the intersection of all the preimages, certifying that it's in the appropriate set. Now, finally... does M ′ , when updated, produce M , certifying that the point in the intersection of preimages is also in the raw update set? Well, let's say it didn't. Then we get a M ′′ that's not equal to M , so projecting down to some finite n should suffice to observe that. However, projecting M ′′ and M down produces... M n . This is because of Lemma 28, update-then-project equals project-then-update. Projecting M ′ down makes M ′ n , ∞ , which updates to M n . So, no finite stage suffices to observe the difference between the updated form of M ′ and M itself, so they must be identical, certifying u g h ( Θ ) ( π p a ) ⊇ ⋂ n ( p r π p a , π n p a ∗ ) − 1 ( u g h ( Θ ) ( π n p a ) ) for the nirvana-free case. Part 6: Let's move to the nirvana-case  where we can leverage causality. We'll be showing this in a rather nonstandard way. We're going to pick a π ≥ π p a , and show that our M of interest in the intersection of preimages can be written as a limit of points projected down from u g h ( Θ ) ( π ) , establishing that M lies in the closed convex hull of points from above, which we've already shown equals u g h ( Θ ) ( π p a ) . Ok, so M is in the intersection of preimages. Project it down to all the u g h ( Θ ) ( π n p a ) , getting a batch of points M n from them. This is the raw update set, so within 2 − n or less distance from M n , there's a M ′ n in the raw update sans closure, which has a preimage point M ′′ n that lies in Θ ( π ¬ h ∙ π n p a ) . Now, pick some arbitrary policy above π ¬ h ∙ π p a , which can be written as π ¬ h ∙ π . Moving on even further, by causality, we can get a point M ′′ ∞ n ∈ Θ ( π ¬ h ∙ π ) that projects down to M ′′ n . Update M ′′ ∞ n to get a M ′ ∞ n ∈ u g h ( Θ ) ( π ) , which then (by our earlier thing about how a set equaled the closed convex hull of projections down from above), projects down to a M ′ h i n ∈ u g h ( Θ ) ( π p a ) . Now, we can ask whether the sequence M ′ h i n limits to M itself. u g h ( Θ ) ( π p a ) is closed, so this would certify that M lies in the appropriate set. First, observe that the projection of M ′ h i n down to π n p a is M ′ n . This is by Lemma 28, update-then-project equals project-then-update. M ′′ ∞ n projects down to M ′′ n , which updates to M ′ n , so M ′ n must be what you get by updating M ′′ ∞ n to M ′ ∞ n , and projecting down to π p a (making M ′ h i n ), and projecting that down to π n p a . Now, because projection preserves the b term, and M ′ h i n projects down to M ′ n which is within 2 − n of M n (not much of a difference in the b terms), and M n has the same b term as M , we can certify convergence of the b term at least. Now for convergence of the measure components. Again, M ′ h i n projects down to M ′ n which is within 2 − n of M n (not much difference before timestep n, shrinking increasingly low), and M n perfectly mimics what M does before timestep n. So, M ′ h i n behaves increasingly closely to M for everything before time n, which increases without bound. Increasingly close matches on increasingly large initial segments of what happens mean that M ′ h i n must limit to M itself, certifying that M lies in u g h ( Θ ) ( π p a ) for the causal cases. That's the last bit we needed! We're finally done with consistency now. This just leaves the hausdorff-condition and the extreme-point condition and pseudocausality and causality. Condition 9: Hausdorff-continuity: What we need to do for our setup to even approach this is to show that updating the preimage of the nirvana-free part of Θ ( π ¬ h ∙ π p a ) , produces exactly the preimage of the nirvana-free part of u g h ( Θ ) ( π p a ) . One direction, we can get easily. If you fix a M ′ ∞ in the preimage of the nirvana-free part of Θ ( π ¬ h ∙ π p a ) , it projects down to a M ′ ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F , that updates to a M ∈ u g h ( Θ ) ( π p a ) , then by Lemma 28, project-then-update equals update-then-project, so M ′ ∞ must update to a M ∞ that projects down to M , certifying that updating the preimage of the nirvana-free part of Θ ( π ¬ h ∙ π p a ) produces a subset of the preimage of the nirvana-free part of u g h ( Θ ) ( π p a ) . In the other direction, fix a M ∞ in the preimage of the nirvana-free part of u g h ( Θ ) ( π p a ) . It projects down to a M in u g h ( Θ ) ( π p a ) ∩ N F , and by Lemma 27, M wasn't introduced in the closure, so it has a preimage point M ′ ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F . Now, how do we extend M ′ to craft a M ′ ∞ that updates to M ∞ ? Well, we can split into two parts. What happens on-h, and what happens off-h? For the off-h part, the post-update part has everything folded into the b term, while the pre-update part has an actual measure specified everywhere . Thus, our M ′ ∞ should have the same off-h part as M ′ to project down accordingly, so updating folds it into the same b term as M ∞ has. Now, for the on-h part, it's a bit more complicated. M ∞ specified what happens for all infinite histories with h as a prefix. However, M and M ′ only specify part of that data, but fortunately agree on that part. Thus, for M ′ ∞ , you can just extend with the conditional probabilities of M ∞ , to perfectly mimic it on-h. This makes a M ′ ∞ in the preimage that updates to M ∞ . Ok, so the appropriate preimages for Hausdorff-continuity (post-update) are made exactly by updating the preimages for Hausdorff-continuity (pre-update). Now, updating is a continuous linear operator. We're mapping from the Banach space M ± ( ( A × O ) ω ) ⊕ R to the Banach space M ± ( h ( A × O ) ω ) ⊕ R . Well, this isn't quite right, your actions and observations may vary depending on where you are in history, but the general thing of "restrict to signed measures over infinite histories with h as a prefix" still checks out. Updating is still a continuous linear operator between Banach spaces, by Lemma 8 of Section 1. Also, all continuous linear operators between Banach spaces are bounded, and thus Lipschitz-continuous at 0, and thus Lipschitz-continuous everywhere due to linearity. So, when we push two points that are only ϵ apart through the update, they're now C ϵ apart at most, where C is a finite constant. We're going to have a lot of points. Unusually enough, we'll be using the standard formulation of Hausdorff-continuity for our original Θ , that for all ϵ , there's a δ where two partial policies π p a and π ′ p a that are δ or less apart have ( p r ∞ , π p a ∗ ) − 1 ( Θ ( π p a ) ∩ N F ∩ { ≤ ⊙ } ) (and the analogous set for π ′ p a ) being only ϵ apart in Hausdorff-distance. Fixing your ϵ , you're gonna want δ to be low enough to force a ϵ C difference between the clipped preimages, and δ < ϵ C . It's highly advised to sketch out how our points interact and what sets they're in. A superscript of infinity will be used to denote points in the preimages of the u g h ( Θ ) ( π p a ) sets (or Θ ( π ¬ h ∙ π p a ) ) (ie, at the infinite levels), and a superscript of "u" specifies post-update while its lack is pre-update. Anyways, here's our points. M u , ∞ lies in the preimage of u g h ( Θ ) ( π p a ) ∩ N F , and it's our point that we want to find a point nearby. λ will refer to the λ value of this thing. Projecting M u , ∞ down to u g h ( Θ ) ( π p a ) ∩ N F makes M u . We can find a minimal point below M u , M u , min in u g h ( Θ ) ( π p a ) ∩ N F . M u , min + M u , ∗ = M u . A nirvana-free point wasn't introduced by the closure, and it has a minimal point in its preimage, so there's a M min in Θ ( π p a ) that updates to M u , min , and respects the λ ⊙ + b ⊙ bound of Θ . Let M l o be defined as M min + ( ( m u , ∗ ) − , − ( m u , ∗ ) − ( 1 ) ) . We're extending the negative-measure part of M u , ∗ back to its original domain by sticking an h prefix on everything, and saying it's 0 everywhere else. this is an a-measure that lies in Θ ( π ¬ h ∙ π p a ) ∩ N F ∩ { ≤ ⊙ } (because M min respects the λ ⊙ + b ⊙ bound, and the thing that we added has a λ + b value of 0) Let M be defined as M l o + ( ( m u , ∗ ) + , b u , ∗ + ( m u , ∗ ) − ( 1 ) ) , it also lies in the same set Updating M makes M u , because, unpacking M , it's M min + M u , ∗ , which updates to M u , min + M u , ∗ which adds up to make M u . Our goal now is to explicitly construct a M ∞ and M l o , ∞ in the preimage of Θ ( π ¬ h ∙ π p a ) ∩ N F s.t. they project down onto M and M l o , M l o , ∞ lies below M ∞ , and M ∞ updates to M u , ∞ . A sufficient way to do this is to make M l o , ∞ and M ∞ by, after h, extending the measures further with the conditional probabilities of the measure component of M u , ∞ . Extending ( ( m u , ∗ ) + , b u , ∗ + ( m u , ∗ ) − ( 1 ) ) with the conditional probabilities of M u , ∞ witnesses that M l o , ∞ lies below M ∞ . They obviously project down onto M and M l o . As for M ∞ updating to M u , ∞ , the b term and the fragment of the measure that doesn't get ignored by projection down matches because M ∞ projects to M which updates to M u which is the projection of M u , ∞ . And, for the fragment of the measure that isn't defined in Θ ( π ¬ h ∙ π p a ) , but that must be present on the infinite levels, we copied the conditional probabilities of the measure component M u , ∞ , so we've got a match there. Taking a break from setting up all our damn points for a brief recap, we have a M l o , ∞ that lies in the preimage of Θ ( π ¬ h ∙ π p a ) ∩ N F ∩ { ≤ ⊙ } , and a M ∞ that lies above it (in the preimage of Θ ( π ¬ h ∙ π p a ) ∩ N F ), and it updates to hit M u , ∞ (our original point in the preimage of u g h ( Θ ) ( π p a ) ∩ N F ). Now, we can proceed. So... M l o , ∞ lies in the preimage of Θ ( π ¬ h ∙ π p a ) ∩ N F ∩ { ≤ ⊙ } . By hausdorff-continuity for Θ and the distance between ( π ¬ h ∙ π p a ) and ( π ¬ h ∙ π ′ p a ) being below δ because the distance between π p a and π ′ p a is below δ , and using our earlier thing about how a δ distance means a ϵ C difference between the clipped preimages, we can find a point ( M l o , ∞ ) ′ in the preimage of Θ ( π ¬ h ∙ π ′ p a ) ∩ N F ∩ { ≤ ⊙ } that's that close to M l o , ∞ . To go up from M l o , ∞ to M ∞ requires adding ( ( m u , ∗ ) + , b u , ∗ + ( m u , ∗ ) − ( 1 ) ) (with the measure component extended with the conditional probabilities of the measure component of M u , ∞ , obviously). Also, because the λ value of M u , ∞ is the λ value of M u , which was made by adding M u , ∗ to an a-measure, an upper bound on the λ value of that a-measure we added onto M l o , ∞ is... λ . Corresponding to the extreme case where all the measure of M u came from M u , ∗ . Now, we can craft a point ( M ∞ ) ′ which lies in the preimage of Θ ( π ¬ h ∙ π ′ p a ) ∩ N F that's only ϵ C + δ λ away from M ∞ . Why? Well, we can start with ( M l o , ∞ ) ′ , which is only ϵ C away from M l o , ∞ , and take that positive-measure-thingy we added, and reshuffle the measure on it. With earthmover distance, the δ distance between ( π ¬ h ∙ π ′ p a ) and ( π ¬ h ∙ π p a ) corresponds to a time-threshold where they start to differ at log γ ( δ ) , and you're moving dirt a γ log γ ( δ ) = δ difference to account for having to land in the right preimage, and you've got λ at most dirt to move. Then, you just add ( M l o , ∞ ) ′ and your reshuffled measure, to get your point ( M ∞ ) ′ . Which is the sum of two components that only differ by ϵ C and δ λ from the components which sum to make M ∞ . Ok, so we have a point M ∞ in the preimage of Θ ( π ¬ h ∙ π p a ) ∩ N F , which updates to M u , ∞ that lies in the preimage of u g h ( Θ ) ( π p a ) . And a point ( M ∞ ) ′ in the preimage of Θ ( π ¬ h ∙ π ′ p a ) ∩ N F which is (taking into account that δ < ϵ C ) only ϵ C ( 1 + λ ) distance away from M ∞ . And now we can finish up, because the preimage of u g h ( Θ ) ( π ′ p a ) ∩ N F is the update of the preimage of Θ ( π ¬ h ∙ π ′ p a ) ∩ N F . So, we just update ( M ∞ ) ′ to get a point ( M u , ∞ ) ′ in the preimage of u g h ( Θ ) ( π ′ p a ) . And further, the distance between M ∞ and ( M ∞ ) ′ is only ϵ C ( 1 + λ ) at most. M ∞ updates to M u , ∞ , and ( M ∞ ) ′ updates to ( M u , ∞ ) ′ . And we know that u g h has a Lipschitz constant of C (by being a continuous linear operator between Banach spaces), so M u , ∞ only has a distance of ϵ ( 1 + λ ) from a point in the preimage of u g h ( Θ ) ( π ′ p a ) . So, we get Hausdorff-continuity (the Lemma 15 variant). Condition 8: Extreme Point Condition: We had to defer this because π ¬ h ∙ π s t isn't a stub, so we can't use the extreme point condition we had, and instead must regenerate it completely from scratch. Our first step in this is showing u g h ( Θ ) ( π s t ) ∩ N F = ¯ ¯¯¯¯¯¯ ¯ c . h ( ⋃ π ≥ π s t p r π , π s t ( u g h ( Θ ) ( π ) ∩ N F ) ) One subset direction is easy, the closed convex hull of projections of nirvana-free stuff must all be in u g h ( Θ ) ( π s t ) by consistency which we've shown, and all must be nirvana-free. Now for the reverse direction. Let M ∈ u g h ( Θ ) ( π s t ) ∩ N F By Lemma 27, this point wasn't added in the closure, so it has a preimage point M ′ ∈ Θ ( π ¬ h ∙ π s t ) ∩ N F . Using all our nice conditions for Θ , we can invoke Lemma 21 to get that M ′ ∈ ¯ ¯¯¯¯¯¯ ¯ c . h ( ⋃ π ≥ ( π ¬ h ∙ π s t ) p r π , ( π ¬ h ∙ π s t ) ( Θ ( π ) ∩ N F ) ) , so we can fix a sequence M ′ n limiting to M where each M ′ n shatters into M ′ i , n that came from some M ′ ∞ i , n that's nirvana-free and lies in the associated set of a full policy above π ¬ h ∙ π s t . Updating the M ′ n produces a sequence M n which is nirvana-free, in u g h ( Θ ) ( π s t ) , and limits to M by continuity. Updating the M ′ ∞ i , n into M ∞ i , n which lie in u g h ( Θ ) ( π i ) ∩ N F , projecting down to get M i , n , and mixing them, produces M n , by our usual Lemma 28 argument. This witnesses that all the M n lie in c . h ( ⋃ π > π s t p r π , π s t ( u g h ( Θ ) ( π ) ∩ N F ) ) Thus, M lies in the closed convex hull of projections of nirvana-free stuff from above. What do we do with this? Well, now we can invoke Lemma 20, since we have Hausdorff-continuity proved, to conclude that c . h ( ⋃ π ≥ π s t p r π , π s t ( u g h ( Θ ) ( π ) ∩ N F ) ) is closed, so we didn't really need the closed convex hull (which we've already shown is the same as u g h ( Θ ) ( π s t ) ∩ N F ) And we now know that u g h ( Θ ) ( π s t ) ∩ N F = c . h ( ⋃ π ≥ π s t p r π , π s t ( u g h ( Θ ) ( π ) ∩ N F ) ) Now, we can take a minimal extreme nirvana-free point M e x in u g h ( Θ ) ( π s t ) . It must be minimal and extreme and nirvana-free in the original set. If it wasn't minimal in the original set, all minimals below it would be nirvana-free too, witnessing its nonminimiality in the restricted set. And if it wasn't extreme in the original set, then the points that mix to make it must all be nirvana-free too, since it's nirvana-free, so we have a witness of non-extremeness in u g h ( Θ ) ( π s t ) ∩ N F . Ok, so it's extreme and nirvana-free. It must also be extreme in the convex hull set, but, since it can't be produced by mixtures, there's a M ∞ in some u g h ( Θ ) ( π ) ∩ N F that projects down to M e x , establishing the extreme point condition. That just leaves causality and pseudocausality. Condition C: Causality Ok, we pick a π p a and a point  in u g h ( Θ ) ( π p a ) Can we make an outcome function for everything that includes our point? By our proof of full causality in the first part of the Isomorphism theorem (finite-to-full direction), this can be done as long as all other conditions are met and we can make an outcome function for any point in any u g h ( Θ ) ( π s t ) . So, let's just establish finitary causality. Fix some π s t and some M ∈ u g h ( Θ ) ( π s t ) . Since M is in the updated set, there's a sequence M n that limits to M that we don't need closure to get. There's a λ and b bound on this sequence because it converges, call those bounds λ ◯ and b ◯ . Now, we can take a M ′ n ∈ Θ ( π ¬ h ∙ π p a ) that updates to M n . We can use causality for Θ to get an outcome function for M ′ n . We don't have to worry about nirvana-off-h, because M ′ n has no nirvana off-h, and the projection of M ′ n down to Θ ( π ¬ h ) preserves the off-h part, and is nirvana-free off-h, and everything above that (which is the only thing that determines the update) must also match the off-h part and certify that it's nirvana-free. Updating an outcome function back in produces an outcome function for u g h ( Θ ) by Lemma 28 (update then project equals project then update). Said outcome function for u g h ( Θ ) maps π s t to M n . We can restrict it to just stubs, to get an outcome function over stubs. So, proceeding in this way, we get a sequence o f n of outcome functions for the stubs of u g h ( Θ ) . Remember, outcome functions must match λ and b values, so the points for o f n have a λ and b value matching that of M n , ie, less than λ ◯ and b ◯ since that's our bound on the M n sequence. this sequence o f n of outcome functions (picking out one point for each π s t ) can be thought of as an element of ∏ π ′ s t ( u g h ( Θ ) ( π ′ s t ) ∩ { ( λ μ , b ) | λ ≤ λ ◯ , b ≤ b ◯ } ) This is a product of compact sets (intersection of closed and compact sets by the Compactness Lemma) so it's compact by Tychonoff. Thus, our sequence o f n of outcome functions has a subsequence with limit point o f , and for all π ′ s t (restricting n to the subsequence), lim n → ∞ ( o f n ( π ′ s t ) ) = o f ( π ′ s t ) . We have closure so all these limit points lie in their appropriate sets. In particular, o f ( π s t ) = lim n → ∞ ( o f n ( π s t ) ) = lim n → ∞ M n = M So that checks out. Continuity of projections certifies that o f is indeed an outcome function for stubs, because p r π h i s t , π l o s t ∗ ( o f ( π h i s t ) ) = p r π h i s t , π l o s t ∗ ( lim n → ∞ ( o f n ( π h i s t ) ) ) = lim n → ∞ p r π h i s t , π l o s t ( o f n ( π h i s t ) ) = lim n → ∞ o f n ( π l o s t ) = o f ( π l o s t ) And running through the proof of causality in the first part of the Isomorphism theorem, we get causality in general. Condition P: Pseudocausality: In the nirvana-free setting, fix a M ∈ u g h ( Θ ) ( π p a ) , whose support is a subset of F N F ( π ′ p a ) . Get a M ′ ∈ Θ ( π ¬ h ∙ π p a ) that updates to M . Its support is either on infinite histories of the off-h portion, or stuff in F N F ( π ′ p a ) (with an h prefix stuck on front), so it's supported on F N F ( π ¬ h ∙ π ′ p a ) , so M ′ ∈ Θ ( π ¬ h ∙ π ′ p a ) by pseudocausality, so then we update and get M ∈ u g h ( Θ ) ( π ′ p a ) , certifying pseudocausality. Almost done. Just invoke Lemma 24 to show that, after renormalizing, every nice property is preserved. We still do have to check that the renormalization we use is the proper renormalization to use. Our scale term for renormalization for updating is ( max π > π ¬ h E Θ ( π ) ( 1 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) − 1 and our shift term is E Θ ( π ¬ h ) ( 0 ★ h g ) The scale term and shift term we should have for proper renormalization is ( max π E u g h ( Θ ) ( π ) ( 1 ) − min π E u g h ( Θ ) ( π ) ( 0 ) ) − 1 and min π E u g h ( Θ ) ( π ) ( 0 ) respectively. So let's show they're equal! We'll be using Lemma 27, to get that every nirvana-free thing in u g h ( Θ ) ( π p a ) wasn't added in the closure and has a preimage point. max π E u g h ( Θ ) ( π ) ( 1 ) = max π min ( m , b ) ∈ u g h ( Θ ) ( π ) ∩ N F ( m ( 1 ) + b ) = max π > π ¬ h min ( m , b ) ∈ Θ ( π ) ∩ N F ( ( m | h ) ( 1 ) + b + m ( 0 ★ h g ) ) = max π > π ¬ h min ( m , b ) ∈ Θ ( π ) ∩ N F ( m ( 1 ★ h 0 ) + b + m ( 0 ★ h g ) = max π > π ¬ h min ( m , b ) ∈ Θ ( π ) ∩ N F ( m ( 1 ★ h g ) + b ) = max π > π ¬ h E Θ ( π ) ( 1 ★ h g ) Ok, so one of our normalization factors is correct. Let's look at the second one. min π E u g h ( Θ ) ( π ) ( 0 ) = min π min ( m , b ) ∈ u g h ( Θ ) ( π ) ∩ N F ( b ) Now, said minimal nirvana-free point projects down to π ∅ , the empty policy, preserving its b. Further, by Lemma 21, any point in π ∅ with a lower b value, being nirvana-free, must be a finite mix of nirvana-free points from above projected down, so we get some nirvana-free point in some u g h ( Θ ) ( π ) with a too-low b, which is impossible, so we can swap out u g h ( Θ ) ( π ) with u g h ( Θ ) ( π ∅ ) , getting min π min ( m , b ) ∈ u g h ( Θ ) ( π ) ∩ N F ( b ) = min ( m , b ) ∈ u g h ( Θ ) ( π ∅ ) ∩ N F ( b ) = min ( m , b ) ∈ Θ ( π ¬ h ) ∩ N F ( b + m ( 0 ★ h g ) ) = E Θ ( π ¬ h ) ( 0 ★ h g ) And our second renormalization term checks out. Done! Proposition 10: For causal, pseudocausal, acausal, and surcausal hypotheses, E Θ ( π ¬ h ∙ π p a ) ( f ★ h g ) = E Θ ( π ¬ h ) ( 0 ★ h g ) + P g Θ , π ¬ h ( h ) ⋅ E ( Θ | g , π ¬ h , h ) ( π p a ) ( f h ) First, note that f h is defined as f h ( h ′ ) = f ( h h ′ ) . So it basically copies f , but it's subtly different because it has to account for the h prefix being sliced off in the update. Let's unpack E ( Θ | g , π ¬ h , h ) ( π p a ) ( f h ) first. E ( Θ | g , π ¬ h , h ) ( π p a ) ( f h ) = min ( m , b ) ∈ ( Θ | g , π ¬ h , h ) ( π p a ) ∩ N F ( m ( f h ) + b ) Then, we can invoke Lemma 27 to realize that all nirvana-free points in the update came from nirvana-free points originally, so we can rewrite this (taking the renormalization terms into account) as min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F ( 1 P g Θ , π ¬ h ( h ) c ( m | h ) ( f h ) + 1 P g Θ , π ¬ h ( h ) ( b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F 1 P g Θ , π ¬ h ( h ) ( c ( m | h ) ( f h ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F 1 P g Θ , π ¬ h ( h ) ( ( m | h ) ( f ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F 1 P g Θ , π ¬ h ( h ) ( m ( f ★ h 0 ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F 1 P g Θ , π ¬ h ( h ) ( m ( f ★ h g ) + b − E Θ ( π ¬ h ) ( 0 ★ h g ) ) Now, armed with this, we can rewrite E Θ ( π ¬ h ) ( 0 ★ h g ) + P g Θ , π ¬ h ( h ) ⋅ E ( Θ | g , π ¬ h , h ) ( π p a ) ( f h ) as E Θ ( π ¬ h ) ( 0 ★ h g ) + P g Θ , π ¬ h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F 1 P g Θ , π ¬ h ( h ) ( m ( f ★ h g ) + b − E Θ ( π ¬ h ) ( 0 ★ h g ) ) ) = E Θ ( π ¬ h ) ( 0 ★ h g ) + ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F ( m ( f ★ h g ) + b − E Θ ( π ¬ h ) ( 0 ★ h g ) ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π p a ) ∩ N F ( m ( f ★ h g ) + b ) = E Θ ( π ¬ h ∙ π p a ) ( f ★ h g ) and we're done. Proposition 11: If h h ′ is a valid o-history, then for causal, pseudocausal, acausal, and surcausal hypotheses, ( Θ | g , π ¬ h , h ) | g h , π ¬ h ′ , h ′ = Θ | g , ( π ¬ h ∙ π ¬ h ′ ) , h h ′ Proof sketch: We'll work with updates assuming no closure is done, and then once we've established our main result, we'll show it with the closure part of updating. This is very long but it's mostly just a lot of algebra grinding to show that mapping a suitable point in Θ ( π ¬ h ∙ ( π ¬ h ′ ∙ π p a ) ) through the two individual updates and the single big update makes the same point. We'll take a detour first and show that P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) ⋅ P g Θ , π ¬ h ( h ) = P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) First, we can unpack P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) as: max π > π ¬ h ′ E ( Θ | g , π ¬ h , h ) ( π ) ( 1 ★ h ′ g h ) − E ( Θ | g , π ¬ h , h ) ( π ¬ h ′ ) ( 0 ★ h ′ g h ) Now, let's unpack that first term, with the aid of our trusty Lemma 27 that when updating, no new nirvana-free points are added by closure. max π > π ¬ h ′ E ( Θ | g , π ¬ h , h ) ( π ) ( 1 ★ h ′ g h ) = max π > π ¬ h ′ min ( m , b ) ∈ ( Θ | g , π ¬ h , h ) ( π ) ∩ N F ( m ( 1 ★ h ′ g h ) + b ) = max π > π ¬ h ′ min ( m , b ) ∈ Θ ( π ¬ h ∙ π ) ∩ N F 1 P g Θ , π ¬ h ( h ) ( c ( m | h ) ( 1 ★ h ′ g h ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) = 1 P g Θ , π ¬ h ( h ) max π > π ¬ h ′ min ( m , b ) ∈ Θ ( π ¬ h ∙ π ) ∩ N F ( c ( m | h ) ( 1 ★ h ′ g h ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) = 1 P g Θ , π ¬ h ( h ) max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( c ( m | h ) ( 1 ★ h ′ g h ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) Ok, that's good enough for now, we'll do more rewrites later. Unpacking the second term, again, with Lemma 27, we get... pretty much the exact same thing by the same sequence of rewrites, culminating in = 1 P g Θ , π ¬ h ( h ) min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( c ( m | h ) ( 0 ★ h ′ g h ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) Ok, we pulled a ( P g Θ , π ¬ h ( h ) ) − 1 term out of both pieces, which cancels out, so P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) ⋅ P g Θ , π ¬ h ( h ) = max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( c ( m | h ) ( 1 ★ h ′ g h ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) − min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( c ( m | h ) ( 0 ★ h ′ g h ) + b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) = max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( c ( m | h ) ( 1 ★ h ′ g h ) + b + m ( 0 ★ h g ) ) − min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( c ( m | h ) ( 0 ★ h ′ g h ) + b + m ( 0 ★ h g ) ) First, observe that 1 ★ h ′ g h and 0 ★ h ′ g h (since we're taking the expectation over stuff that's had the h clipped off), can be written as ( 1 ★ h h ′ g ) h and ( 0 ★ h h ′ g ) h respectively, because the term 1 ★ h h ′ g (or 0) is "1 (or 0) on hh', g on h but off hh', g off h", so ( 1 ★ h h ′ g ) h is "1 (or 0) on h', g h off h'" (from stripping off the h prefix), which is the same as 1 ★ h ′ g h (or the 0 analogue). So, we can rewrite as: = max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( c ( m | h ) ( ( 1 ★ h h ′ g ) h ) + b + m ( 0 ★ h g ) ) − min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( c ( m | h ) ( ( 0 ★ h h ′ g ) h ) + b + m ( 0 ★ h g ) ) = max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( ( m | h ) ( 1 ★ h h ′ g ) + b + m ( 0 ★ h g ) ) − min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( ( m | h ) ( 0 ★ h h ′ g ) + b + m ( 0 ★ h g ) ) = max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( m ( ( 1 ★ h h ′ g ) ★ h 0 ) + b + m ( 0 ★ h g ) ) − min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( m ( ( 0 ★ h h ′ g ) ★ h 0 ) + b + m ( 0 ★ h g ) ) = max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( m ( ( 1 ★ h h ′ g ) ★ h g ) + b ) − min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( m ( ( 0 ★ h h ′ g ) ★ h g ) + b ) Now, we should probably figure out how to rewrite ( 1 ★ h h ′ g ) ★ h g . This rewrites as ( 1 ★ h h ′ g ) . Similarly, with ( 0 ★ h h ′ g ) ★ h g , it rewrites as ( 0 ★ h h ′ g ) . Making these substitutions, we get = max π > ( π ¬ h ∙ π ¬ h ′ ) min ( m , b ) ∈ Θ ( π ) ∩ N F ( m ( 1 ★ h h ′ g ) + b ) − min ( m , b ) ∈ Θ ( π ¬ h ∙ π ¬ h ′ ) ∩ N F ( m ( 0 ★ h h ′ g ) + b ) = max π > ( π ¬ h ∙ π ¬ h ′ ) E Θ ( π ) ( 1 ★ h h ′ g ) − E Θ ( π ¬ h ∙ π ¬ h ′ ) ( 0 ★ h h ′ g ) = P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) And we're done, having shown that P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) ⋅ P g Θ , π ¬ h ( h ) = P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) Back to the bulk of the proof. First, we have to consider what points in Θ ( ( π ¬ h ∙ π ¬ h ′ ) ∙ π p a ) can survive the pair of updates/single update. They have to have no nirvana that lacks h as a prefix, and no nirvana that has h as a prefix but lacks hh' as a prefix. So, all the nirvana is after hh'. Let ( m , b ) be an appropriate point (lacking the nirvana, and in the right set) that we can shove through both updates/the single big update. The induced point in ( ( Θ | g , π ¬ h , h ) | g h , π ¬ h ′ , h ′ ) ( π p a ) (minus the closure on both steps!) can be written as... well, it's kinda big, we'll break down the measure component and b component 1 P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) c ( ( 1 P g Θ , π ¬ h ( h ) c ( m | h ) ) | h ′ ) And the b component is still too big, we'll split it up into two parts. 1 P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) ( 1 P g Θ , π ¬ h ( h ) ( b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) ) + 1 P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) ( 1 P g Θ , π ¬ h ( h ) c ( m | h ) ( 0 ★ h ′ g h ) − E ( Θ | g , π ¬ h , h ) ( π ¬ h ′ ) ( 0 ★ h ′ g h ) ) It may be nonobvious that this is the update, but the big fraction in front is the scale term for the second update which applies to everything, the measure term is the update of the measure term for the first update, the first b part is the b term that's produced after the first update, and the second b part is the stuff added to the b term from the first update. Now, let's break this down a bit. For the first measure term, we can pull out the inner scale term and use our result on what happens when you multiply the scale terms to get 1 P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) c ( ( 1 P g Θ , π ¬ h ( h ) c ( m | h ) ) | h ′ ) = 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) c ( ( c ( m | h ) ) | h ′ ) And c ( ( c ( m | h ) ) | h ′ ) = c ( ( m | h ) | h h ′ ) = c ( m | h h ′ ) This is because the first term is the process: Take m , strip out all parts of the measure that don't have h as a prefix, clip off the h prefix, then strip out all parts of that measure that don't have h' as a prefix, and clip off h'. Which is the same as taking m , stripping out all parts that don't have h as a prefix, stripping out all parts that don't have hh' as a prefix, and clipping off hh' (the second term). And this is the same as taking m , stripping out all parts that don't have hh' as a prefix, and clipping off hh' (the third term) So, our final rewrite of the measure term is: 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) c ( m | h h ′ ) Now, let's address the first b part. We can easily just pull the scale term out to rewrite it as: 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) ( b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) ) Which should be good enough for now. Moving on to the second b term, 1 P g h ( Θ | g , π ¬ h , h ) , π ¬ h ′ ( h ′ ) ( 1 P g Θ , π ¬ h ( h ) c ( m | h ) ( 0 ★ h ′ g h ) − E ( Θ | g , π ¬ h , h ) ( π ¬ h ′ ) ( 0 ★ h ′ g h ) ) Again, we can pull out the scale term to rewrite as: 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) ( c ( m | h ) ( 0 ★ h ′ g h ) − P g Θ , π ¬ h ( h ) ⋅ E ( Θ | g , π ¬ h , h ) ( π ¬ h ′ ) ( 0 ★ h ′ g h ) ) Now, from our earlier arguments, ( 0 ★ h h ′ g ) h = 0 ★ h ′ g h . So, we can rewrite as: 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) ( c ( m | h ) ( ( 0 ★ h h ′ g ) h ) − P g Θ , π ¬ h ( h ) ⋅ E ( Θ | g , π ¬ h , h ) ( π ¬ h ′ ) ( ( 0 ★ h h ′ g ) h ) ) And now we can use Proposition 10 to swap out P g Θ , π ¬ h ( h ) ⋅ E ( Θ | g , π ¬ h , h ) ( π ¬ h ′ ) ( ( 0 ★ h h ′ g ) h ) for E Θ ( π ¬ h ∙ π ¬ h ′ ) ( ( 0 ★ h h ′ g ) ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) And now, we can go: ( 0 ★ h h ′ g ) ★ h g = 0 ★ h h ′ g Making this substitution, we have a rewrite as E Θ ( π ¬ h ∙ π ¬ h ′ ) ( 0 ★ h h ′ g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) And making this substitution back in, we have a rewrite of the second b term as: 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) ( c ( m | h ) ( ( 0 ★ h h ′ g ) h ) − E Θ ( π ¬ h ∙ π ¬ h ′ ) ( 0 ★ h h ′ g ) + E Θ ( π ¬ h ) ( 0 ★ h g ) ) Sticking our rewritten second and third b terms back together, we get 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) times b + m ( 0 ★ h g ) − E Θ ( π ¬ h ) ( 0 ★ h g ) + c ( m | h ) ( ( 0 ★ h h ′ g ) h ) − E Θ ( π ¬ h ∙ π ¬ h ′ ) ( 0 ★ h h ′ g ) + E Θ ( π ¬ h ) ( 0 ★ h g ) = b + m ( 0 ★ h g ) + c ( m | h ) ( ( 0 ★ h h ′ g ) h ) − E Θ ( π ¬ h ∙ π ¬ h ′ ) ( 0 ★ h h ′ g ) Let's examine how to rewrite m ( 0 ★ h g ) + c ( m | h ) ( ( 0 ★ h h ′ g ) h ) It rewrites as m ( 0 ★ h g ) + c ( m | h ) ( ( 0 ★ h h ′ g ) h ) = m ( 0 ★ h g ) + ( m | h ) ( 0 ★ h h ′ g ) = m ( 0 ★ h g ) + m ( ( 0 ★ h h ′ g ) ★ h 0 ) = m ( ( 0 ★ h h ′ g ) ★ h g ) Now, we can go ( 0 ★ h h ′ g ) ★ h g = 0 ★ h h ′ g anyways, our b term in total (both parts) finally rewrites as: 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) ( b + m ( 0 ★ h h ′ g ) − E Θ ( π ¬ h ∙ π ¬ h ′ ) ( 0 ★ h h ′ g ) ) Putting our rewritten measure and rewritten b term back together, it's 1 P g Θ , ( π ¬ h ∙ π ¬ h ′ ) ( h h ′ ) ( c ( m | h h ′ ) , b + m ( 0 ★ h h ′ g ) − E Θ ( π ¬ h ∙ π ¬ h ′ ) ( 0 ★ h h ′ g ) ) Which is exactly what you'd get from pushing ( m , b ) through the single big update function with g , ( π ¬ h ∙ π ¬ h ′ ) , h h ′ . Ok, so we've shown that ( ( Θ | g , π ¬ h , h ) | g h , π ¬ h ′ , h ′ ) ( π p a ) = ( Θ | g , ( π ¬ h ∙ π h ¬ h ′ ) , h h ′ ) ( π p a ) for all π p a , but that's just for the update with renormalization and without closure. How do we show "take the closure at the intermediate step and end" for the two updates and "take the closure at the end" for the big update are the same? Easy. Updates are continuous, so if we take the closure at the end, the preimage (of the final closed set for the second small update) is a closed superset of the image (for the first small update), so taking the closure there adds no new points. So, the closures don't affect anything, and we have our theorem. Theorem 5: Belief Function Bayes: For pseudocausal and acausal hypotheses, if there's some i s.t. Θ i | g , π ¬ h , h exists and is nontrivial, then ( E ζ ( Θ i ) ) R | g , π ¬ h , h = ⎛ ⎜ ⎝ E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) E ζ ( P g Θ i , π ¬ h ( h ) ) ⎞ ⎟ ⎠ R This says that updating a prior works exactly as you'd expect. You rescale every updated component according to its "probability" relative to the "probability" the prior assigns to the observation, and mix them together. Because mixes may not be renormalized, you then just throw in a single scale-and-shift (which doesn't affect things) and you're done. Proof sketch: A mixture of hypotheses, when renormalized, is a hypothesis, and a hypothesis updated, is a hypothesis. Because of consistency, a sufficient test for the two belief functions being equal is if we can show that they're equal for all π , because all lower levels are uniquely generated from that. A further observation we can make is that ( E ζ ( P g Θ i , π ¬ h ( h ) ) ) − 1 is a scaling term, so all we really need to do is to show that ( ( E ζ ( Θ i ) ) R ) | g , π ¬ h , h ) ( π ) = ( E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) ) R ( π ) because the renormalization compensates for the absence of that scale term. The actual proof itself relies on first showing that we have a sufficient condition for the two sets to be well-defined in the form of nontriviality post-update. And then, one of the most aggrivating parts of this proof is keeping track of all the scale-and-shift terms for the updates and renormalization and showing how they all interact, and we spend a while doing that and laying groundwork. The basic proof path is fixing a batch of points in the Θ i and pushing them through one side, and making a batch of points that hit the same resulting point when we push them through the other side. We must show both directions. We can't just say "pushing them through the second process makes the same point" because that's not true, we'll need to exploit upper completion to build a different batch of points to account for Θ i with 0 "probability", because updating crashes there and we "lose" those points. This is another long algebra-grinding proof, like Proposition 11. Proof: First, we should show some details about nontriviality. our original definition was that, for a Θ to be nontrivial, there's a π st. E Θ ( π ) ( 1 ) ≠ E Θ ( π ) ( 0 ) . By Proposition 6 in Section 1, triviality of Θ is equivalent to there being a single minimal point of the form ( 0 , b ) for all Θ ( π ) (b may vary depending on π , though) Now, our starting condition was that there's some Θ i you can update and not have it crash, so that means the E ζ ( P g Θ i , π ¬ h ( h ) ) term is nonzero, so that's one possible source of failure eliminated. Said nontrivial Θ i | g , π ¬ h , h , since it has nonzero "probability" implies that the mixture has some π with different expectation values, so we can safely renormalize the mixture of updated belief functions without running into issues. Also, updating a trivial Θ i makes a trivial Θ i | g , π ¬ h , h , because for all π , Θ i ( π ¬ h ∙ π ) has one minimal point of the form ( 0 , b ) , and everything else is an a-measure added to that, so updating is equivalent to updating ( 0 , b ) and updating your a-measure, so the updated set (without renormalization) has a single minimal point of the form ( 0 , b ) (the measure component being 0 means it can't influence the b term), and then a scale-and-shift means your new set has a single minimal point of the form ( 0 , b ′ ) , ie, your updated Θ i is trivial. So, if there's an i where Θ i | g , π ¬ h , h is nontrivial, then Θ i must be nontrivial. And, by "there's a single nontrivial hypothesis" being a sufficient condition for being able to mix sets and renormalize them, ( E ζ Θ i ) R is well-defined. Admittedly, we haven't touched the update of the renormalized set yet, but we'll address that part later. For now, just remember that the renormalization of E ζ Θ i doesn't crash, and neither does the renormalization of E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) And that's enough for now. Also, since we're working in the nirvana-free setting, we can use Lemma 27 to show that we don't need the closure part of updating. Let I d e f be the subset of the i where P g Θ i , π ¬ h ( h ) > 0 (ie, those where the update is defined) It's nonempty. Now, reindex the probability distribution and hypotheses so 0 ∈ I d e f . For an i ∈ I d e f , let the set { i → } be the largest set of the form { i + 1 , i + 2... } where i + 1 , i + 2... are all not in I d e f . Intuitively, { i → } is the largest contiguous string of numbers after i where P g Θ i , π ¬ h ( h ) is zero if there is such a string. One of the most aggrivating parts of this proof if we don't do some housekeeping work first is keeping track of all the renormalization terms for all the updates and mixtures. Let's introduce some notation for these and derive relationships between them. α 1 : = max π > π ¬ h E ( E ζ Θ i ) R ( π ) ( 1 ★ h g ) and β 1 : = min π > π ¬ h E ( E ζ Θ i ) R ( π ) ( 0 ★ h g ) α 2 : = max π E ( E ζ Θ i ) ( π ) ( 1 ) and β 2 : = min π E ( E ζ Θ i ) ( π ) ( 0 ) α 3 : = max π > π ¬ h E ( E ζ Θ i ) ( π ) ( 1 ★ h g ) and β 3 : = min π > π ¬ h E ( E ζ Θ i ) ( π ) ( 0 ★ h g ) α i : = max π > π ¬ h E Θ i ( π ) ( 1 ★ h g ) and β i : = min π > π ¬ h E Θ i ( π ) ( 0 ★ h g ) And we need to take a moment to note that for the next two, π ′ isn't a normal policy, it's one of those post-update policies that you have to glue to π ¬ h to get an actual policy. α 4 : = max π ′ E ( E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) ) ( π ′ ) ( 1 ) and β 4 : = min π ′ E ( E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) ) ( π ′ ) ( 0 ) 1 α 1 − β 1 and β 1 are the scale-and-shift terms for updating the renormalized mixture of belief functions, 1 α 2 − β 2 and β 2 are the scale-and-shift terms for renormalizing the mixture of belief functions, 1 α 3 − β 3 and β 3 are the scale-and-shift terms for updating the raw mixture of belief functions, 1 α i − β i and β i are the scale-and-shift terms for updating an individual belief function, and 1 α 4 − β 4 and β 4 are the scale-and-shift terms for renormalizing our mixture of updated belief functions. By our earlier considerations about nontriviality, α 4 ≠ β 4 , and α 2 ≠ β 2 , and there's some i where α i ≠ β i (and in particular, 0 is one of those i) We'll show after a bit more work, that α 2 ≠ β 2 and α 3 ≠ β 3 , so none of the scaling terms have a divide-by-zero error except, for some i, α i = β i (maybe) First, let's unpack α 1 and β 1 . α 1 = max π > π ¬ h E ( E ζ Θ i ) R ( π ) ( 1 ★ h g ) = max π > π ¬ h min ( m , b ) ∈ ( E ζ Θ i ) R ( π ) ( m ( 1 ★ h g ) + b ) = max π > π ¬ h min ( m , b ) ∈ ( E ζ Θ i ) ( π ) 1 α 2 − β 2 ( m ( 1 ★ h g ) + b − β 2 ) = 1 α 2 − β 2 ( ( max π > π ¬ h min ( m , b ) ∈ ( E ζ Θ i ) ( π ) ( m ( 1 ★ h g ) + b ) ) − β 2 ) = 1 α 2 − β 2 ( max π > π ¬ h E ( E ζ Θ i ) ( π ) ( 1 ★ h g ) − β 2 ) = 1 α 2 − β 2 ( α 3 − β 2 ) Ok, so we have α 1 = α 3 − β 2 α 2 − β 2 . The exact same argument, just with appropriate terms switched around, establishes that β 1 = β 3 − β 2 α 2 − β 2 Remember, α 2 ≠ β 2 so the scale term doesn't blow up. For the next one, we'll need the crucial fact that if updating fails (ie, α i = β i ), then after raw updating (but before renormalization), for all policies, u g h ( Θ i ) ( π ) has a single minimal point that's of the form ( 0 , β i ) . α 4 = max π ′ E ( E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) ) ( π ′ ) ( 1 ) = max π ′ E ( E ζ ( ( α i − β i ) ( Θ i | g , π ¬ h , h ) ) ) ( π ′ ) ( 1 ) = max π ′ min ( m , b ) ∈ ( E ζ ( ( α i − β i ) ( Θ i | g , π ¬ h , h ) ) ) ( π ′ ) ( m ( 1 ) + b ) = max π ′ E ζ ( α i − β i ) ( min ( m i , b i ) ∈ ( Θ i | g , π ¬ h , h ) ( π ′ ) ( m i ( 1 ) + b i ) ) = max π ′ ( ∑ i ∈ I d e f ζ i ( α i − β i ) ( min ( m i , b i ) ∈ u g h ( Θ i ) ( π ′ ) ( 1 α i − β i m i ( 1 ) + 1 α i − β i ( b i − β i ) ) ) ) = max π ′ ( ∑ i ∈ I d e f ζ i ( min m i , b i ∈ u g h ( Θ i ) ( π ′ ) ( m i ( 1 ) + b i − β i ) ) ) And then, we can use the fact that, if renormalization fails, regardless of the π ′ , u g h ( Θ i ) ( π ′ ) is composed of a single minimal point of the form ( 0 , β i ) to get ∑ i ∉ I d e f ζ i ( min ( m i , b i ) ∈ u g h ( Θ i ) ( π ′ ) ( m i ( 1 ) + b i − β i ) ) = ∑ i ∉ I d e f ζ i ( 0 ( 1 ) + β i − β i ) = 0 And then, adding this in, we get = max π ′ ( ∑ i ζ i ( min m i , b i ∈ u g h ( Θ i ) ( π ′ ) ( m i ( 1 ) + b i − β i ) ) ) = max π > π ¬ h E ζ ( min ( m i , b i ) ∈ Θ i ( π ) ( c ( m i | h ) ( 1 ) + b i + m i ( 0 ★ h g ) − β i ) ) = max π > π ¬ h E ζ ( min ( m i , b i ) ∈ Θ i ( π ) ( m i ( 1 ★ h 0 ) + b i + m i ( 0 ★ h g ) ) ) − E ζ β i = max π > π ¬ h E ζ ( min ( m i , b i ) ∈ Θ i ( π ) ( m i ( 1 ★ h g ) + b i ) ) − E ζ β i = max π > π ¬ h E ζ ( E Θ i ( π ) ( 1 ★ h g ) ) − E ζ β i = max π > π ¬ h E ( E ζ Θ i ) ( π ) ( 1 ★ h g ) − E ζ β i = α 3 − E ζ β i So α 4 = α 3 − E ζ β i and for β 4 , it's the exact same thing and same argument, β 4 = β 3 − E ζ β i Let's verify that α 3 − β 3 ≠ 0 . See that α 3 − β 3 = α 4 − E ζ β i − β 4 + E ζ β i = α 4 − β 4 ≠ 0 (we already know that α 4 ≠ β 4 ) And we can verify that α 1 − β 1 ≠ 0 by α 1 − β 1 = α 3 − β 2 α 2 − β 2 − β 3 − β 2 α 2 − β 2 = α 3 − β 2 − β 3 + β 2 α 2 − β 2 = α 3 − β 3 α 2 − β 2 ≠ 0 (we already know that α 3 − β 3 ≠ 0 , we just showed it, and we know that α 2 − β 2 ≠ 0 so that scale term doesn't crash) We'll show two directions of the proof. The first direction  is, we take a bunch of ( m i , b i ) ∈ Θ i ( π ¬ h ∙ π ) and feed them through the second process (update, mix with corrected probabilities, then renormalize), then show we can craft a bunch of ( m ′ i , b ′ i ) ∈ Θ i ( π ¬ h ∙ π ) that, when fed through the first process (mix, renormalize, then update as a whole), produce the same point. Feeding our ( m i , b i ) ∈ Θ i ( π ¬ h ∙ π ) through the updates produce the points: 1 α i − β i ( c ( m i | h ) , b i + m i ( 0 ★ h g ) − β i ) Well, only for i ∈ I d e f . Otherwise the update crashes. Mixing them produces: ∑ i ∈ I d e f ζ i ( α i − β i ) 1 α i − β i ( c ( m i | h ) , b i + m i ( 0 ★ h g ) − β i ) Which cancels to make: ∑ i ∈ I d e f ζ i ( c ( m i | h ) , b i + m i ( 0 ★ h g ) − β i ) This can be reexpressed as: ( ∑ i ∈ I d e f ζ i c ( m i | h ) , ∑ i ∈ I d e f ζ i ( b i + m i ( 0 ★ h g ) − β i ) ) And now, post-renormalization for the mixture, we get: 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i c ( m i | h ) , ∑ i ∈ I d e f ζ i ( b i + m i ( 0 ★ h g ) − β i ) − β 4 ) Our task is now to hit that exact point by feeding some appropriate batch of points through the mix, renormalization, and then update. If i ∈ I d e f , then let ( m ′ i , b ′ i ) = ( m i , b i ) . Otherwise, let ( m ′ i , b ′ i ) be some suitable point that raw-updates to ( 0 , β i ) . In particular this means that m ′ i | h = 0 and b ′ i + m ′ i ( 0 ★ h g ) = β i . Anyways, mixing the ( m ′ i , b ′ i ) and renormalizing produces 1 α 2 − β 2 ( E ζ m ′ i , E ζ b ′ i − β 2 ) Then, updating produces 1 α 1 − β 1 ( c ( ( 1 α 2 − β 2 E ζ m ′ i ) | h ) , 1 α 2 − β 2 ( E ζ ( b ′ i ) − β 2 ) + 1 α 2 − β 2 ( E ζ m ′ i ) ( 0 ★ h g ) − β 1 ) Now we must show that this is equal to 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i c ( m i | h ) , ∑ i ∈ I d e f ζ i ( b i + m i ( 0 ★ h g ) − β i ) − β 4 ) Let's begin. First, we can reexpress as: 1 ( α 1 − β 1 ) ( α 2 − β 2 ) ( c ( ( E ζ m ′ i ) | h ) , E ζ b ′ i − β 2 + ( E ζ m ′ i ) ( 0 ★ h g ) − ( α 2 − β 2 ) β 1 ) = 1 ( α 1 − β 1 ) ( α 2 − β 2 ) ( E ζ c ( m ′ i | h ) , E ζ b ′ i − β 2 + E ζ ( m ′ i ( 0 ★ h g ) ) − ( α 2 − β 2 ) β 1 ) And now, since α 1 = α 3 − β 2 α 2 − β 2 and β 1 = β 3 − β 2 α 2 − β 2 , we can simplify ( α 1 − β 1 ) ( α 2 − β 2 ) as α 3 − β 3 , and simplify ( α 2 − β 2 ) β 1 as β 3 − β 2 , to rewrite as = 1 α 3 − β 3 ( E ζ c ( m ′ i | h ) , E ζ ( b ′ i + m ′ i ( 0 ★ h g ) ) − β 3 ) Then, exploit the fact that for i ∉ I d e f , c ( m ′ i | h ) = 0 , and b ′ i + m ′ i ( 0 ★ h g ) = β i and otherwise m ′ i = m i , b ′ i = b i to get = 1 α 3 − β 3 ( ∑ i ∈ I d e f ζ i c ( m i | h ) , ∑ i ∈ I d e f ζ i ( b i − m i ( 0 ★ h g ) ) + ∑ i ∉ I d e f ζ i β i − β 3 ) One more step needed. We know that β 3 = E ζ β i + β 4 , so rearranging this produces ∑ i ∉ I d e f ζ i β i − β 3 = − ∑ i ∈ I d e f ζ i β i − β 4 , and making that substitution we get = 1 α 3 − β 3 ( ∑ i ∈ I d e f ζ i c ( m i | h ) , ∑ i ∈ I d e f ζ i ( b i − m i ( 0 ★ h g ) − β i ) − β 4 ) Almost there, one more step. We know that α 3 = E ζ β i + α 4 and β 3 = E ζ β i + β 4 so α 3 − β 3 = α 4 − β 4 , yielding = 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i c ( m i | h ) , ∑ i ∈ I d e f ζ i ( b i − m i ( 0 ★ h g ) − β i ) − β 4 ) So, pushing a collection of points through the updates individually and mixing with corrected probabilities and renormalizing can be replicated by mixing a different batch of points in the Θ i ( π ¬ h ∙ π ) first, renormalizing, and updating, establishing that ( ( E ζ ( Θ i ) ) R ) | g , π ¬ h , h ) ( π ) ⊇ ( E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) ) R ( π ) That just leaves the other direction. This time we'll be using ( m i , b i ) for stuff in the Θ i ( π ¬ h ∙ π ) sets that are pushed through "mix, renormalize, update", and ( m ′ i , b ′ i ) , i ∈ I d e f for points in Θ i ( π ¬ h ∙ π ) that are pushed through "update, mix with corrected probabilities, renormalize", to attempt to hit the same point. Ok, let's express our point of interest to hit in terms of the ( m i , b i ) . First, mixing the ( m i , b i ) and renormalizing produces 1 α 2 − β 2 ( E ζ m i , E ζ b i − β 2 ) Then, updating produces 1 α 1 − β 1 ( c ( ( 1 α 2 − β 2 E ζ m i ) | h ) , 1 α 2 − β 2 ( E ζ ( b i ) − β 2 ) + 1 α 2 − β 2 ( E ζ m i ) ( 0 ★ h g ) − β 1 ) = 1 ( α 1 − β 1 ) ( α 2 − β 2 ) ( c ( ( E ζ m i ) | h ) , E ζ b i − β 2 + ( E ζ m i ) ( 0 ★ h g ) − ( α 2 − β 2 ) β 1 ) = 1 ( α 1 − β 1 ) ( α 2 − β 2 ) ( E ζ c ( m i | h ) , E ζ b i − β 2 + E ζ ( m i ( 0 ★ h g ) ) − ( α 2 − β 2 ) β 1 ) And now, since α 1 = α 3 − β 2 α 2 − β 2 and β 1 = β 3 − β 2 α 2 − β 2 , we can simplify ( α 1 − β 1 ) ( α 2 − β 2 ) as α 3 − β 3 , and simplify ( α 2 − β 2 ) β 1 as β 3 − β 2 , to rewrite as = 1 α 3 − β 3 ( E ζ c ( m i | h ) , E ζ ( b i + m i ( 0 ★ h g ) ) − β 3 ) Now, let's define our ( m ′ i , b ′ i ) , when i ∈ I d e f (to have them not get canceled out of existence by an undefined update/multiplication-by-zero) m ′ i : = m i + ∑ j ∈ { i → } ζ j ζ i ( m j | h ) b ′ i : = b i + ∑ j ∈ { i → } ζ j ζ i ( b j + m j ( 0 ★ h g ) − β j ) What this essentially does is take ( m i , b i ) and adds a specially chosen a-measure to it, getting another point in the same set by upper-completion. Because ζ i is nonzero, and the mixture of the ( m i , b i ) converges, the scale term doesn't affect the fact that this partial sum converges. Adding in the expectation-of-function terms doesn't affect convergence, and it's a sum of scaled a-measures because b j + m j ( 0 ★ h g ) − β j is just the b term of the raw update of ( m j , b j ) but shifted down, ie, nonnegative. This may appear a bit mysterious, but the rationale behind it is "dang, we're only summing up over i ∈ I d e f , we need to take our "missing" ( m j , b j ) , and stash them in our "safe" i somehow (via the wiggle room we get from upper-completion) so they can manifest post-update" Feeding our ( m ′ i , b ′ i ) ∈ Θ i ( π ¬ h ∙ π ) through the updates produce the points: 1 α i − β i ( c ( m ′ i | h ) , b ′ i + m ′ i ( 0 ★ h g ) − β i ) But only for i ∈ I d e f . Mixing them produces the point: ∑ i ∈ I d e f ζ i ( α i − β i ) 1 α i − β i ( c ( m ′ i | h ) , b ′ i + m ′ i ( 0 ★ h g ) − β i ) Which cancels to make: ∑ i ∈ I d e f ζ i ( c ( m ′ i | h ) , b ′ i + m ′ i ( 0 ★ h g ) − β i ) This can be reexpressed as: ( c ( ∑ i ∈ I d e f ( ζ i m ′ i ) | h ) , ∑ i ∈ I d e f ζ i ( b i + m i ( 0 ★ h g ) − β i ) ) And now, post-renormalization for the mixture, we get: 1 α 4 − β 4 ( c ( ∑ i ∈ I d e f ( ζ i m ′ i ) | h ) , ∑ i ∈ I d e f ζ i ( b ′ i + m ′ i ( 0 ★ h g ) − β i ) − β 4 ) Substituting in our definition of m ′ i and b ′ i we have (all this is one term, we had to break it up) 1 α 4 − β 4 ( c ( ∑ i ∈ I d e f ( ζ i ( m i + ∑ j ∈ { i → } ζ j ζ i ( m j | h ) ) ) | h ) ) 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i ( b i + ∑ j ∈ { i → } ζ j ζ i ( b j + m j ( 0 ★ h g ) − β j ) ) ) + 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i ( ( m i + ∑ j ∈ { i → } ζ j ζ i ( m j | h ) ) ( 0 ★ h g ) − β i ) − β 4 ) Simplifying the measure term, we get: 1 α 4 − β 4 ( c ( ∑ i ∈ I d e f ( ζ i ( m i + ∑ j ∈ { i → } ζ j ζ i ( m j | h ) ) ) | h ) ) = 1 α 4 − β 4 ( c ( ∑ i ∈ I d e f ( ζ i m i + ∑ j ∈ { i → } ζ j ( m j | h ) ) | h ) ) = 1 α 4 − β 4 ( c ( ∑ i ∈ I d e f ( ζ i ( m i | h ) + ∑ j ∈ { i → } ζ j ( ( m j | h ) | h ) ) ) ) = 1 α 4 − β 4 ( ∑ i ∈ I d e f ( ζ i c ( m i | h ) + ∑ j ∈ { i → } ζ j c ( m j | h ) ) ) = 1 α 4 − β 4 ( ∑ i ζ i c ( m i | h ) ) = 1 α 4 − β 4 ( E ζ c ( m i | h ) ) Ok, that's the measure-term simplified. Now let's look at the first b term. 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i ( b i + ∑ j ∈ { i → } ζ j ζ i ( b j + m j ( 0 ★ h g ) − β j ) ) ) = 1 α 4 − β 4 ( ∑ i ∈ I d e f ( ζ i b i + ∑ j ∈ { i → } ζ j ( b j + m j ( 0 ★ h g ) − β j ) ) ) = 1 α 4 − β 4 ( ∑ i ζ i b i + ∑ i ∉ I d e f ζ i ( m i ( 0 ★ h g ) − β j ) ) = 1 α 4 − β 4 ( E ζ b i + ∑ i ∉ I d e f ζ i ( m i ( 0 ★ h g ) ) − ∑ i ∉ I d e f ζ i β i ) And now let's look at the second b term. 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i ( ( m i + ∑ j ∈ { i → } ζ j ζ i ( m j | h ) ) ( 0 ★ h g ) − β i ) − β 4 ) = 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i ( m i ( 0 ★ h g ) + ( ∑ j ∈ { i → } ζ j ζ i ( ( m j | h ) ( 0 ★ h g ) ) ) − β i ) − β 4 ) = 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i ( m i ( 0 ★ h g ) − β i ) − β 4 ) (this previous step is because 0 ★ h g is 0 on histories with h as a prefix, and m j | h is only supported on histories with h as a prefix, so the expectation is 0, and this extends to the sum of expectations) = 1 α 4 − β 4 ( ∑ i ∈ I d e f ζ i ( m i ( 0 ★ h g ) ) − ∑ i ∈ I d e f ζ i β i − β 4 ) Uniting our two rewritten b terms, we get: = 1 α 4 − β 4 ( E ζ b i + ∑ i ζ i ( m i ( 0 ★ h g ) ) − ∑ i ζ i β i − β 4 ) = 1 α 4 − β 4 ( E ζ ( b i + m i ( 0 ★ h g ) ) − E ζ β i − β 4 ) and uniting this with our rewritten measure term, we get: 1 α 4 − β 4 ( E ζ c ( m i | h ) , E ζ ( b i + m i ( 0 ★ h g ) ) − E ζ β i − β 4 ) Now, let's compare against = 1 α 3 − β 3 ( E ζ c ( m i | h ) , E ζ ( b i + m i ( 0 ★ h g ) ) − β 3 ) We already know from our earlier results on α and β that α 4 − β 4 = α 3 − β 3 , and that − β 3 = − β 4 − E ζ β i , so our equivalence is complete. So, mixing a batch of points in the Θ i ( π ¬ h ∙ π ) , renormalizing, and updating, can be replicated by pushing a different collection of points through the updates individually and mixing with corrected probabilities and renormalizing, establishing that for all π ( ( E ζ ( Θ i ) ) R ) | g , π ¬ h , h ) ( π ) ⊆ ( E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) ) R ( π ) So, we have that, for all π ( ( E ζ ( Θ i ) ) R ) | g , π ¬ h , h ) ( π ) = ( E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) ) R ( π ) = ⎛ ⎜ ⎝ E ζ ( P g Θ i , π ¬ h ( h ) ⋅ ( Θ i | g , π ¬ h , h ) ) E ζ P g Θ i , π ¬ h ( h ) ⎞ ⎟ ⎠ R ( π ) And we have our result now. Theorem 6: Dynamic Consistency: Given a hypothesis Θ (causal, pseudocausal, acausal, surcausal), and an arbitrary policy π and utility function U , then, with π h being the continuation of π post-update and π ∗ being such that E ( Θ | U , π ¬ h , h ) ( π h ) ( U h ) ⪋ E ( Θ | U , π ¬ h , h ) ( π ∗ ) ( U h ) , then E Θ ( π ) ( U ) ⪋ E Θ ( π ¬ h ∙ π ∗ ) ( U ) Proof sketch: We'll need to shatter this into two parts. The first part is if the update is undefined. Then the agent gives up and cries, and all policies are equally good. So we have to show that regardless of what the agent does after h, then it matches the performance of the original policy. The second part is showing the result for a well-defined update. It's mostly shuffling equations around. For the first part, updates fail exactly when, for all policies, u U h ( Θ ) ( π ) ∩ N F has a single minimal point of the form ( 0 , β ) (same β for all policies). We'll be using this. Also, π h will be used to denote what the policy π does after observation h, so we have π = π ¬ h ∙ π h . E Θ ( π ) ( U ) = min ( m , b ) ∈ Θ ( π ) ∩ N F ( m ( U ) + b ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( m ( U ) + b ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( m ( U ★ h 0 ) + b + m ( 0 ★ h U ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( ( m | h ) ( U ) + b + m ( 0 ★ h U ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( c ( m | h ) ( U h ) + b + m ( 0 ★ h U ) ) = min ( m , b ) ∈ u U h ( Θ ) ( π h ) ∩ N F ( m ( U h ) + b ) = β = min ( m , b ) ∈ u U h ( Θ ) ( π ∗ ) ∩ N F ( m ( U h ) + b ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( c ( m | h ) ( U h ) + b + m ( 0 ★ h U ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( ( m | h ) ( U ) + b + m ( 0 ★ h U ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( m ( U ★ h 0 ) + b + m ( 0 ★ h U ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( m ( U ) + b ) = E Θ ( π ¬ h ∙ π ∗ ) ( U ) And we're done, E Θ ( π ) ( U ) = E Θ ( π ¬ h ∙ π ∗ ) ( U ) Now for the case where the update actually goes through. 1 P U π ¬ h , h ( h ) ( E Θ ( π ) ( U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ) ∩ N F ( m ( U ) + b ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( m ( U ) + b ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( m ( U ★ h 0 ) + b + m ( 0 ★ h U ) ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( ( m | h ) ( U ) + b + m ( 0 ★ h U ) ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( c ( m | h ) ( U h ) + b + m ( 0 ★ h U ) ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π h ) ∩ N F ( 1 P U π ¬ h , h ( h ) ( c ( m | h ) ( U h ) + b + m ( 0 ★ h U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) ) = min ( m , b ) ∈ ( Θ | U , π ¬ h , h ) ( π h ) ( m ( U h ) + b ) = E ( Θ | U , π ¬ h , h ) ( π h ) ( U h ) ⪋ E ( Θ | U , π ¬ h , h ) ( π ∗ ) ( U h ) = min ( m , b ) ∈ ( Θ | U , π ¬ h , h ) ( π ∗ ) ( m ( U h ) + b ) = min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( 1 P U π ¬ h , h ( h ) ( c ( m | h ) ( U h ) + b + m ( 0 ★ h U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( c ( m | h ) ( U h ) + b + m ( 0 ★ h U ) ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( ( m | h ) ( U ) + b + m ( 0 ★ h U ) ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( m ( U ★ h 0 ) + b + m ( 0 ★ h U ) ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( min ( m , b ) ∈ Θ ( π ¬ h ∙ π ∗ ) ∩ N F ( m ( U ) + b ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) = 1 P U π ¬ h , h ( h ) ( E Θ ( π ¬ h ∙ π ∗ ) ( U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) so we know 1 P U π ¬ h , h ( h ) ( E Θ ( π ) ( U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) ⪋ 1 P U π ¬ h , h ( h ) ( E Θ ( π ¬ h ∙ π ∗ ) ( U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ) So E Θ ( π ) ( U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) ⪋ E Θ ( π ¬ h ∙ π ∗ ) ( U ) − E Θ ( π ¬ h ) ( 0 ★ h U ) and we can finish up and get dynamic consistency. E Θ ( π ) ( U ) ⪋ E Θ ( π ¬ h ∙ π ∗ ) ( U ) Theorem 7: Maximin UDT: Translating a set S of policy selection environments with a bounded modulus of continuity to an acausal hypothesis Θ always works. Also, for all utility functions U , argmax π inf e ∈ S E π ⋅ e ( U ) = argmax π E Θ ( π ) ( U ) Ok, so a policy selection environment e is a continuous (in the policy) function ( A × O ) < ω × Π → Δ O If you really want, like, for the planting flowers problem, you can have some probability of nonexistence that's policy-dependent, and a backup utility in case of nonexistence, though both still must be continuous in policy, by going "ok, there's a primordial event that leads to either the distribution starting, or I get event ⊥ with b ≤ 1 utility", this can be crammed into the necessary framework. A policy selection environment looks at what has happened thus far, and your policy, and picks some distribution over observations. For a single policy-selection environment, π → π ⋅ e is uniformly continuous. This is because, if you fix a time length t, there's finitely many histories of length t or less. For each of these histories, there's a δ where two policies identical up till time log γ ( δ ) produce only an ϵ change in Δ O (continuity means that different policies that are identical up till some sufficiently long time induce only a small change in what happens now). So, we can go "policies π , π ′ that identical up till some stupidly long time mean that, for the first t steps, there's very little change in what happens". t can be made as long as we wish, and ϵ can be made as low as we wish, so for all ϵ , there some δ where, if d ( π , π ′ ) < δ , then π ⋅ e and π ′ ⋅ e are within ϵ of each other. Bounded modulus of uniform continuity means that there's a single δ / ϵ function that works for all your policy selection environments of interest. Ie, no matter which environment was selected, you know how long policies need to be identical for to make only an ϵ difference in the resulting distribution over histories. Encode each π ⋅ e history distribution as having λ = 1 and b = 0 Considering the set of ( π ⋅ e , 0 ) points as points for Θ ? ω ( π ) , we have argmax π inf e ∈ S E π ⋅ e ( U ) = argmax π inf { π ⋅ e } : e ∈ S ( E e ⋅ π ( U ) + 0 ) = argmax π inf ( m , b ) ∈ Θ ? ω ( π ) ( m ( U ) + b ) We do need to show that Θ ? ω fulfills the essential properties for being able to turn it into an acausal hypothesis via Proposition 2. There's four. Nonemptiness, restricted-minimals, Hausdorff-continuity, and renormalization not failing. Nonemptiness is trivial. Restricted-minimals is easy because every point in Θ ? ω ( π ) , regardless of π , has λ = 1 and b = 0 . Hausdorff-continuity can be shown by the set of environments having a bounded modulus of continuity, so given any ( π ⋅ e , 0 ) ∈ Θ ? ω ( π ) , we can reuse that e and there's a δ where d ( ( π ⋅ e , 0 ) , ( π ′ ⋅ e , 0 ) ) = d ( π ⋅ e , π ′ ⋅ e ) < ϵ , and ( π ′ ⋅ e , 0 ) ∈ Θ ? ω ( π ′ ) , so Hausdorff-continuity follows. That just leaves being normalizable. This occurs if there's a nontrivial Θ ? ω ( π ) , ie, E Θ ω ( π ) ( 1 ) ≠ E Θ ω ( π ) ( 0 ) . This is obviously true, because the former is "minimal value of λ + b (always 1)", and the latter is "minimal value of b" (always 0). So, by proposition 2, we create an acausal Θ ω hypothesis from our Θ ? ω . From proposition 5, we then get argmax π inf ( m , b ) ∈ Θ ? ω ( π ) ( m ( U ) + b ) = argmax π min ( m , b ) ∈ Θ ω ( π ) ( m ( U ) + b ) And then, since we have an acausal infinitary hypothesis, we can use the Isomorphism theorem to get that Θ ( π ) = Θ ω ( π ) , so argmax π min ( m , b ) ∈ Θ ω ( π ) ( m ( U ) + b ) = argmax π min ( m , b ) ∈ Θ ( π ) ( m ( U ) + b ) And finally, we can wrap up with Proposition 5 that said argmax set of policies actually exists, showing argmax π inf e ∈ S E π ⋅ e ( U ) = argmax π min ( m , b ) ∈ Θ ( π ) ( m ( U ) + b ) = argmax π E Θ ( π ) ( U ) And we're done with UDT-copying. And, if you want, you can translate it into a surcausal hypothesis, and into a set of a-survironments from there. Proposition 12: If the collection of hypotheses Θ i is learnable, then any Infrabayes-optimal policy family for a prior on them also learns the collection of hypotheses as well. First, we'll recap learnability. Learnability of a countable collection of belief functions by a γ -indexed family of policies π γ is the condition that for each Θ i , regret limits to 0. (we'll use U γ for our utility function with time-discount parameter γ ) Ie, ∀ i : lim γ → 1 ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) − E Θ i ( π γ ) ( U γ ) ) = 0 So, in the low-time-discount limit, you get a score arbitrarily close to that of an optimal agent that knows exactly what environment it's playing against. An Infrabayes-optimal policy family for a prior/mixture of belief functions is one where π ∗ γ ∈ argmax π E ( E ζ Θ i ) R ( π ) ( U γ ) Such an argmax set exists by Proposition 5. Further, any scale-and-shift just does a scale-and-shift on the values a policy will achieve and leaves the argmax set alone, so we could get an alternate representation as: π ∗ γ ∈ argmax π E ( E ζ Θ i ) ( π ) ( U γ ) So, assume that a countable family of belief functions paired with a utility function U is learnable by some family of policies π γ . We'll show that it's also learnable by any bayes-optimal π ∗ γ family for the prior ( E ζ Θ i ) R . First, π γ learns the family of hypotheses, ∀ i : lim γ → 1 ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) − E Θ i ( π γ ) ( U γ ) ) = 0 This implies lim γ → 1 E ζ ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) − E Θ i ( π γ ) ( U γ ) ) = 0 Because you only have to go finitely far out to nab all but ϵ of the probability mass of the expectation, and you can pick some γ extremely close to 1 that ensures that all those finitely many environments have ϵ or less regret. We can now move the expectation inside to get: lim γ → 1 ( E ζ ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) ) − E ζ ( E Θ i ( π γ ) ( U γ ) ) ) = 0 lim γ → 1 ( E ζ ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) ) − E ( E ζ Θ i ) ( π γ ) ( U γ ) ) = 0 Now, E ( E ζ Θ i ) ( π γ ) ( U γ ) ≤ E ( E ζ Θ i ) ( π ∗ γ ) ( U γ ) because π ∗ γ is optimal for the prior, so it's optimal for any rescaled version. So, lim γ → 1 ( E ζ ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) ) − E ( E ζ Θ i ) ( π ∗ γ ) ( U γ ) ) = 0 lim γ → 1 ( E ζ ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) ) − E ζ ( E Θ i ( π ∗ γ ) ( U γ ) ) ) = 0 lim γ → 1 E ζ ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) − E Θ i ( π ∗ γ ) ( U γ ) ) = 0 Now, symmetrically, if π ∗ γ doesn't limit to 0 regret on all belief functions, then the expectation doesn't limit to 0 either. ∀ i : lim γ → 1 ( max π ∗ ( E Θ i ( π ∗ ) ( U γ ) ) − E Θ i ( π ∗ γ ) ( U γ ) ) = 0 and we have shown that our arbitrary Infrabayes-optimal family of policies learns the environments. Complete Class Theorem Weak Version: Given any pareto-optimal policy π , then there is an infradistribution H over states, where ∀ π ′ : f π ′ ≠ f π : E H ( f π ) > E H ( f π ′ ) Proof sketch: Because we are able to translate from concave lipschitz monotone normalized functionals over [ 0 , 1 ] S to infradistributions over states, we just have to get a concave lipschitz monotone functional where our policy π is optimal, and then it can be normalized back up to 1, and then it can be turned into an infradistribution over states by LF-duality. Said concave lipschitz monotone functional is: h ( f ) : = min s ∈ S ( f ( s ) − E o ∼ o b ( s ) P ( s , π ( o ) ) ) We just need to show that the function is indeed concave, Lipschitz, monotone, and assigns no policy a higher expectation value than the Pareto-optimal policy, because all these properties are preserved by a scale-and-shift. Proof of Lipschitzness: If you perturb f by ϵ or less in all states, then this only affects the minimal value by ϵ or less, so we actually have a Lipschitz constant of 1. Proof of monotonicity: If f matches or outperforms f ′ in all states, than the possible values that min is picking amongst all went up, so f gets an equal or higher value, showing monotonicity. Proof of concavity: h ( p f + ( 1 − p ) f ′ ) = min s ∈ S ( ( p f + ( 1 − p ) f ′ ) ( s ) − E o ∼ o b ( s ) P ( s , π ( o ) ) ) = min s ∈ S ( p f ( s ) + ( 1 − p ) f ′ ( s ) − p E o ∼ o b ( s ) P ( s , π ( o ) ) − ( 1 − p ) E o ∼ o b ( s ) P ( s , π ( o ) ) ) ≥ min s ∈ S ( p f ( s ) − p E o ∼ o b ( s ) P ( s , π ( o ) ) ) + min s ∈ S ( ( 1 − p ) f ′ ( s ) − ( 1 − p ) E o ∼ o b ( s ) P ( s , π ( o ) ) ) = p min s ∈ S ( f ( s ) − E o ∼ o b ( s ) P ( s , π ( o ) ) ) + ( 1 − p ) min s ∈ S ( f ′ ( s ) − E o ∼ o b ( s ) P ( s , π ( o ) ) ) = p h ( f ) + ( 1 − p ) h ( f ′ ) Proof of π getting the optimal value: π is on the pareto-frontier, so there is no other policy π ′ that gets equal-or-greater value in all states. Thus, given any other π ′ , there is a state in which it underperforms the reward of π in that state, so the quantity is negative. And for π itself, it obviously matches the behavior of π in all states, so it gets a value of 0. Thus, π gets the strictly optimal score amongst policies against this h , so the same holds after renormalization, and then the same holds for the expectation values w.r.t. the infradistribution.