We introduce a reinforcement-like learning setting we call Delegative Inverse Reinforcement Learning (DIRL). In DIRL, the agent can, at any point of time, delegate the choice of action to an "advisor". The agent knows neither the environment nor the reward function, whereas the advisor knows both. Thus, DIRL can be regarded as a special case of CIRL. A similar setting was studied in Clouse 1997 , but as far as we can tell, the relevant literature offers few theoretical results and virtually all researchers focus on the MDP case ( please correct me if I'm wrong ). On the other hand, we consider general environments (not necessarily MDP or even POMDP) and prove a natural performance guarantee. The use of an advisor allows us to kill two birds with one stone: learning the reward function and safe exploration (i.e. avoiding both the Scylla of " Bayesian paranoia " and the Charybdis of falling into traps). We prove that, given certain assumption about the advisor, a Bayesian DIRL agent (whose prior is supported on some countable set of hypotheses) is guaranteed to attain most of the value in the slow falling time discount (long-term planning) limit (assuming one of the hypotheses in the prior is true). The assumption about the advisor is quite strong, but the advisor is not required to be fully optimal: a "soft maximizer" satisfies the conditions. Moreover, we allow for the existence of "corrupt states" in which the advisor stops being a relevant signal, thus demonstrating that this approach can deal with wireheading and avoid manipulating the advisor, at least in principle (the assumption about the advisor is still unrealistically strong). Finally we consider advisors that don't know the environment but have some beliefs about the environment, and show that in this case the agent converges to Bayes-optimality w.r.t. the advisor's beliefs, which is arguably the best we can expect. All the proofs are in the Appendix. Notation The set of natural numbers N is defined to begin from 0. Given n ∈ N , [ n ] denotes the set { m ∈ N ∣ m < n } . Given a logical formula φ , [ [ φ ] ] ∈ { 0 , 1 } denotes its truth value. Given a set X , we denote X ∗ : = ⨆ n ∈ N X n , the set of finite strings over the alphabet X . The unique string of length 0 is denoted λ . We also denote by X ω the set of infinite strings over alphabet X . Given α ∈ X ∗ ⊔ X ω and n ∈ N , α n ∈ X is the n -th symbol in α (i.e. α = α 0 α 1 α 2 … ) and α : n ∈ X ∗ is the prefix of length n of α (ending in α n − 1 ). Given α , β ∈ X ∗ , | α | ∈ N is the length of α and α β ∈ X ∗ is the concatenation of α and β . The latter notation is also applicable when β ∈ X ω . The notation α ⊑ β means that α is a prefix of β . Given sets X , Y , x ∈ X and y ∈ Y , we sometimes use the notation x y = ( x , y ) ∈ X × Y . Given α ∈ ( X × Y ) ∗ , and n ∈ N , α : n + 1 / 2 ∈ ( X × Y ) ∗ × X is defined by α : n + 1 / 2 = ( α : n , x ) where α n = ( x , y ) . Given sets A and B , the notation f : A ∘ → B means that f is a partial mapping from A to B , i.e. a mapping from some set dom f ⊆ A to B . Given a topological space A , Δ A is the space of Borel probability measures on A . When no topology is specified, A is understood to be discrete: in this case, μ ∈ Δ A can also be regarded as a function from A to [ 0 , 1 ] . The space X ω is understood to have the product topology. Given topological spaces A , B , μ ∈ Δ A and ν ∈ Δ B , supp μ ⊆ A is the support of μ and μ × ν ∈ Δ ( A × B ) is the product measure. Given K a Markov kernel from A to B , μ ⋉ A ∈ Δ ( A × B ) is the semidirect product of μ and K . When A and B are discrete, H ( μ ) is the Shannon entropy of μ (in natural base) and D K L ( μ ∥ ν ) is the Kullback-Leibler divergence from ν to μ . Given d ∈ N and x ∈ R d , we use the notation ∥ x ∥ 1 : = ∑ i < d | x i | ∥ x ∥ ∞ : = max i < d | x i | The symbols o , O , ω , Ω , Θ will refer to usual O -notation. Results An interface I = ( A , O ) is a pair of finite sets  ("actions" and "observations"). An I - policy is a function π : ( A × O ) ∗ → Δ A . An I - environment is a partial function μ : ( A × O ) ∗ × A ∘ → Δ O s.t. i. λ × A ⊆ dom μ ii. Given h ∈ ( A × O ) ∗ and a o b ∈ A × O × A , h a o b ∈ dom μ iff h a ∈ dom μ and μ ( h a ) ( o ) > 0 . It is easy to see that dom μ is always of the form X × A for some X ⊆ ( A × O ) ∗ . We denote hdom μ : = X . Given an I -policy π and an I -environment μ , we get μ ⋈ π ∈ Δ ( A × O ) ω in the usual way. An I - reward function is a partial function r : ( A × O ) ∗ ∘ → [ 0 , 1 ] . An I - universe is a pair ( μ , r ) where μ is an I -environment and r is an I -reward function s.t. dom r ⊇ hdom μ . We denote the space of I -universes by Υ I . Given an I -reward function r and t ∈ ( 0 , ∞ ) , we have the associated utility function U r t : ( A × O ) ω ∘ → [ 0 , 1 ] defined by U r t ( x ) : = ∑ ∞ n = 0 e − n / t r ( x : n ) ∑ ∞ n = 0 e − n / t Here and throughout, we use geometric time discount, however this choice is mostly for notational simplicity. More or less all results carry over to other shapes of the time discount function. Denote Π I \ the space of I -policies. An I - metapolicy is a family { π t ∈ Π I } t ∈ ( 0 , ∞ ) , where the parameter t is thought of as setting the scale of the time discount. An I - meta-universe is a family { υ t ∈ Υ } t ∈ ( 0 , ∞ ) . This latter concept is useful for analyzing multi-agent systems, where the environment contains other agents and we study the asymptotics when all agents' time discount scales go to infinity. We won't focus on the multi-agent case in this essay, but for future reference, it seems useful to make sure the results hold in the greater generality of meta-universes. Given an I -policy π , an I -universe υ and t > 0 , we denote EU π υ ( t ) : = E μ ⋈ π [ U r t ] (this is well-defined since U r t is defined on the support of μ ⋈ π ). We also denote EU ∗ υ ( t ) : = max π ∈ Π I EU π υ ( t ) . We will omit I when it is obvious from the context. Definition 1 Fix an interface I . Consider π ∗ a metapolicy and H a set of meta-universes. π ∗ is said to learn H when for any υ ∈ H lim t → ∞ ( EU ∗ υ t ( t ) − EU π ∗ t υ t ( t ) ) = 0 H is said to be learnable when there exists π ∗ that learns H . Our notion of learnability is closely related to the notion of sublinear regret , as defined in Leike 2016 , except that we allow the policy to explicitly depend on the time discount scale. This difference is important: for example, given a single universe υ , it might be impossible to achieve sublinear regret, but { υ } is always learnable. Proposition 1 Fix an interface I . Consider H a countable learnable set of meta-universes. Consider any ζ ∈ Δ H s.t. supp ζ = H . Consider π ζ a ζ -Bayes optimal metapolicy, i.e. π ζ t ∈ a r g m a x π ∈ Π E υ ∼ ζ [ EU π υ t ( t ) ] Then, π ζ learns H . Proposition 1 can be regarded as a "frequentist" justification for Bayesian agents: if any metapolicy is optimal in a "frequentist" sense for the class H (i.e. learns it), then the Bayes optimal metapolicy is such. Another handy property of learnability is the following. Proposition 2 Fix an interface I . Let H be a countable set of meta-universes s.t. any finite G ⊆ H is learnable. Then, H is learnable. We now introduce the formalism needed to discuss advisors. Define ¯ A : = A ⊔ { ⊥ } , ¯ O : = ¯ A × O and ¯ I : = ( ¯ A , ¯ O ) . Here, the ¯ A factor of ¯ O is the action taken by the advisor, assumed to be observable by the agent. The environments we will consider are s.t. this action is ⊥ unless the agent delegated to the advisor at this point of time, which is specified by the agent taking action ⊥ . It will also be the case that whenever the agent takes action ⊥ , the advisor cannot take action ⊥ . Denote ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O : = ¯ A × ¯ O ∖ { ⊥ ⊥ o ∣ o ∈ O } . Given a b o ∈ ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O , we define a b o – –– – ∈ A × O by a b o – –– – : = { a o if a ≠ ⊥ b o if a = ⊥ Given h ∈ ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ∗ , we define h – – ∈ ( A × O ) ∗ by h – – n : = h n – – – . Definition 2 An ¯ I -policy α is said to be autonomous when for any h ∈ ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ∗ , α ( h ) ( ⊥ ) = 0 . Consider an I -environment μ and an autonomous ¯ I -policy α , which we think of as the advisor policy. We define the ¯ I -environment ¯ μ [ α ] as follows. For any h ∈ ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ∗ s.t. h – – ∈ hdom μ , a , b ∈ ¯ A and o ∈ O : ¯ μ [ α ] ( h a ) ( b o ) : = ⎧ ⎨ ⎩ μ ( h – – a ) ( o ) if a ≠ ⊥ , b = ⊥ α ( h ) ( b ) ⋅ μ ( h – – b ) ( o ) if a = ⊥ , b ≠ ⊥ 0 if a ≠ ⊥ , b ≠ ⊥ or a = b = ⊥ It is easy to the above is a well-defined ¯ I -environment with hdom μ ⊆ ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ∗ . Given an I -universe υ = ( μ , r ) , we define the ¯ I -reward function ¯ r : ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ∗ ∘ → [ 0 , 1 ] by ¯ r ( h ) : = r ( h – – ) and the ¯ I -universe ¯ υ [ α ] : = ( ¯ μ [ α ] , ¯ r ) . We now introduce the conditions on the advisor policy which will allow us to prove a learnability theorem. First, we specify an advisor that always remains "approximately rational." The notation E x ∼ ρ [ X ∣ h ] will be used to mean E x ∼ ρ [ X ∣ h ⊑ x ] . Given a universe υ = ( μ , r ) and t ∈ ( 0 , ∞ ) we define V υ t : hdom μ → [ 0 , 1 ] and Q υ t : hdom μ × A → [ 0 , 1 ] by V υ t ( h ) : = max π ∈ Π E x ∼ μ ⋈ π [ ∑ ∞ n = | h | e − n / t r ( x : n ) ∑ ∞ n = | h | e − n / t ∣ h ] Q υ t ( h a ) : = ( 1 − e − 1 / t ) r ( h ) + e − 1 / t E o ∼ μ ( h a ) [ V υ t ( h a o ) ] Definition 3 Fix an interface I . Consider a universe υ = ( μ , r ) . Let t , β ∈ ( 0 , ∞ ) . A policy α is called strictly β -rational for ( υ , t ) when for any h ∈ dom μ and a ∈ A α ( h ) ( a ) ≤ exp [ β ( Q υ t ( h a ) − V υ t ( h ) ) ] max a ∗ ∈ A α ( h ) ( a ∗ ) Now we deal with the possibility of the advisor becoming "corrupt". In practical implementations where the "advisor" is a human operator, this can correspond to several types of events, e.g. sabotaging the channel that transmits data from the operator to the AI ("wireheading"), manipulation of the operator or replacement of the operator by a different entity. Definition 4 Fix an interface I . Consider a family { C t ⊆ ( A × O ) ∗ } t ∈ ( 0 , ∞ ) s.t. for any h , g ∈ ( A × O ) ∗ , if h ∈ C t then h g ∈ C t . We think of C t as the set of histories in which a certain event occurred. Consider a meta-universe υ = ( μ , r ) . C is said to be a υ - avoidable event when there is a meta-policy π ∗ and D : ( 0 , ∞ ) → N s.t. i. lim t → ∞ ( EU ∗ υ t ( t ) − EU π ∗ t υ t ( t ) ) = 0 ii. D = ω ( t ) iii. lim t → ∞ Pr x ∼ μ t ⋈ π ∗ t [ ∃ n ≤ D ( t ) : x : n ∈ C t ] = 0 That is, C is υ -avoidable when it is possible to avoid the event for a long time while retaining most of the value. Consider a meta-universe υ = ( μ , r ) and C a υ -avoidable event. Denote − υ : = ( μ , 1 − r ) . We define the reward function r C t by r C t ( h ) : = { r t ( h ) if h ∉ C t V − υ t ( h : n ) if h ∈ C t and n = min { m ∈ N ∣ h : m ∈ C t } We think of r C as representing a process wherein once the event represented by C occurs, the agent starts minimizing the utility function. We also use the notation υ C : = ( μ , r C ) . Definition 5 Consider a meta-universe υ = ( μ , r ) and β : ( 0 , ∞ ) → ( 0 , ∞ ) , where we think of the argument of the function β as the time discount scale. An autonomous ¯ I -metapolicy α is called β -rational for υ when there exists a υ -avoidable event C (that we think of as the advisor becoming "corrupt") and an autonomous ¯ I -metapolicy α ∗ (representing advisor policy conditional on non-corruption) s.t. i. For any h ∈ ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ∗ s.t. h – – ∉ C t , α t ( h ) = α ∗ t ( h ) . ii. α ∗ t is strictly β ( t ) -rational for ( ¯ υ C t [ α ∗ ] , t ) . Our definition of β -rationality requires the advisor to be extremely averse to corruption: the advisor behaves as if, once a corruption occurs, the agent policy becomes the worst possible. In general, this seems much too strong: by the time corruption occurs, the agent might have already converged into accurate beliefs about the universe that allow it to detect the corruption and keep operating without the advisor. Even better, the agent can usually outperform the worst possible policy using the prior alone. Moreover, we can allow for corruption to depend on unobservable random events and differentiate between different degrees of corruption and treat them accordingly. We leave those further improvements for future work. We are now ready to formulate the main result. Theorem Consider H = { υ k } k ∈ N a countable family of I -meta-universes and β : ( 0 , ∞ ) → ( 0 , ∞ ) s.t. β ( t ) = ω ( t 2 / 3 ) . Let { α k } k ∈ N be a family of autonomous ¯ I -metapolicies s.t. for every k ∈ N , α k is β -rational for υ k . Define ¯ H : = { ¯ υ k [ α k ] } k ∈ N . Then, ¯ H is learnable. Some remarks: By Proposition 1, ¯ H is learned by any Bayes optimal metapolicy with prior supported on ¯ H . To get a feeling for the condition β ( t ) = ω ( t 2 / 3 ) , consider an environment where the reward depends only on the last action and observation. In such an environment, an advisor that performs softmax (with constant parameter) on the next reward has β ( t ) = Θ ( t ) . It is thus "more rational" than the required minimum. It is easy to see that the Theorem can be generalized by introducing an external penalty (negative reward) for each time the agent delegates to the advisor: as it is, using the advisor already carries a penalty due to its suboptimal choice. The conditions of the Theorem imply that, in some sense, the advisor "knows" the true environment. This is unrealistic: obviously, we expect the human operator to have some (!) uncertainty about the world. However, we clearly cannot do away with this assumption: if the same action triggers a trap in some universes and is necessary for approaching maximal utility in other universes, and there is no observable difference between the universes before the action is taken, then there is no way to guarantee optimality. The prior knowledge you have about the universe caps the utility you can guarantee to obtain. On the other hand, as an AI designer, one can reasonably expect the AI to do at least as well as possible using the designer's own knowledge. If running the AI is the designer's best strategy, the AI should be close to Bayes optimal (in some sense that includes computational bounds et cetera: complications that we currently ignore) with respect to the designer's posterior rather than with respect to some simple prior. In other words, we need a way to transmit the designer's knowledge to the AI, without hand-crafting an elaborate prior. The following shows that the DIRL achieves this goal (theoretically, given the considerable simplifying assumptions). Given an environment μ , we define ^ μ : ( A × O ) ∗ → [ 0 , 1 ] as follows. For h = a 0 o 0 a 1 o 1 … a n − 1 o n − 1 ∈ hdom μ ^ μ ( h ) : = ∏ m < n μ ( h : m a m ) ( o m ) For h ∈ ( A × O ) ∗ ∖ hdom μ , ^ μ ( h ) : = 0 . Given a family of environments { μ k } k ∈ N and ξ ∈ Δ N , we will use the notation E k ∼ ξ [ μ k ] to denote the environment given by hdom E k ∼ ξ [ μ k ] : = ⋃ k ∈ supp ξ hdom μ k E k ∼ ξ [ μ k ] ( h a ) : = E k ∼ ξ [ ^ μ k ( h ) μ k ( h a ) ] E k ∼ ξ [ ^ μ k ( h ) ] Corollary 1 Consider { μ k } k ∈ N a countable family of I -meta-environments, { r K } K ∈ N a countable family of reward functions and { ξ K ∈ Δ N } K ∈ N s.t. given k ∈ supp ξ K , dom r K ⊇ hdom μ k . We think of ξ K as the advisor's belief about the environment in universe K . Let β : ( 0 , ∞ ) → ( 0 , ∞ ) be s.t. β ( t ) = ω ( t 2 / 3 ) and { α K } K ∈ N be a family of autonomous ¯ I -metapolicies s.t. for every K ∈ N , α K is β -rational for ( E k ∼ ξ K [ μ k ] , r K ) . Let ζ ∈ Δ N 2 be s.t. for any J , j ∈ N Pr ( K , k ) ∈ ζ [ K = J ] > 0 Pr ( K , k ) ∈ ζ [ k = j ∣ K = J ] = ξ J ( j ) We think of ζ as the agent's prior and the equation above as stating the agent's belief that the advisor's beliefs are "calibrated". Consider π ζ a ζ -Bayes optimal ¯ I -metapolicy, i.e. π ζ ∈ a r g m a x π ∈ Π ¯ I E ( K , k ) ∈ ζ [ EU π ¯ μ k [ α K ] , ¯ r K ( t ) ] Then, for every K ∈ N lim t → ∞ ( max π ∈ Π I E k ∈ ξ K [ EU π μ k , r K ( t ) ] − E k ∈ ξ K [ EU π ζ ¯ μ k [ α K ] , ¯ r K ( t ) ] ) = 0 If we happen to be so lucky that the advisor's (presumably justified) belief is supported on a learnable environment class, we get a stronger conclusion. Corollary 2 In the setting of Corollary 1, fix K ∈ N . Define the set of meta-universes H K by H K : = { ( μ k , r K ) ∣ k ∈ supp ξ K } Assume H K is learnable. Then, for every k ∈ N lim t → ∞ ( EU ∗ μ k , r K ( t ) − EU π ζ ¯ μ k [ α K ] , ¯ r K ( t ) ) = 0 We also believe that to some extent DIRL is effective against acausal attack . Indeed, the optimality we get from the Theorem + Proposition 1 holds for any prior. However, the speed of convergence to optimality certainly depends on the prior.  It is therefore desirable to analyze this dependency and bound the damage an adversary can do by controlling a certain portion of the prior. We leave this for future work. Appendix Proposition A.0 Fix an interface I . Consider H a countable learnable set of meta-universes. Consider any ζ ∈ Δ H s.t. supp ζ = H . Consider π ζ a metapolicy s.t. lim t → ∞ ( max π ∈ Π E υ ∼ ζ [ EU π υ t ( t ) ] − E υ ∼ ζ [ EU π ζ t υ t ( t ) ] ) = 0 Then, π ζ learns H . Proof of Proposition A.0 Fix π ∗ a metapolicy that learns H . Consider ϵ > 0 and let H ϵ ⊆ H be finite s.t. ζ ( H ∖ H ϵ ) < ϵ . For t ≫ 0 and every υ ∈ H ϵ we have EU π ∗ t υ t ( t ) ≥ EU ∗ υ t ( t ) − ϵ Also E υ ∼ ζ [ EU π ζ t υ t ( t ) ] ≥ E υ ∼ ζ [ EU π ∗ t υ t ( t ) ] − ϵ ≥ E υ ∼ ζ [ EU π ∗ t υ t ( t ) ; υ ∈ H ϵ ] − ϵ Combining, we get E υ ∼ ζ [ EU π ζ t υ t ( t ) ] ≥ E υ ∼ ζ [ EU ∗ υ t ( t ) ; υ ∈ H ϵ ] − 2 ϵ E υ ∼ ζ [ EU π ζ t υ t ( t ) ] ≥ E υ ∼ ζ [ EU ∗ υ t ( t ) ] − E υ ∼ ζ [ EU ∗ υ t ( t ) ; υ ∉ H ϵ ] − 2 ϵ By definition of H ϵ , this implies E υ ∼ ζ [ EU π ζ t υ t ( t ) ] ≥ E υ ∼ ζ [ EU ∗ υ t ( t ) ] − 3 ϵ For any υ ∈ H , we get EU π ζ t υ t ( t ) ≥ EU ∗ υ t ( t ) − 3 ϵ ζ ( υ ) Taking ϵ to 0, we get the desired result. Proof of Proposition 1 Immediate from Proposition A.0. Proof of Proposition 2 Let H = { υ k } k ∈ N . For each k ∈ N , let π k learn { υ l } l < k . Choose { t k ∈ ( 0 , ∞ ) } k ∈ N s.t. i. t 0 = 0 ii. t k < t k + 1 iii. lim k → ∞ t k = ∞ iv. For any l < k and t ≥ t k , EU π k t υ l t ( t ) ≥ EU ∗ υ l t ( t ) − 1 k + 1 . Now define π ∗ t : = π max { k ∣ t ≥ t k } t . Clearly, π ∗ learns H . Proposition A.1 Consider d ∈ N and x , y ∈ R d ∖ 0 . Then ∥ x ∥ x ∥ ∞ − y ∥ y ∥ ∞ ∥ ∞ ≤ 2 d ∥ x ∥ x ∥ 1 − y ∥ y ∥ 1 ∥ 1 Proof of Proposition A.1 Without loss of generality, assume ∥ x ∥ 1 = ∥ y ∥ 1 = 1 . For any i < d , we have x i ∥ x ∥ ∞ − y i ∥ y ∥ ∞ = x i ∥ y ∥ ∞ − y i ∥ x ∥ ∞ ∥ x ∥ ∞ ∥ y ∥ ∞ = x i ∥ y ∥ ∞ − x i ∥ x ∥ ∞ + x i ∥ x ∥ ∞ − y i ∥ x ∥ ∞ ∥ x ∥ ∞ ∥ y ∥ ∞ x i ∥ x ∥ ∞ − y i ∥ y ∥ ∞ = x i ( ∥ y ∥ ∞ − ∥ x ∥ ∞ ) + ( x i − y i ) ∥ x ∥ ∞ ∥ x ∥ ∞ ∥ y ∥ ∞ Denote r : = ∥ x − y ∥ 1 . Obviously, ∥ x − y ∥ ∞ ≤ r and therefore | x i − y i | ≤ r and | ∥ x ∥ ∞ − ∥ y ∥ ∞ | ≤ r . We get | x i ∥ x ∥ ∞ − y i ∥ y ∥ ∞ | ≤ | x i | r + r ∥ x ∥ ∞ ∥ x ∥ ∞ ∥ y ∥ ∞ ≤ ∥ x ∥ ∞ r + r ∥ x ∥ ∞ ∥ x ∥ ∞ ∥ y ∥ ∞ ≤ 2 r ∥ y ∥ ∞ Since ∥ y ∥ 1 = 1 , ∥ y ∥ ∞ ≥ 1 d yielding the desired result. Proposition A.2 Consider H a finite set, L : H → [ 0 , ∞ ) , ζ ∈ Δ H and β , ϵ ∈ ( 0 , ∞ ) . Assume that i. For any k ∈ H , ζ ( k ) ≥ β ϵ . ii. E ζ [ L ] ≥ ϵ Then E ζ [ e − β L ] ≤ 1 − ( 1 − e − 1 ) β ϵ Proof of Proposition A.2 Without loss of generality, we can assume that E ζ [ L ] = ϵ , because otherwise we can rescale L by a constant in ( 0 , 1 ) which will only make E ζ [ e − β L ] larger. It now follows from conditions i+ii that for any k , L ( k ) ≤ β − 1 and therefore β L ( k ) ∈ [ 0 , 1 ] . We have L ( k ) = ( 1 − β L ( k ) ) ⋅ 0 + β L ( k ) ⋅ β − 1 Since e − β x is a convex function, we get e − β L ( k ) ≤ ( 1 − β L ( k ) ) ⋅ e − β ⋅ 0 + β L ( k ) ⋅ e − β ⋅ β − 1 = 1 − β L ( k ) + e − 1 β L ( k ) = 1 − ( 1 − e − 1 ) β L ( k ) E ζ [ e − β L ] ≤ 1 − ( 1 − e − 1 ) β E ζ [ L ] = 1 − ( 1 − e − 1 ) β ϵ Proposition A.3 Consider H and A finite sets, L : H × A → [ 0 , ∞ ) , ζ ∈ Δ H , α : H → Δ A and β , ϵ ∈ ( 0 , ∞ ) . Assume that i. For any k ∈ H , ζ ( k ) ≥ β ϵ . ii. For any a ∈ A , E k ∈ ζ [ L ( k , a ) ] ≥ ϵ . iii. For any k ∈ H and a ∈ A , α ( k ) ( a ) ≤ exp [ − β L ( k , a ) ] max b ∈ A α ( k ) ( b ) . Define ζ ⋉ α ∈ Δ ( H × A ) by ( ζ ⋉ α ) ( k , a ) : = ζ ( k ) α ( k , a ) . Then,  the mutual information I between k and a in the distribution ζ ⋉ α satisfies I ≥ ( 1 − e − 1 ) 2 8 | A | 2 β 2 ϵ 2 Proof of Proposition A.3 Define ¯ α ∈ Δ A by ¯ α : = E ζ [ α ] . We have I = E ζ [ D K L ( α ∥ ¯ α ) ] Applying Pinsker's inequality I ≥ 2 E ζ [ d tv ( α , ¯ α ) 2 ] = 1 2 E ζ [ ∥ α − ¯ α ∥ 2 1 ] ≥ 1 2 E ζ [ ∥ α − ¯ α ∥ 1 ] 2 By Proposition A.1 I ≥ 1 8 | A | 2 E ζ [ ∥ α ∥ α ∥ ∞ − ¯ α ∥ ¯ α ∥ ∞ ∥ ∞ ] 2 ≥ 1 8 | A | 2 ∥ E ζ [ α ∥ α ∥ ∞ − ¯ α ∥ ¯ α ∥ ∞ ] ∥ 2 ∞ = 1 8 | A | 2 ∥ E ζ [ α ∥ α ∥ ∞ ] − ¯ α ∥ ¯ α ∥ ∞ ∥ 2 ∞ I ≥ 1 8 | A | 2 ( ∥ ¯ α ∥ ¯ α ∥ ∞ ∥ ∞ − ∥ E ζ [ α ∥ α ∥ ∞ ] ∥ ∞ ) 2 = 1 8 | A | 2 ( 1 − ∥ E ζ [ α ∥ α ∥ ∞ ] ∥ ∞ ) 2 By condition iii, α ( k ) ( a ) / ∥ α ( k ) ∥ ∞ ≤ exp [ − β L ( k , a ) ] and therefore I ≥ 1 8 | A | 2 ( 1 − max a ∈ A E k ∼ ζ [ e − β L ( k , a ) ] ) 2 Applying Proposition A.2, we get I ≥ 1 8 | A | 2 ( 1 − ( 1 − ( 1 − e − 1 ) β ϵ ) ) 2 = ( 1 − e − 1 ) 2 8 | A | 2 β 2 ϵ 2 Proposition A.4 Consider A a finite set, L : A → [ 0 , ∞ ) and α ∈ Δ A and β ∈ ( 0 , ∞ ) s.t. for any a ∈ A α ( a ) ≤ e − β L ( a ) max b ∈ A α ( b ) Then, E α [ L ] ≤ | A | e − 1 β − 1 . Proof of Proposition A.4 We have E α [ L ] = ∑ a ∈ A α ( a ) L ( a ) ≤ max b ∈ A α ( b ) ∑ a ∈ A e − β L ( a ) L ( a ) ≤ | A | max x ∈ [ 0 , ∞ ) e − β x x We compute max x ∈ [ 0 , ∞ ) e − β x x : 0 = d d x ( e − β x x ) | x = x ∗ = − β e − β x ∗ x ∗ + e − β x ∗ x ∗ = 1 β e − β x ∗ x ∗ = 1 e β Proposition A.5 Consider a universe υ = ( μ , r ) , a policy π 0 and t ∈ ( 0 , ∞ ) . Then, EU ∗ υ ( t ) − EU π 0 υ ( t ) = ∞ ∑ n = 0 e − n / t E x ∼ μ ⋈ π 0 [ V υ t ( x : n ) − Q υ t ( x : n + 1 / 2 ) ] Proof of Proposition A.5 For any x ∈ ( A × O ) ω , it is easy to see that EU ∗ υ ( t ) = V υ t ( λ ) = ∞ ∑ n = 0 e − n / t ( V υ t ( x : n ) − e − 1 / t V υ t ( x : n + 1 ) ) U r t ( x ) = ( 1 − e − 1 / t ) ∞ ∑ n = 0 e − n / t r ( x : n ) EU ∗ υ ( t ) − U r t ( x ) = ∞ ∑ n = 0 e − n / t ( V υ t ( x : n ) − ( 1 − e − 1 / t ) r ( x : n ) − e − 1 / t V υ t ( x : n + 1 ) ) EU ∗ υ ( t ) − U r t ( x ) = ∞ ∑ n = 0 e − n / t ( V υ t ( x : n ) − Q υ t ( x : n + 1 / 2 ) + Q υ t ( x : n + 1 / 2 ) − ( 1 − e − 1 / t ) r ( x : n ) − e − 1 / t V υ t ( x : n + 1 ) ) Taking expected value over x , we get EU ∗ υ ( t ) − EU π 0 υ ( t ) = ∞ ∑ n = 0 e − n / t ( E μ ⋈ π 0 [ V υ t ( x : n ) − Q υ t ( x : n + 1 / 2 ) ] + E μ ⋈ π 0 [ Q υ t ( x : n + 1 / 2 ) − ( 1 − e − 1 / t ) r ( x : n ) − e − 1 / t V υ t ( x : n + 1 ) ] ) It is easy to see that the second term vanishes, yielding the desired result. Lemma A Consider the setting of Theorem, but assume that H = { υ k = ( μ k , r k ) } k < N for some N ∈ N (i.e. it is finite) and that α k ( t ) is strictly β ( t ) -rational for ¯ υ k [ α k ] . Denote ν k : = ¯ μ k [ α k ] and hdom ¯ H : = ⋃ k < N hdom ν k . Denote ζ 0 ∈ Δ [ N ] the uniform probability distribution. For any t > N 3 , define ζ t , ~ ζ t : hdom ¯ H → Δ [ N ] recursively as follows ~ ζ t ( λ ) : = ζ 0 ~ ζ t ( h a o ) ( k ) : = { ~ Z t ( h ) − 1 ⋅ ζ t ( h ) ( k ) ⋅ ν k ( h a ) ( o ) if ∃ j : ζ t ( h ) ( j ) ⋅ ν j ( h a ) ( o ) > 0 N − 1 otherwise ζ t ( h ) ( k ) : = Z t ( h ) − 1 ~ ζ t ( h ) ( k ) [ [ ~ ζ t ( h ) ( k ) > t − 1 / 3 ] ] In the above, Z t ( h ) and ~ Z t ( h ) are normalization factor chosen to make the probabilities sum to 1. That is, ζ t ( h ) is obtained by starting from prior ζ 0 , updating on every observation, and setting to 0 the probability of any universe whose probability drops below t − 1 / 3 . When encountering an "impossible" observation we reset to the uniform distribution, but this is arbitrary. Define the "loss function" L t : hdom ¯ H × A → [ 0 , 1 ] by L t ( h a ) : = E k ∼ ζ t ( h ) [ V υ k t t ( h – – ) − Q υ k t t ( h – – a ) ] Denote ϵ t : = β ( t ) − 1 t − 1 / 3 . Define the following ¯ I -metapolicy π ∗ : π ∗ t ( h ) : = ⎧ ⎪
⎪ ⎨ ⎪
⎪ ⎩ a r g m i n a ∈ A L t ( h a ) if h ∈ hdom ¯ H , min a ∈ A L t ( h a ) < ϵ t ⊥ if h ∈ hdom ¯ H , min a ∈ A L t ( h a ) ≥ ϵ t ⊥ if h ∉ hdom ¯ H (Technically, we only defined π ∗ t for t > N 3 , but it doesn't matter.) Then, π ∗ learns ¯ H . Proof of Lemma A For every k ∈ [ N ] , we define ζ ! k t , ~ ζ ! k t : hdom ¯ H → Δ [ N ] and S k t : hdom ¯ H → 2 [ N ] recursively as follows ~ ζ ! k t ( λ ) : = ζ 0 ~ ζ ! k t ( h a o ) ( i ) : = ζ ! k t ( h ) ( i ) ⋅ ν i ( h a ) ( o ) ∑ j < N ζ ! k t ( h ) ( j ) ⋅ ν j ( h a ) ( o ) S k t ( h ) : = { i ∈ [ N ] ∣ ~ ζ ! k t ( h ) ( i ) > t − 1 / 3 } ζ ! k t ( h ) ( i ) : = [ [ k , i ∈ S k t ( h ) ] ] ~ ζ ! k t ( h ) ( i ) ∑ j ∈ S k t ( h ) ~ ζ ! k t ( h ) ( j ) + [ [ k ∉ S k t ( h ) , i = k ] ] That is, ζ ! k is a belief state that, besides updating on observations, behaves as if, at each moment of time, if the true universe k is low probability according to current belief state (i.e. k ∉ S k t ( h ) ), then the true universe is "magically" revealed (i.e. ζ ! k becomes the Kronecker delta), and otherwise it updates on the true universe not being revealed. Denote ρ t : = ζ 0 ⋉ ( ν t ⋈ π ∗ t ) ∈ Δ ( [ N ] × ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ω ) Here, the dependence of ν k t ⋈ π ∗ t on k is used to view it as Markov kernel from [ N ] to ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ω . It is easy to see that, since the probability of "magic\ revelation" ever happening is at most ( N − 1 ) t − 1 / 3 , we have Pr ( k , x ) ∼ ρ t [ ∃ n ∈ N : ζ t ( x : n ) ≠ ζ ! k t ( x : n ) ] ≤ ( N − 1 ) t − 1 / 3 Let π ! k be defined exactly as π ∗ but with ζ replaced by ζ ! k . Denote ρ ! t : = ζ 0 ⋉ ( ν t ⋈ π ! t ) . From the above, we get d tv ( ρ t , ρ ! t ) ≤ ( N − 1 ) t − 1 / 3 Given k ∈ [ N ] and h ∈ hdom ¯ H , we define the set h ! k by h ! k : = { ( j , x ) ∈ [ N ] × ¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯ A × O ω ∣ h ⊑ x , ∀ m ≤ | h | : k ∈ S k t ( h : m ) ∧ j ∈ S j t ( h : m ) ∨ k ∉ S k t ( h : m ) ∧ j = k } We have Pr ( j , x ) ∼ ρ ! t [ j = i ∣ h ! k ] = ζ ! k ( h ) ( i ) It follows that E ( j , x ) ∼ ρ ! t [ H ( ζ ! j t ( x : | h | + 1 ) ) ∣ h ! k ] = H ( ζ ! k t ( h ) ) − E ( j , x ) ∼ ρ ! t [ D K L ( ζ ! j t ( x : | h | + 1 ) ∥ ~ ζ ! j t ( x : | h | + 1 ) ) + D K L ( ~ ζ ! j t ( x : | h | + 1 ) ∥ ζ ! j t ( x : | h | ) ) ∣ h ! k ] E ( j , x ) ∼ ρ ! t [ H ( ζ ! j t ( x : | h | + 1 ) ) ∣ h ! k ] ≤ H ( ζ ! k t ( h ) ) − E ( j , x ) ∼ ρ ! t [ D K L ( ~ ζ ! j t ( x : | h | + 1 ) ∥ ζ ! j t ( x : | h | ) ) ∣ h ! k ] If π ! k ( h ) = ⊥ , we can apply Proposition A.3: condition i follows from the definition of S k t and the observation that β ( t ) ϵ t = t − 1 / 3 , condition ii follows from the fact we are in the second case in the definition of π ! k (see definition of π ∗ ) and condition iii follows from the strict β ( t ) -rationality of α k ( t ) . We conclude E ( j , x ) ∼ ρ ! t [ H ( ζ ! j t ( x : | h | + 1 ) ) ∣ h ! k ] ≤ H ( ζ ! k t ( h ) ) − ( 1 − e − 1 ) 2 8 | A | 2 β ( t ) 2 ϵ 2 t [ [ π ! k ( h ) = ⊥ ] ] E ( j , x ) ∼ ρ ! t [ H ( ζ ! j t ( x : | h | + 1 ) ) ∣ h ! k ] ≤ H ( ζ ! k t ( h ) ) − ( 1 − e − 1 ) 2 8 | A | 2 t − 2 / 3 [ [ π ! k ( h ) = ⊥ ] ] Taking ρ ! t -expected value over ( k , h ) , we conclude that for any n ∈ N E ( k , x ) ∼ ρ ! t [ H ( ζ ! k t ( x : n + 1 ) ) ] ≤ E ( k , x ) ∼ ρ ! t [ H ( ζ ! k t ( x : n ) ) ] − ( 1 − e − 1 ) 2 8 | A | 2 t − 2 / 3 Pr ( k , x ) ∼ ρ ! t [ π ! k ( x : n ) = ⊥ ] By induction, it follows that E ( k , x ) ∼ ρ ! t [ H ( ζ ! k t ( x : n ) ) ] ≤ H ( ζ 0 ) − ( 1 − e − 1 ) 2 8 | A | 2 t − 2 / 3 E ( k , x ) ∼ ρ ! t [ | { m ∈ [ n ] ∣ x m ∈ ⊥ × ¯ O } | ] E ( k , x ) ∼ ρ ! t [ | { m ∈ [ n ] ∣ x m ∈ ⊥ × ¯ O } | ] ≤ 8 | A | 2 ln N ( 1 − e − 1 ) 2 t 2 / 3 E ( k , x ) ∼ ρ ! t [ | { n ∈ N ∣ x n ∈ ⊥ × ¯ O } | ] ≤ 8 | A | 2 ln N ( 1 − e − 1 ) 2 t 2 / 3 So, the expected number of delegations is O ( t 2 / 3 ) . For any k ∈ [ N ] , Proposition A.5 yields EU ∗ ¯ υ k [ α k ] ( t ) − EU π ! k ¯ υ k [ α k ] ( t ) = ∞ ∑ n = 0 e − n / t E x ∼ ν k ⋈ π ! k [ V υ k [ α k ] t ( x : n ) − Q υ k [ α k ] t ( x : n π ! k ( x : n ) ) ] Averaging over k , we get 1 N ∑ k < N ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ! k ¯ υ k [ α k ] ( t ) ) = ∞ ∑ n = 0 e − n / t E ( k , x ) ∼ ρ ! t [ V υ k [ α k ] t ( x : n ) − Q υ k [ α k ] t ( x : n π ! k ( x : n ) ) ] 1 N ∑ k < N ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ! k ¯ υ k [ α k ] ( t ) ) = ∞ ∑ n = 0 e − n / t E ( k , x ) ∼ ρ ! t [ E ( j , y ) ∼ ρ ! t [ V υ j [ α j ] t ( y : n ) − Q υ j [ α j ] t ( y : n π ! j ( y : n ) ) ∣ x ! k : n ] ] Using the definitions of ζ ! k ( x : n ) and x ! k : n , and observing that π ! j ( x : n ) = π ! k ( x : n ) for ( j , y ) ∈ x ! l : n 1 N ∑ k < N ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ! k ¯ υ k [ α k ] ( t ) ) = ∞ ∑ n = 0 e − n / t E ( k , x ) ∼ ρ ! t [ E j ∼ ζ ! k ( x : n ) [ V υ j [ α j ] t ( x : n ) − Q υ j [ α j ] t ( x : n π ! k ( x : n ) ) ] ] When π ! k ( x : n ) ≠ ⊥ , the expected loss is smaller than ϵ t (by construction of π ! k ) . When π ! k ( x : n ) = ⊥ , the expected loss is at most | A | e − 1 β ( t ) − 1 , by Proposition A.4. We get 1 N ∑ k < N ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ! k ¯ υ k [ α k ] ( t ) ) ≤ ∞ ∑ n = 0 e − n / t E ( k , x ) ∼ ρ ! t [ [ [ π ! k ( x : n ) ≠ ⊥ ] ] ϵ t + [ [ π ! k ( x : n ) = ⊥ ] ] | A | e − 1 β ( t ) − 1 ] The contribution of the first term on the right hand side can be bounded using the observation ∞ ∑ n = 0 e − n / t = 1 + ∞ ∑ n = 1 e − n / t ≤ 1 + ∞ ∑ n = 1 ∫ n n − 1 e − s / t d s = 1 + ∫ ∞ 0 e − s / t d s = 1 + t The contribution the of second term on the right hand side can be bounded via the expected number of delegations. We get 1 N ∑ k < N ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ! k ¯ υ k [ α k ] ( t ) ) ≤ ( 1 + t ) β ( t ) − 1 t − 1 / 3 + 8 | A | 2 ln N ( 1 − e − 1 ) 2 t 2 / 3 | A | e − 1 β ( t ) − 1 1 N ∑ k < N ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ! k ¯ υ k [ α k ] ( t ) ) ≤ ( 1 t + 1 + 8 | A | 3 ln N e ( 1 − e − 1 ) 2 ) t 2 / 3 β ( t ) We use the relationship between ρ t and ρ ! t on the second term on the left hand side (whose contribution is the ρ ! t -expected value of the utility function, whose range lies in [0,1]), and get 1 N ∑ k < N ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ∗ ¯ υ k [ α k ] ( t ) ) ≤ ( 1 t + 1 + 8 | A | 3 ln N e ( 1 − e − 1 ) 2 ) t 2 / 3 β ( t ) + N − 1 t 1 / 3 Using the assumption β = ω ( t 2 / 3 ) , we conclude that for each k ∈ [ N ] lim t → ∞ ( EU ∗ ¯ υ k [ α k ] ( t ) − EU π ∗ ¯ υ k [ α k ] ( t ) ) = 0 Proposition A.6 Let υ = ( μ , r ) be a meta-universe, { C t ⊆ ( A × O ) ∗ } t ∈ ( 0 , ∞ ) and π 0 a metapolicy. Then, for all t ∈ ( 0 , ∞ ) EU π 0 υ C ( t ) ≤ EU π 0 υ ( t ) Proof of Proposition A.6 Denote χ t : = χ C t the characteristic function of C t . For notational convenience, the expression χ t ( x : − 1 ) will be understood to mean 0. EU π 0 υ C ( t ) = ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t ( n ∑ m = 0 ( 1 − χ t ( x : m − 1 ) ) χ t ( x : m ) V − υ t ( x : m ) + ( 1 − χ t ( x : n ) ) r t ( x : n ) ) ] EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t ( n ∑ m = 0 ( 1 − χ t ( x : m − 1 ) ) χ t ( x : m ) E y ∼ μ ⋈ π 0 [ ∑ ∞ l = m e − l t r ( y : l ) ∑ ∞ l = m e − l t ∣ x : m ] + ( 1 − χ t ( x : n ) ) r t ( x : n ) ) ] EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t ( n ∑ m = 0 ( 1 − χ t ( x : m − 1 ) ) χ t ( x : m ) ∑ ∞ l = m e − l t r ( x : l ) ∑ ∞ l = m e − l t + ( 1 − χ t ( x : n ) ) r t ( x : n ) ) ] EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t ( ( 1 − e − 1 t ) n ∑ m = 0 ( 1 − χ t ( x : m − 1 ) ) χ t ( x : m ) ∞ ∑ l = m e − l − m t r ( x : l ) + ( 1 − χ t ( x : n ) ) r t ( x : n ) ) ] Regrouping the sum to collect the terms r ( x : n ) for the same value of n , we get EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 ( ( 1 − e − 1 t ) n ∑ m = 0 ∞ ∑ l = m e − l t ( 1 − χ t ( x : m − 1 ) ) χ t ( x : m ) e − n − m t + e − n t ( 1 − χ t ( x : n ) ) ) r ( x : n ) ] EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t ( ( 1 − e − 1 t ) n ∑ m = 0 e − m t 1 − e − 1 t ( 1 − χ t ( x : m − 1 ) ) χ t ( x : m ) e m t + 1 − χ t ( x : n ) ) r ( x : n ) ] EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t ( n ∑ m = 0 ( 1 − χ t ( x : m − 1 ) ) χ t ( x : m ) + 1 − χ t ( x : n ) ) r ( x : n ) ] EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t ( χ t ( x : n ) + 1 − χ t ( x : n ) ) r ( x : n ) ] EU π 0 υ C ( t ) ≤ ( 1 − e − 1 t ) E x ∼ μ ⋈ π 0 [ ∞ ∑ n = 0 e − n t r ( x : n ) ] = EU π 0 υ ( t ) Proposition A.7 Let υ be a meta-universe and C a υ -avoidable event. Suppose π ! is a metapolicy that learns υ C . Then, π ! learns υ as well. Proof of Proposition A.7 It is easy to see for any policy π and t ∈ ( 0 , ∞ ) EU π ∗ υ C ( t ) ≥ ( 1 − Pr x ∼ μ t ⋈ π ∗ t [ ∃ n ≤ D ( t ) : x : n ∈ C t ] ) ( EU π ∗ υ ( t ) − e − D ( t ) / t ) Let π ∗ be as in Definition 4. Proposition A.6 and the above imply that lim t → ∞ ( EU π ∗ υ ( t ) − EU π ∗ υ C ( t ) ) = 0 Using condition i, we get lim t → ∞ ( EU ∗ υ ( t ) − EU π ∗ υ C ( t ) ) = 0 By Proposition A.6, EU ∗ υ ( t ) ≥ EU ∗ υ C ( t ) , therefore lim t → ∞ ( EU ∗ υ C ( t ) − EU π ∗ υ C ( t ) ) = 0 lim t → ∞ ( EU π ! υ C ( t ) − EU π ∗ υ C ( t ) ) = 0 lim t → ∞ ( EU π ! υ C ( t ) − EU ∗ υ ( t ) ) = 0 By Proposition A.6, EU π ! υ ( t ) ≥ EU π ! υ C ( t ) , therefore lim t → ∞ ( EU π ! υ ( t ) − EU ∗ υ ( t ) ) = 0 Proof of Theorem For any k ∈ N , let C k and α k ∗ be for α k as in Definition 5. Denote ψ k : = ( υ k ) C k and ¯ H C : = { ¯ ψ k [ α k ∗ ] ∣ k ∈ N } By Lemma A and Proposition 2, ¯ H C is learnable. Let π ∗ be a metapolicy that learns it. For any k ∈ N , π ∗ learns ¯ ψ k [ α k ∗ ] . It is easy to see that for any policy π , EU π ¯ ψ k [ α k ∗ ] ( t ) = EU π ¯ ψ k [ α k ] ( t ) ( ψ k is defined s.t. once the corruption occurs, the reward is constant, so the advisor has no effect after this point), therefore π ∗ learns ¯ ψ k [ α k ] . By Proposition A.7, we conclude that π ∗ learns ¯ υ k [ α k ] . Proof of Corollary 1 Denote υ K : = ( E k ∈ ζ K [ μ k ] , r K ) . By the Theorem, { ¯ υ K [ α K ] } K ∈ N is learnable. Denote ψ k K : = ( μ k , r K ) . It is easy to see that for any ¯ I -policy π and t ∈ ( 0 , ∞ ) , E k ∈ ξ K [ EU π ψ k K [ α K ] ( t ) ] = EU π ¯ υ K [ α K ] ( t ) By the calibration condition E ( K , k ) ∼ ζ [ EU π ψ k K [ α K ] ( t ) ] = E ( K , k ) ∈ ζ [ E j ∈ ξ K [ EU π ψ j K [ α K ] ( t ) ] ] = E ( K , k ) ∈ ζ [ EU π ¯ υ K [ α K ] ( t ) ] Applying Proposition 1, we conclude that π ζ learns { ¯ υ K [ α K ] } K ∈ N . That is, for any K ∈ N lim t → ∞ ( EU ∗ ¯ υ K [ α K ] ( t ) − EU π ζ ¯ υ K [ α K ] ( t ) ) = 0 lim t → ∞ ( EU ∗ υ K ( t ) − EU π ζ ¯ υ K [ α K ] ( t ) ) = 0 lim t → ∞ ( max π ∈ Π I E k ∈ ξ K [ EU π ψ k K ( t ) ] − E k ∈ ξ K [ EU π ζ ¯ ψ k K [ α K ] ( t ) ] ) = 0 Proof of Corollary 2 Immediate from Corollary 1 and Proposition A.0.