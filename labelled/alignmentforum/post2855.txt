This is the tenth post in the Cartesian frames sequence. Here, we define a bunch of ways to construct new (additive/multiplicative) (sub/super)-(agents/environments) from a given Cartesian frame. Throughout this post, we will start with a single Cartesian frame over W , C = ( A , E , ⋅ ) . We will start by defining operations from taking subsets and partitions of A and E . We will then define similar operations from taking subsets and partitions of W . 1. Definitions from Agents and Environments 1.1. Committing Definition: Given a subset B ⊆ A , let Commit B ( C ) denote the Cartesian frame ( B , E , ⋆ ) , with ⋆ given by b ⋆ e = b ⋅ e . Let Commit ∖ B ( C ) denote the Cartesian frame ( A ∖ B , E , ⋄ ) , with ⋄ given by a ⋄ e = a ⋅ e . Commit B ( C ) represents the perspective you get when the agent of C makes a commitment to choose an element of B , while Commit ∖ B ( C ) represents the perspective you get when the agent of C makes a commitment to choose an element outside of B . Claim: For all B ⊆ A , Commit B ( C ) ◃ + C and Commit ∖ B ( C ) ◃ + C . Further, Commit ∖ B ( C ) and Commit B ( C ) are brothers in C . Proof: That Commit B ( C ) ◃ + C and Commit ∖ B ( C ) ◃ + C is trivial from the committing definition of additive subagent . Observe that Commit B ( C ) ⊕ Commit ∖ B ( C ) = ( A , E × E , ∙ ) , where ∙ is given by a ∙ ( e , f ) = a ⋅ e if a ∈ B , and a ∙ ( e , f ) = a ⋅ f if a ∉ B . Let D ⊂ E × E be the diagonal, { ( e , e ) | e ∈ E } . We clearly have that ( A , D , ∙ ′ ) is in Commit B ( C ) ⊞ Commit ∖ B ( C ) , where ∙ ′ is the restriction of ∙ to A × D , and that ( A , D , ∙ ′ ) ≅ C ; so Commit ∖ B ( C ) ◃ + C and Commit B ( C ) ◃ + C are brothers in C . □ Claim: Commit ∖ B ( C ) ≅ Commit A ∖ B ( C ) Proof: Trivial. □ 1.2. Assuming Assuming is the dual operation to committing. Definition: Given a subset F ⊆ E , let Assume F ( C ) denote the Cartesian frame ( A , F , ⋆ ) , with ⋆ given by a ⋆ f = a ⋅ f . Let Assume ∖ F ( C ) denote the Cartesian frame ( A , E ∖ F , ⋄ ) , with ⋄ given by a ⋄ e = a ⋅ e . Assume F ( C ) represents the perspective you get when you assume the environment is chosen from F , while Assume ∖ F ( C ) represents the perspective you get when you assume the environment is chosen from outside of F . In "Introduction to Cartesian Frames" §3.2 ( Examples of Controllables ), I noted the counter-intuitive result that agents have no control in worlds where a meteor (or other event) could have prevented their existence: C 0 = r s m u n u ↔ r u ↔ s ⎛ ⎜
⎜
⎜ ⎝ u r u s m n r n s m u r n s m n r u s m ⎞ ⎟
⎟
⎟ ⎠ . Here, we see that we can use Assume ∖ F ( C ) to recover the more intuitive idea of "control." The subagent modified by the assumption "there's no meteor" can have controllables, even though the original agent has no controllables: Assume ∖ { m } ( C 0 ) = r s u n u ↔ r u ↔ s ⎛ ⎜
⎜
⎜ ⎝ u r u s n r n s u r n s n r u s ⎞ ⎟
⎟
⎟ ⎠ . Claim: For all F ⊆ E , ( Assume F ( C ) ) ∗ ≅ Commit F ( C ∗ ) and ( Assume ∖ F ( C ) ) ∗ ≅ Commit ∖ F ( C ∗ ) . Similarly, for all B ⊆ A , ( Commit B ( C ) ) ∗ ≅ Assume B ( C ∗ ) and ( Commit ∖ B ( C ) ) ∗ ≅ Assume ∖ B ( C ∗ ) . Proof: Trivial. □ Claim: For all F ⊆ E , C ◃ ∗ + Assume F ( C ) and C ◃ ∗ + Assume ∖ F ( C ) . Proof: Trivial. □ 1.3. Externalizing Note that for the following definitions, when we say " X is a partition of Y ," we mean that X is a set of nonempty subsets of Y , such that for each y ∈ Y , there exists a unique x ∈ X such that y ∈ x . Definition: Given a partition X of Y , let Y / X denote the set of all functions q from X to Y such that q ( x ) ∈ x for all x ∈ X . Definition: Given a partition B of A , let External B ( C ) denote the Cartesian Frame ( A / B , B × E , ⋆ ) , where ⋆ is given by q ⋆ ( b , e ) = q ( b ) ⋅ e . Let External / B ( C ) denote the Cartesian Frame ( B , A / B × E , ⋄ ) , where ⋄ is given by b ⋄ ( q , e ) = q ( b ) ⋅ e . We say "externalizing B " for External B and "externalizing mod B " for External / B . External B ( C ) can be thought of the result of the agent of C first factoring its choice into choosing an equivalence class in B , and choosing an element of each equivalence class, and then externalizing the part of itself that chooses an equivalence class. I.e., we are drawing a new Cartesian frame which treats the choice of equivalence class as part of the environment, rather than part of the agent. Similarly, External / B ( C ) can be thought of the result of the agent of C factoring as above, then externalizing the part of itself that chooses an element of each equivalence class. Claim: For all partitions B of A , External B ( C ) ◃ × C and External / B ( C ) ◃ × C . Further, External B ( C ) and External / B ( C ) are sisters in C . Proof: Let External B ( C ) = ( A / B , B × E , ⋆ ) and External / B ( C ) = ( B , A / B × E , ⋄ ) . First, observe that for every e ∈ E , there exists a morphism ( g e , h e ) : External B ( C ) → ( External / B ( C ) ) ∗ , with g e : → A / B × E given by g e ( q ) = ( q , e ) , and h e : B → B × E given by h e ( b ) = ( b , e ) . To see that this is a morphism, observe that for all q ∈ A / B and b ∈ B , g e ( q ) ⋄ b = q ( b ) ⋅ e = q ⋆ h e ( b ) . Let E ′ ⊆ hom ( External B ( C ) , ( External / B ( C ) ) ∗ ) be given by E ′ = { ( g e , h e ) | e ∈ E } , and let D = ( A / B × B , E ′ , ∙ ) , where ( q , b ) ∙ ( g e , h e ) = g e ( q ) ⋄ b = q ⋆ h e ( b ) = q ( b ) ⋅ e . Our goal is to show that D ∈ External B ( C ) ⊠ External / B ( C ) , and that D ≃ C . To see D ≃ C , we define ( g 0 , h 0 ) : D → C and ( g 1 , h 1 ) : C → D as follows. First, g 0 : A / p × B → A is given by g 0 ( q , b ) = q ( b ) . We first need to confirm that g 0 is surjective. Given any a ∈ A , we can let b ∈ B be the set with a ∈ b and construct a function q ∈ A / B by saying q ( b ) = a , and for each b ′ ≠ b , choosing an a ′ ∈ b ′ , and saying q ( b ′ ) = a ′ . Observing that g 0 ( q , b ) = a , we have that g 0 is surjective and thus has a right inverse. We choose g 1 : A → A / B × B to be any right inverse to g 0 . Similarly, we define h 0 : E → E ′ by h 0 ( e ) = ( g e , h e ) , which is clearly surjective, and define h 1 : E ′ → E to be any right inverse to h 0 . (Indeed, h 0 is bijective as long as A is nonempty.) Then, for all ( q , b ) ∈ A / B × B and e ∈ E , we have g 0 ( q , b ) ⋅ e = q ( b ) ⋅ e = ( q , b ) ∙ ( g e , h e ) = q , b ∙ h 0 ( e ) , so ( g 0 , h 0 ) is a morphism. This also gives us that for all a ∈ A and e ′ ∈ E ′ we have g 1 ( a ) ∙ e ′ = g 1 ( a ) ∙ h 0 ( h 1 ( e ′ ) ) = g 0 ( g 1 ( a ) ) ⋅ h 1 ( e ) = a ⋅ h 1 ( e ) , so ( g 1 , h 1 ) is a morphism. We know ( g 0 , h 0 ) ∘ ( g 1 , h 1 ) is homotopic to the identity on C , since g 0 ∘ g 1 is the identity on A , and we know that ( g 1 , h 1 ) ∘ ( g 0 , h 0 ) is homotopic to the identity on D , since h 0 ∘ h 1 is the identity on E ′ . Thus, D ≃ C . To show that D ∈ External B ( C ) ⊠ External / B ( C ) , it suffices to show that External B ( C ) = ( A / B , B × E , ⋆ ) ≃ ( A / B , B × E ′ , ⋆ ′ ) , and External / B ( C ) = ( B , A / B × E , ⋄ ) ≃ ( B , A / B × E ′ , ⋄ ′ ) , where ⋆ ′ and ⋄ ′ are given by q ⋆ ′ ( b , ( g e , h e ) ) = b ⋄ ′ ( q , ( g e , h e ) ) = q ⋆ h e ( b ) = b ⋄ g e ( q ) = q ( b ) ⋅ e . Indeed, we show that if A is nonempty, ( A / B , B × E , ⋆ ) ≅ ( A / B , B × E ′ , ⋆ ′ ) , and ( B , A / B × E , ⋄ ) ≅ ( B , A / B × E ′ , ⋄ ′ ) . If A is nonempty, then the function from E to E ′ given by e ↦ ( g e , h e ) is a bijection, since it is clearly surjective, and is injective because e is uniquely defined by g e ( a ) = ( a , e ) . This gives a bijection between B × E and B × E ′ , and we have that for all q ∈ A / B , b ∈ B , and e ∈ E , q ⋆ ′ ( b , ( g e , h e ) ) = q ( b ) ⋅ e = q ⋆ ( b , e ) . Similarly, we have a bijection between A / B × E and A / B × E ′ , and for all q ∈ A / B , b ∈ B , and e ∈ E , b ⋄ ′ ( q , ( g e , h e ) ) = q ( b ) ⋅ e = b ⋄ ( q , e ) . If A is empty, then B is empty, and A / p is a singleton empty function, so ( A / B , B × E , ⋆ ) ≃ ( A / B , B × E ′ , ⋆ ′ ) ≃ ⊤ , and we either have ( B , A / B × E , ⋄ ) ≃ ( B , A / B × E ′ , ⋄ ′ ) ≃ 0 or ( B , A / B × E , ⋄ ) ≃ ( B , A / B × E ′ , ⋄ ′ ) ≃ null , depending on whether or not E is empty. Thus, D ∈ External B ( C ) ⊠ External / B ( C ) , so External B ( C ) and External / B ( C ) are sisters in C . □ 1.4. Internalizing Definition: Given a partition F of E , let Internal F ( C ) denote the Cartesian Frame ( F × A , E / F , ⋆ ) , where ⋆ is given by ( f , a ) ⋆ q = a ⋅ q ( f ) . Let Internal / F ( C ) denote the Cartesian Frame ( E / F × A , F , ⋄ ) , where ⋄ is given by ( q , a ) ⋄ f = a ⋅ q ( f ) . We say "internalizing p " for Internal p and "internalizing mod p " for Internal / p . Claim: For all partitions F of E , ( Internal F ( C ) ) ∗ ≅ External F ( C ∗ ) and ( Internal / F ( C ) ) ∗ ≅ External / F ( C ∗ ) . Similarly, for all partitions B of A , ( External B ( C ) ) ∗ ≅ Internal B ( C ∗ ) and ( External / B ( C ) ) ∗ ≅ Internal / B ( C ∗ ) . Proof: Trivial. □ Claim: For all partitions F of E , C ◃ × Internal F ( C ) and C ◃ × Internal / F ( C ) . Proof: This follows from the fact that ( Internal F ( C ) ) ∗ ≅ External F ( C ∗ ) ◃ × C ∗ and ( Internal / F ( C ) ) ∗ ≅ External / F ( C ∗ ) ◃ × C ∗ , and the fact that multiplicative subagent is equivalent to multiplicative sub-environment. □ 2. Definitions from Worlds The above definitions are dependent on subsets and partitions of a given A and E , and thus do not represent a single operation that can be applied to an arbitrary Cartesian frame over W . We will now use the above eight definitions to define another eight operations that instead use subsets and partitions of W . Once we have the following definitions in hand, our future references to committing, assuming, externalizing, and internalizing will use the definitions from worlds unless noted otherwise. 2.1. Committing Definition: Given a set S ⊆ W , we define Commit S ( C ) = Commit B ( C ) and Commit ∖ S ( C ) = Commit ∖ B ( C ) , where B ⊆ A is given by B = { a ∈ A | ∀ e ∈ E , a ⋅ e ∈ S } . Claim: For all S ⊆ W , Commit S ( C ) ◃ + C and Commit ∖ S ( C ) ◃ + C . Further, Commit ∖ S ( C ) and Commit S ( C ) are brothers in C . Proof: Trivial. □ Unlike before, it is not necessarily the case that Commit ∖ S ( C ) ≅ Commit W ∖ S ( C ) . This is because there might be rows that contains both elements of S and elements of W ∖ S . 2.2. Assuming Definition: Given S ⊆ W , we define Assume S ( C ) = Assume F ( C ) and Assume ∖ S ( C ) = Assume ∖ F ( C ) , where F ⊆ E is given by F = { e ∈ E | ∀ a ∈ A , a ⋅ e ∈ S } . Claim: For all S ⊆ W , ( Assume S ( C ) ) ∗ ≅ Commit S ( C ∗ ) and ( Assume ∖ S ( C ) ) ∗ ≅ Commit ∖ S ( C ∗ ) , ( Commit S ( C ) ) ∗ ≅ Assume S ( C ∗ ) and ( Commit ∖ S ( C ) ) ∗ ≅ Assume ∖ S ( C ∗ ) . Proof: Trivial. □ Claim: For all S ⊆ W , C ◃ ∗ + Assume S ( C ) and C ◃ ∗ + Assume ∖ S ( C ) . Proof: Trivial. □ 2.3. Externalizing Definition: Given a partition V of W , let v : W → V send each element w ∈ W to the part that contains it. We define External V ( C ) = External B ( C ) and External / V ( C ) = External / B ( C ) , where B = { { a ′ ∈ A | ∀ e ∈ E , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A } . Claim: For all partitions V of W , External V ( C ) ◃ × C and External / V ( C ) ◃ × C . Further, External V ( C ) and External / V ( C ) are sisters in C . Proof: Trivial. □ 2.4. Internalizing Definition: Given a partition V of W , let v : W → V send each element w ∈ W to the part that contains it. We define Internal V ( C ) = Internal F ( C ) and Internal / V ( C ) = Internal / F ( C ) , where F = { { e ′ ∈ E | ∀ a ∈ a , v ( a ⋅ e ′ ) = v ( a ⋅ e ) } | e ∈ E } . Claim: For all partitions V of W , C ◃ × Internal V ( C ) and C ◃ × Internal / V ( C ) . Proof: Trivial. □ Claim: For all partitions V of W , ( Internal V ( C ) ) ∗ ≅ External V ( C ∗ ) , ( Internal / V ( C ) ) ∗ ≅ External / V ( C ∗ ) , ( External V ( C ) ) ∗ ≅ Internal V ( C ∗ ) , and ( External / V ( C ) ) ∗ ≅ Internal / V ( C ∗ ) . Proof: Trivial. □ 3. Basic Properties 3.1. Biextensional Equivalence Committing and assuming are well-defined up to biextensional equivalence. Claim: If C 0 ≃ C 1 are Cartesian frames over W , then for any subset S ⊆ W , Commit S ( C 0 ) ≃ Commit S ( C 1 ) , Commit ∖ S ( C 0 ) ≃ Commit ∖ S ( C 1 ) , Assume S ( C 0 ) ≃ Assume S ( C 1 ) , and Assume ∖ S ( C 0 ) ≃ Assume ∖ S ( C 1 ) . Proof: Let C i = ( A i , E i , ⋅ i ) , and let ( g 0 , h 0 ) : C 0 → C 1 and ( g 1 , h 1 ) : C 1 → C 0 compose to something homotopic to the identity in both orders. Let B i ⊂ A i be defined by B i = { a ∈ A i | ∀ e ∈ E i , a ⋅ i e ∈ S } . Observe that if b ∈ B 0 , then for all e ∈ E 1 , g 0 ( b ) ⋅ 1 e = b ⋅ 0 h 0 ( e ) ∈ S , so g 0 ( b ) ∈ B 1 . Similarly, if b ∈ B 1 , then g 1 ( b ) ∈ B 0 . Thus, if we let g ′ i : B i → B 1 − i be given by g ′ i ( b ) = g i ( b ) , we get morphisms ( g ′ i , h i ) : Commit S ( C i ) → Commit S ( C 1 − i ) , which are clearly morphisms, since they are restrictions of our original morphisms ( g i , h i ) . Since ( g 0 , h 0 ) and ( g 1 , h 1 ) compose to something homotopic to the identity in both orders, ( id A i , h 1 − i ∘ h i ) : C i → C i is a morphism, so ( id B i , h 1 − i ∘ h i ) : Commit S ( C i ) → Commit S ( C i ) is a morphism, so ( g ′ 0 , h 0 ) and ( g ′ 1 , h 1 ) compose to something homotopic to the identity in both orders. Thus Commit S ( C 0 ) ≃ Commit S ( C 1 ) . Similarly, if b ∈ A 0 ∖ B 0 , then there exists an e ∈ E 0 such that b ⋅ 0 e ∉ S . But then g 0 ( b ) ⋅ 1 h 1 ( e ) = g 1 ( g 0 ( b ) ) ⋅ 0 e = b ⋅ 0 e ∉ S , so g 0 ( b ) ∈ A 1 ∖ B 1 . Similarly, if b ∈ A 1 ∖ B 1 , then g 1 ( b ) ∈ A 0 ∖ B 0 . Thus, if we let g ′ ′ i : A i ∖ B i → A 1 − i ∖ B 1 − i be given by g ′ ′ i ( b ) = g i ( b ) , we get morphisms ( g ′ ′ i , h i ) : Commit ∖ S ( C i ) → Commit ∖ S ( C 1 − i ) , which (similarly to above) compose to something homotopic to the identity in both orders. Thus, Commit ∖ S ( C 0 ) ≃ Commit ∖ S ( C 1 ) . We know that Assume S ( C 0 ) ≃ Assume S ( C 1 ) and Assume ∖ S ( C 0 ) ≃ Assume ∖ S ( C 1 ) , because ( Assume S ( C 0 ) ) ∗ ≅ Commit S ( C ∗ 0 ) ≃ Commit S ( C ∗ 1 ) ≅ Assume S ( C 1 ) and ( Assume ∖ S ( C 0 ) ) ∗ ≅ Commit ∖ S ( C ∗ 0 ) ≃ Commit ∖ S ( C ∗ 1 ) ≅ Assume ∖ S ( C 1 ) . □ Externalizing and internalizing are also well-defined up to biextensional equivalence. Claim: If C 0 ≃ C 1 are Cartesian frames over W , then for all partitions V of W , External V ( C 0 ) ≃ External V ( C 1 ) , External / V ( C 0 ) ≃ External / V ( C 1 ) , Internal V ( C 0 ) ≃ Internal V ( C 1 ) , and Internal / V ( C 0 ) ≃ Internal / V ( C 1 ) . Proof: Let C i = ( A i , E i , ⋅ i ) , and let ( g 0 , h 0 ) : C 0 → C 1 and ( g 1 , h 1 ) : C 1 → C 0 compose to something homotopic to the identity in both orders. Let V be a partition of W, and let v : W → V send each element w ∈ W to the part that contains it. Let B i be the partition of A i defined by B i = { { a ′ ∈ A i | ∀ e ∈ E i , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A i } . Let β i : A i → B i , send each element of A i to its part in B i , so β i ( a ) = { a ′ ∈ A i | ∀ e ∈ E i , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } . Since β i is surjective, it has a right inverse. Let α i : B i → A i be any choice of right inverse to β i . This gives a pair of functions ι i : B i → B 1 − i given by ι i = β 1 − i ∘ g i ∘ α i . We start by showing that ι 0 and ι 1 are inverses, and thus bijections between B 0 and B 1 . We do this by showing that β i ∘ g 1 − i ∘ g i = β i , and that ι i ∘ β i = β 1 − i ∘ g i , and thus we will have ι 1 − i ∘ ι i = ι 1 − i ∘ β 1 − i ∘ g i ∘ α i = β i ∘ g 1 − i ∘ g i ∘ α i = β i ∘ α i , which is the identity on B i . To see that β i ∘ g 1 − i ∘ g i = β i , observe that for all a ∈ A i , we have that for all e ∈ E i , v ( a ⋅ i e ) = v ( g 1 − i ( g i ( a ) ) ⋅ i e ) , so, β i ( a ) = β i ( g 1 − i ( g i ( a ) ) ) . Thus, β i = β i ∘ g 1 − i ∘ g i . To see that ι i ∘ β i = β 1 − i ∘ g i , first observe that for all a ∈ A i , we have that β i ( α i ( β i ( a ) ) ) = β i ( a ) , and thus, for all e ∈ E 1 − i , v ( g i ( a ) ⋅ 1 − i e ) = v ( a ⋅ i h i ( e ) ) = v ( α i ( β i ( a ) ) ⋅ i h i ( e ) ) = v ( g i ( α i ( β i ( a ) ) ) ⋅ 1 − i e ) . Thus, β 1 − i ( g i ( a ) ) = β 1 − i ( g i ( α i ( β i ( a ) ) ) ) . Thus, we have β 1 − i ∘ g i = β 1 − i ∘ g i ∘ α i ∘ β i = ι i ∘ β i . This also gives us functions f i : A i / B i → A 1 − i / B 1 − i , by f i ( q ) = g i ∘ q ∘ ι 1 − i . To ehow that these functions are well-defined, we need to show that for all q ∈ A i / B i , f i ( q ) is in fact in A 1 − i / B 1 − i , by showing that for all b ∈ B 1 − i , g i ( q ( ι 1 − i ( b ) ) ) ∈ b , or equivalently that β 1 − i ∘ g i ∘ q ∘ ι 1 − i is the identity on B 1 − i . Since q ∈ A i / B i , we already have that β i ∘ q is the identity of B i . Thus, we have that β 1 − i ∘ g i ∘ q ∘ ι 1 − i = ι i ∘ β i ∘ q ∘ ι 1 − i = ι i ∘ ι 1 − i is the identity on B 1 − i . We are now ready to demonstrate that External V ( C 0 ) ≃ External V ( C 1 ) . Let External V ( C i ) = ( A i / B i , B i × E i , ⋆ i ) , and define ( g ′ i , h ′ i ) : ( A i / B i , B i × E i , ⋆ i ) → ( A 1 − i / B 1 − i , B 1 − i × E 1 − i , ⋆ 1 − i ) by g ′ i = f i , while h ′ i : B 1 − i × E 1 − i → B i × E i is given by h ′ i ( b , e ) = ( ι 1 − i ( b ) , h i ( e ) ) . To see that ( g ′ i , h ′ i ) is a morphism, observe that for all q ∈ A i / B i , and ( b , e ) ∈ B 1 − i × E 1 − i , we have g ′ i ( q ) ⋆ 1 − i ( b , e ) = f i ( q ) ⋆ 1 − i ( b , e ) = f i ( q ) ( b ) ⋅ 1 − i e = g i ( q ( ι 1 − i ( b ) ) ) ⋅ 1 − i e = q ( ι 1 − i ( b ) ) ⋅ i h i ( e ) = q ⋆ i ( ι 1 − i ( b ) , h i ( e ) ) = q ⋆ i h ′ i ( b , e ) . To see that ( g ′ 1 − i , h ′ 1 − i ) ∘ ( g ′ i , h ′ i ) is homotopic to the identity, we show that ( id A i / B i , h ′ i ∘ h ′ 1 − i ) : ( A i / B i , B i × E i , ⋆ i ) → ( A i / B i , B i × E i , ⋆ i ) is a morphism. Indeed, for all q ∈ A i / B i and ( b , e ) ∈ B i × E i , q ⋆ i h ′ i ( h ′ 1 − i ( b , e ) ) = q ⋆ i ( b , h i ( h 1 − i ( e ) ) ) = q ( b ) ⋅ i h i ( h 1 − i ( e ) ) = q ( b ) ⋅ i e = q ⋆ i ( b , e ) . Thus, External V ( C 0 ) ≃ External V ( C 1 ) Similarly, let External / V ( C i ) = ( B i , A i / B i × E i , ⋄ i ) , and define ( g ′ ′ i , h ′ ′ i ) : ( B i , A i / B i × E i , ⋄ i ) → ( B 1 − i , A 1 − i / B 1 − i × E 1 − i , ⋄ 1 − i ) by g ′ ′ i = ι i , and h ′ ′ i : A 1 − i / B 1 − i × E 1 − i → A i / B i × E i is given by h ′ ′ i ( q , e ) = ( f 1 − i ( q ) , h i ( e ) ) . To see that ( g ′ ′ i , h ′ ′ i ) is a morphism, observe that for all q ∈ B i , and ( q , e ) ∈ A 1 − i / B 1 − i × E 1 − i , we have g ′ ′ i ( b ) ⋄ 1 − i ( q , e ) = ι i ( b ) ⋄ 1 − i ( q , e ) = q ( ι i ( b ) ) ⋅ 1 − i e = q ( ι i ( b ) ) ⋅ 1 − i h 1 − i ( h i ( e ) ) = g 1 − i ( q ( ι i ( b ) ) ) ⋅ i h i ( e ) = f 1 − i ( q ) ( b ) ⋅ i h i ( e ) = b ⋄ i ( f 1 − i ( q ) , h i ( e ) ) = b ⋄ i h ′ ′ i ( q , e ) . Clearly, ( g ′ ′ 1 − i , h ′ ′ 1 − i ) ∘ ( g ′ ′ i , h ′ ′ i ) is homotopic to the identity, since g ′ ′ 1 − i ∘ g ′ ′ i is the identity on B i . Thus, External / V ( C 0 ) ≃ External / V ( C 1 ) . We know that Internal V ( C 0 ) ≃ Internal V ( C 1 ) and Internal / V ( C 0 ) ≃ Internal / V ( C 1 ) , because ( Internal V ( C 0 ) ) ∗ ≅ External V ( C ∗ 0 ) ≃ External V ( C ∗ 1 ) ≅ Internal V ( C 1 ) and ( Internal / V ( C 0 ) ) ∗ ≅ External / V ( C ∗ 0 ) ≃ External / V ( C ∗ 1 ) ≅ Internal / V ( C 1 ) . □ 3.2. Committing and Assuming Can Be Defined Using Lollipop and Tensor Claim: Commit S ( C ) ≅ 1 S ⊸ C and Assume S ( C ) ≅ 1 S ⊗ C . Proof: Let C = ( A , E , ⋅ ) , and let 1 S = ( { a } , S , ⋄ ) . Let Commit S ( C ) = ( B , E , ⋆ ) , where B = { b ∈ A | ∀ e ∈ e , b ⋅ e ∈ S } , and b ⋆ e = b ⋅ e . Let 1 S ⊸ C = ( hom ( 1 S , C ) , { a } × E , ∙ ) , where ( g , h ) ∙ ( a , e ) = g ( a ) ⋅ e = a ⋄ h ( e ) = h ( e ) . We construct an isomorphism ( g 0 , h 0 ) : ( 1 S ⊸ C ) → Commit S ( C ) , by defining g 0 : hom ( 1 S , C ) → B by g 0 ( g , h ) = g ( a ) , and by defining h 0 : E → { a } × E by h 0 ( e ) = ( a , e ) . First, we need to show that g 0 is a well-defined function into B . Observe that for all ( g , h ) ∈ hom ( 1 S , C ) , and for all e ∈ E , g 0 ( g , h ) ⋅ e = g ( a ) ⋅ e = h ( e ) ∈ S , and so g 0 ( g , h ) ∈ B . Next, we show that ( g 0 , h 0 ) is a morphism, by showing that for all ( g , h ) ∈ hom ( 1 S , C ) and e ∈ E , g 0 ( g , h ) ⋆ e = g ( a ) ⋆ e = g ( a ) ⋅ e = a ⋄ h ( e ) = ( g , h ) ∙ ( a , e ) = ( g , h ) ∙ h 0 ( e ) . Finally, to show that ( g 0 , h 0 ) , we need to show that g 0 and h 0 are bijections. Clearly, h 0 is a bijection. To see that g 0 is injective, observe that if g 0 ( g , h ) = g 0 ( g ′ , h ′ ) , then g ( a ) = g ′ ( a ) , so g = g ′ . Further, for all e ∈ E , h ( e ) = a ⋄ h ( e ) = g ( a ) ⋅ e = g ′ ( a ) ⋅ e = a ⋄ h ′ ( e ) = h ′ ( e ) , so h = h ′ . Thus g 0 is injective. To see that g 0 is surjective, observe that for all b ∈ B , there exists a morphism ( g b , h b ) : 1 S → C , given by g b ( a ) = b , and h b ( e ) = b ⋆ e . This is a morphism because, for all a ∈ { a } and e ∈ E , g b ( a ) ⋆ e = b ⋆ e = h b ( e ) = a ⋄ h b ( e ) . Since g 0 ( g b , h b ) = g b ( a ) = b , we have that g 0 is surjective, and thus ( g 0 , h 0 ) is an isomorphism between 1 S ⊸ C and Commit S ( C ) . To see that Assume S ( C ) ≅ 1 S ⊗ C , observe that Assume S ( C ) ≅ Commit S ( C ∗ ) ∗ ≅ ( 1 S → C ∗ ) ∗ ≅ ( 1 ∗ S ⅋ C ∗ ) ∗ ≅ 1 S ⊗ C . □ Recall that we can think of 1 S as a powerless agent that has been promised S . 1 S ⊗ C , then, is a team consisting of Agent ( C ) alongside an agent that has been promised S . In order for these two to form a team, the promise S must still hold for the team as a whole; and since Agent ( 1 S ) is powerless, the resultant team is exactly Agent ( C ) joined with the promise, i.e., Assume S ( C ) . Commit S ( C ) ≅ 1 S ⊸ C is less intuitive. 1 S ⊸ C is " C with a hole in it shaped like a promise that S happens." In effect, an agent-and-hole can only "fit" such a promise into itself by being the kind of agent-and-hole that always guarantees S will happen. It will sometimes be helpful to think about assuming and committing in terms of 1 S , as this highlights the close relationship between these operations and the other objects and operations we've been working with. 1 4. Idempotence We will show that all eight of the new definition from worlds are idempotent (up to isomorphism). We will do this by in each case describing the subset of Cartesian frames over W that each operation projects onto, and showing that the operation is indeed fixed on that subset. 4.1. Committing and Assuming Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and subset S of W , Commit S ( C ) ◃ ⊥ S and Assume S ( C ) ◃ ⊥ S . Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and subset S of W , with C ◃ ⊥ S , Commit S ( C ) ≅ Assume S ( C ) ≅ C . Proof: Trivial. □ Corollary: For any subset S of W , Commit S and Assume S are idempotent. Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and subset S of W , if Commit ∖ S = ( A ′ , E ′ , ⋅ ′ ) , then for all a ′ ∈ A ′ , there exists an e ′ ∈ E ′ such that a ′ ⋅ ′ e ′ ∉ S . Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and subset S of W , if for all a ∈ A , there exists an e ∈ E such that a ⋅ e ∉ S , then Commit ∖ S ( C ) ≅ C . Proof: Trivial. □ Corollary: For any subset S of W , Commit ∖ S is idempotent. Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and subset S of W , if Assume ∖ S ( C ) = ( A ′ , E ′ , ⋅ ′ ) , then for all e ′ ∈ E ′ , there exists an a ′ ∈ A ′ such that a ′ ⋅ ′ e ′ ∉ S . Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and subset S of W , if for all e ∈ E , there exists an a ∈ A such that a ⋅ e ∉ S , then Assume ∖ S ( C ) ≅ C . Proof: Trivial. □ Corollary: For any subset S of W , Assume ∖ S ( C ) is idempotent. Proof: Trivial. □ 4.2. Externalizing Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If External V ( C ) = ( A ′ , E ′ , ⋅ ′ ) , then A ′ is nonempty and for all a ′ 0 , a ′ 1 ∈ A ′ and e ′ ∈ E ′ , we have v ( a ′ 0 ⋅ ′ e ′ ) = v ( a ′ 1 ⋅ ′ e ′ ) . Proof: Let B be defined, as in the definition of External V , as B = { { a ′ ∈ A | ∀ e ∈ E , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A } . A ′ is A / B , the set of functions from B to A that sends each part in B to an element of that part, and E ′ = B × E . A ′ is clearly nonempty. Consider an arbitrary a ′ 0 , a ′ 1 ∈ A ′ and ( e , b ) ∈ E ′ . Since a ′ 0 ( b ) , a ′ 0 ( b ) ∈ b are in the same part, we have that a ′ 0 ( b ) ⋅ e = a ′ 0 ( b ) ⋅ e , and thus v ( a ′ 0 ⋅ ′ ( b , e ) ) = v ( a ′ 1 ⋅ ′ ( b , e ) ) . □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If A is nonempty and for all a 0 , a 1 ∈ A and e ∈ E , we have v ( a 0 ⋅ e ) = v ( a 1 ⋅ e ) , then External V ( C ) ≅ C . Proof: Let B be defined, as in the definition of External V , as B = { { a ′ ∈ A | ∀ e ∈ E , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A } . If A is nonempty and for all a 0 , a 1 ∈ A and e ∈ E , we have v ( a 0 ⋅ e ) = v ( a 1 ⋅ e ) , then B has only one part, B = { A } . Thus, External V ( C ) = ( A / { A } , { A } × E , ⋆ ) , where ⋆ is given by q ⋆ ( A , e ) = q ( A ) ⋅ e . Let ( g , h ) : External V ( C ) → C be given by g ( q ) = q ( A ) , and h ( e ) = ( A , e ) . This is trivially a morphism, and both g and h are trivially bijections, so External V ( C ) ≅ C . □ Corollary: For any partition V of W , External V is idempotent. Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If External / V = ( A ′ , E ′ , ⋅ ′ ) , then for all a ′ 0 ≠ a ′ 1 ∈ A ′ there exists an e ′ ∈ E ′ , such that v ( a ′ 0 ⋅ ′ e ′ ) ≠ v ( a ′ 1 ⋅ ′ e ′ ) . Proof: Let B be defined once again as B = { { a ′ ∈ A | ∀ e ∈ E , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A } . A ′ = B and E ′ = A / B × E . Since A / B is clearly nonempty, fix any q ∈ A / B . Observe that if a ′ 0 ≠ a ′ 1 , then q ( a ′ 0 ) and q ( a ′ 1 ) are in different parts in B, so there exists an e ∈ E such that v ( q ( a ′ 0 ) ⋅ e ) ≠ v ( q ( a ′ 1 ) ⋅ e ) . Thus v ( a ′ 0 ⋅ ′ ( q , e ) ) ≠ v ( a ′ 1 ⋅ ′ ( q , e ) ) . □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If for all a 0 ≠ a 1 ∈ A there exists an e ∈ E , such that v ( a 0 ⋅ e ) ≠ v ( a 1 ⋅ e ) , then External V ( C ) ≅ C . Proof: Again, let B be defined again as B = { { a ′ ∈ A | ∀ e ∈ E , v ( a ′ ⋅ e ) = v ( a ⋅ e ) } | a ∈ A } . If for all a 0 ≠ a 1 ∈ A there exists an e ∈ E such that v ( a 0 ⋅ e ) ≠ v ( a 1 ⋅ e ) , then every element of B is a singleton. Thus A / B = { q } is a singleton, and q is a bijection. External / V ( C ) = ( B , { q } × E , ⋆ ) , where ⋆ is given by b ⋆ ( q , e ) = q ( b ) ⋅ e . Let ( g , h ) : External / V ( C ) → C be given by g ( b ) = q ( b ) , and h ( e ) = ( q , e ) . This is trivially a morphism and both g and h are trivially bijections, so External / V ( C ) ≅ C . □ Corollary: For any partition V of W , External / V ( C ) is idempotent. Proof: Trivial. □ 4.3. Internalizing Using duality, we also get all of the following analogous results for internalizing. Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If Internal V ( C ) = ( A ′ , E ′ , ⋅ ′ ) , then E ′ is nonempty and for all e ′ 0 , e ′ 1 ∈ E ′ and a ′ ∈ A ′ , we have v ( a ′ ⋅ ′ e ′ 0 ) = v ( a ′ ⋅ ′ e ′ 1 ) . Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If for all e 0 , e 1 ∈ E and a ∈ A we have v ( a ⋅ e 0 ) = v ( a ⋅ e 1 ) , then Internal V ( C ) ≅ C . Proof: Trivial. □ Corollary: For any partition V of W , Internal V ( C ) is idempotent. Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If Internal / V ( C ) = ( A ′ , E ′ , ⋅ ′ ) , then for all e ′ 0 ≠ e ′ 1 ∈ E ′ there exists an a ′ ∈ A ′ , such that v ( a ′ ⋅ ′ e ′ 0 ) ≠ v ( a ′ ⋅ ′ e ′ 0 ) . Proof: Trivial. □ Claim: For any Cartesian frame C = ( A , E , ⋅ ) over W and partition V of W , let v : W → V send each element of W to its part in V . If for all e 0 ≠ e 1 ∈ A there exists an a ∈ A , such that v ( a ⋅ e 0 ) ≠ v ( a ⋅ e 1 ) , then Internal V ( C ) ≅ C . Proof: Trivial. □ Corollary: For any partition V of W , Internal / V ( C ) is idempotent. Proof: Trivial. □ Our new assuming, internalizing, and externalizing operations will also provide a new lens for us to better understand observables. We turn to this in our next post, "Eight Definitions of Observability." Footnotes 1. This section is a good distillation of 1 S as it relates to multiplicative operations. The additive role of 1 S is quite different from this, and quite varied. There isn't a single interpretation for 1 S in additive contexts, beyond the basic interpretation we provided in " Biextensional Equivalence " that 1 S is "a powerless, all-knowing agent... plus a promise from the environment that the world will be in S ." ↩