A putative new idea for AI control; index here . Along with Jan Leike and Laurent Orseau, I've been working to formalise many of the issues with AIs learning human values. I'll be presenting part of this at NIPS and the whole of it at some later conference. Therefore it seems best to formulate the whole problem in the reinforcement learning formalism. The results can generally be easily reformulated for general systems (including expected utility). POMDP A partially observable Markov decision process without reward function (POMDP\R), μ = ( S , A , O , T , O , T 0 ) consists of: a finite set of states S , a finite set of actions A , a finite set of observations O , a transition probability distribution T : S × A → Δ S , a probability distribution T 0 ∈ Δ S over the initial state s 0 . an observation probability distribution O : S → Δ O . The agent interacts with the environment in cycles:
in time step t , the environment is in state s t − 1 ∈ S and
the agent chooses an action a t ∈ A .
Subsequently
the environment transitions to a new state s t ∈ S drawn from the distribution T ( s t ∣ s t − 1 , a t ) and
the agent then receives an observation o t ∈ O drawn from the distribution O ( o t ∣ s t ) .
The underlying states s t − 1 and s t are not directly observed by the agent. An observed history h t = a 1 o 1 a 2 o 2 … a t o t is a sequence of actions and observations.
We denote the set of all observed histories of length t with H t : = ( A × O ) t . For a given horizon m , call H m the set of full histories; then H < m = ⋃ t < m H t is the set of partial histories.
For t ′ > t , let a t : t ′ be the sequence of actions a t a t + 1 … a t ′ ,
let o t : t ′ be the sequence of observations o t o t + 1 … o t ′ , and
let s t : t ′ the sequence of states s t s t + 1 … s t ′ . The set Π is the set of policies , functions π : ( A × O ) ∗ → Δ A mapping histories to probability distributions over actions.
Given a policy π and environment μ ,
we get a probability distribution over histories: μ ( a 1 o 1 … a t o t ∣ π ) : = ∑ s 0 : t ∈ S t T 0 ( s 0 ) ∏ t k = 1 O ( o k ∣ s k ) T ( s k ∣ s k − 1 , a k ) π ( a k ∣ a 1 o 1 … a k − 1 o k ) . The expectation with respect to the distributions μ and π is denoted E π μ . Rewards Rewards in this case can be seen as functions R : O → R from observations to real numbers. The agent's goal is to maximize total reward ∑ m t = 1 R ( o t ) up to the horizon m . We assume that S and A are known to the agent.
The reward function R is unknown, but
there is a finite set of candidate reward functions , R .
The agent has to learn a reward function in the process of interacting with the environment. The reward learning posterior There are a variety of algorithms that act as reward function learning processes. It might be the cooperative learning algorithm, or some interactive question and answers sessions, or simply learning from observation of human behaviour/human generated data.
In all cases, at the end of m turns, the agent will have an estimate of the probability of the various reward functions. Thus a universal definition of the process of reward learning is given by a posterior P : H m → Δ R , mapping histories to distributions over possible rewards. This posterior is equivalent with the definition of the algorithm. Now, anything that gives a distribution over H m can therefore give a distribution over R . This allows the construction a value function for any policy π corresponding to the reward learning posterior: V π P ( h t ) : = E π μ [ ∑ R ∈ R P ( R ∣ h m ) ∑ m k = 1 R ( o k ) ∣ ∣ h t ] . The reward learning prior Some reward learning algorithms (though not all) will also have a reward learning prior ˆ P over R . Given a partial history h t ∈ H t with t ≤ m , this gives the agent's current estimate as to what the final distribution over R will be: ˆ P ( ⋅ ∣ h t ) . For consistency, when t = m , set ˆ P ( ⋅ ∣ h m ) = P ( ⋅ ∣ h m ) (so that when all the history is in, the prior is the posterior). This prior is often used in practice to estimate the value function V π P ( h t ) .